from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtWidgets, QtGui
from app import resources_rc
from functools import partial
from libcore import cmap
from libcore import color
from libcore import dicom
from libcore import widget
from libcore.dicom import pydicom_type_to_python
from libcore.image import Image
from libcore.interact import StyleDrawPolygon3, StyleActorSelection, StyleRubberBand2D, CircleSelection
from libcore.mixins import ViewportMixin
from libcore.qt import Viewport
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from pathlib import Path
from pydicom import read_file
import h5py
import io
import math
import matplotlib.pyplot as plt
import numpy
import numpy as np
import os
import psutil
import pydicom
import sqlite3
import tempfile
import vtk
from PyQt5.QtCore import QDate, QTimer, QEvent, pyqtSlot, QObject, Qt, QThread, QRectF, pyqtSignal
from PyQt5.QtGui import QFontMetrics, QPixmap, QImage, QFont, QIcon, QPainter, QColor
from PyQt5.QtWidgets import QSizePolicy, QDialog, QButtonGroup, QStatusBar, QListWidgetItem, QLabel, QPushButton, QTreeWidgetItem, QFileDialog, QProgressDialog, QTableWidgetItem, QTabWidget, QAbstractButton, QMainWindow, QHeaderView, QWidget
from libcore.color import get_color, cmap, random_mesh_color
from libcore.display import VolActor, PolyActor
from libcore.geometry import vec_norm, vec_add, Plane, point_distance, vec_normalize
from libcore.mesh import read_mesh_from_hdf, save_mesh_to_hdf, Mesh, square_warp
from libcore.topology import extract_cells_using_points, delete_cells, face_for_point, mesh_inflate, mesh_deflate
from libcore.widget import PlaneSelector, CubeManipulator, ImageView, Label, LineProbe, SphereWidget, ArrowProbe



class EditorModel(QObject):
    propSelected = pyqtSignal()
    propsUpdated = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._prop = None
        self._props = {}

        self.cutterPolyline = ToolCutterPolyline(self)
        self.cutterRect = ToolCutterRect(self)
        self.cutterCircle = ToolCutterCircle(self)
        self.cutterCube = ToolCutterCube(self)
        self.cutterSphere = ToolCutterSphere(self)
        self.cutterPlane = ToolCutterPlane(self)

        self.splitter = ToolSplitter(self)

    @property
    def prop(self):
        return self._prop

    @prop.setter
    def prop(self, value):
        prop = value if (self.prop != value) else None

        if self.prop in self._props:
            propUnselect(self._props[self.prop])
        if prop:
            if value in self._props:
                propSelect(self._props[value])
        else:
            self.cutterPolyline.toggle = False
            self.cutterRect.toggle = False
            self.cutterCircle.toggle = False
            self.cutterCube.toggle = False
            self.cutterSphere.toggle = False
            self.cutterPlane.toggle = False

        self._prop = prop
        self.propSelected.emit()

    @property
    def props(self):
        return self._props

    @pyqtSlot(str)
    def getVisibility(self, key):
        if key in self._props:
            return self._props[key].GetVisibility()

    @pyqtSlot(str, bool)
    def setVisibility(self, key, toggle):
        if self.prop != key:
            print('{} setVisibility!!! toggle={}'.format(__file__, toggle))
            if key in self._props:
                self._props[key].SetVisibility(toggle)
        self.propsUpdated.emit()

    @pyqtSlot(str)
    def getProp(self, key):
        if key in self._props:
            return self._props[key]
        return None

    @pyqtSlot(str, PolyActor)
    def addProp(self, key, prop):
        key = self._uname(key)
        if len(self._props) == 0:
            prop.color = 'white'
        else:
            prop.color = random_mesh_color()
        self._props[key] = prop
        if len(self.props) == 1:
            self.prop = key
        self.propsUpdated.emit()

    @pyqtSlot(str, list)
    def addProps(self, key, props):
        for prop in props:
            key_ = self._uname(key)
            self._props[key_] = prop
        self.propsUpdated.emit()

    @pyqtSlot(str)
    def copyProp(self, key):
        if self.prop:
            mesh = Mesh(self._props[self.prop].mesh)
            self.addProp(key, PolyActor(mesh))

    @pyqtSlot(str)
    def saveProp(self, file_path):
        if self.prop:
            self._props[self.prop].mesh.save(file_path)

    @pyqtSlot()
    def delProp(self):
        if self.prop:
            del self._props[self.prop]
            self.prop = None
            self.propsUpdated.emit()

    def save_to_hdf(self, fd):
        grp = fd.create_group('meshes')
        for name in self.props:
            grp[name] = '1'
            save_mesh_to_hdf(fd, name, self.props[name].mesh)

    def load_from_hdf(self, fd):
        if 'meshes' in fd:
            for key in fd['meshes']:
                prop = PolyActor(read_mesh_from_hdf(fd, key))
                self.addProp(key, prop)

    def _uname(self, name):
        names = self.props.keys()
        if name in names:
            for i in range(100000):
                index = name + '.' + str(i)
                if index not in names:
                    return index
        else:
            return name


def propSelect(prop):
    prop.ambient = 0.6
    prop.diffuse = 0.4
    prop.specular = 0.5
    prop.specular_power = 30.0


def propUnselect(prop):
    prop.ambient = 0.0
    prop.diffuse = 1.0
    prop.specular = 0.0
    prop.specular_power = 0.0


class ToolCutter(QObject):
    toolUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.parent = parent
        self._name = None
        self._toggle = False
        self._inverse = False
        self._selection = None
        self._precut = None

        self.parent.propSelected.connect(self.updateSelect)

    def updateSelect(self):
        if self.parent.prop:
            if self.toggle:
                self.update()
        else:
            self.toggle = False

    def update(self, selection=None):
        if selection:
            self._selection = selection
        if self._selection and self.parent.prop:
            if self.parent.prop:
                _prop = self.parent.props[self.parent.prop]
                _prop.opacity = 0.1

                precut = _prop.mesh.clip_by_mesh(self._selection,
                                                 self.inverse,
                                                 inplace=False)
                self._precut = PolyActor(precut,
                                         color=_prop.color)
                propSelect(self.precut)
                self.toolUpdated.emit(self)

    def cut(self):
        if self._selection and self.parent.prop:
            if self._precut:
                self.parent.props[self.parent.prop] = self._precut

        self._selection = None
        self._precut = None
        self.toolUpdated.emit(self)
        self.parent.propsUpdated.emit()

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def toggle(self):
        return self._toggle

    @toggle.setter
    def toggle(self, value):
        if self._toggle == value:
            return

        self._toggle = value

        if not self.toggle:
            if self.parent.prop in self.parent.props:
                self.parent.props[self.parent.prop].opacity = 1.0
            self._precut = None
            self.parent.propsUpdated.emit()

        self.toolUpdated.emit(self)

    @property
    def inverse(self):
        return self._inverse

    @inverse.setter
    def inverse(self, value):
        if self._inverse == value:
            return

        if self.parent.prop:
            self._inverse = value
            self.toolUpdated.emit(self)
            self.update()

    @property
    def precut(self):
        return self._precut


class ToolCutterPolyline(ToolCutter):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'polyline'


class ToolCutterRect(ToolCutter):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'rect'


class ToolCutterCircle(ToolCutter):
    cutUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'circle'

    def cut(self):
        self.cutUpdated.emit(self)


class ToolCutterCube(ToolCutter):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'cube'


class ToolCutterSphere(ToolCutter):
    cutUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'sphere'

    def cut(self):
        self.cutUpdated.emit(self)


class ToolCutterPlane(ToolCutter):
    cutUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'plane'

    def cut(self):
        self.cutUpdated.emit(self)


class ToolSplitter(QObject):
    toolUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.parent = parent
        self._name = 'splitter'
        self._toggle = False
        self._number = 20
        self._size = 0
        self._parts = []

        self.parent.propSelected.connect(self.updateSelect)

    def updateSelect(self):
        if self.parent.prop:
            if self.toggle:
                self.update()
        else:
            self.toggle = False

    def update(self, number=None, size=None):
        if number != None:
            self._number = number
        if size != None:
            self._size = size

        if self.parent.prop in self.parent.props:
            prop = self.parent.props[self.parent.prop]
            if self.size == 0:
                self._parts = [PolyActor(mesh, color=random_mesh_color())
                               for mesh in prop.mesh.split(n_largest=int(self._number))]
            elif self.size == 1:
                self._parts = [PolyActor(mesh, color=random_mesh_color())
                               for mesh in prop.mesh.split(n_smallest=int(self._number))]
            self.toolUpdated.emit(self)

    def cut(self):
        if self.parent.prop in self.parent.props:
            if len(self.parts) > 0:
                self.parent.addProps(self.parent.prop + '.splt', self.parts)
                self.parent.delProp()

        self._parts = []
        self.toolUpdated.emit(self)
        self.parent.propsUpdated.emit()

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def toggle(self):
        return self._toggle

    @toggle.setter
    def toggle(self, value):
        if self._toggle == value:
            return

        self._toggle = value

        if self.toggle:
            self.updateSelect()

        if not self.toggle:
            if self.parent.prop in self.parent.props:
                self.parent.props[self.parent.prop].opacity = 1.0
            self._precut = None

        self.toolUpdated.emit(self)

    @property
    def number(self):
        return self._number

    @number.setter
    def number(self, value):
        self._number = value
        self.update()

    @property
    def size(self):
        return self._size

    @size.setter
    def size(self, value):
        self._size = value
        self.update()

    @property
    def parts(self):
        return self._parts


editorModel = EditorModel()


class HistogramModel(QObject):
    histogramUpdated = pyqtSignal()
    histogramEnabled = pyqtSignal(bool)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.histogram = None

    def showHistogram(self, toggle):
        self.histogramEnabled.emit(toggle)

    def setHistogram(self, samples):
        self.histogram = samples
        self.histogramUpdated.emit()


histogramModel = HistogramModel()



class ImageModel(QObject):
    imageLoaded = pyqtSignal()
    imageUpdated = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.origin = None
        self.image = None
        self.files = None

    @pyqtSlot(Image)
    def setImage(self, image):
        self.origin = Image(image)
        self.image = image
        self.imageLoaded.emit()

    @pyqtSlot(float, float)
    def setSmooth(self, sigma, window):
        if self.image:
            self.image.smooth(sigma=sigma,
                              window=window,
                              inplace=True)
            self.imageUpdated.emit()

    @pyqtSlot(float, float)
    def setDenoise(self, factor, threshold):
        if self.image:
            self.image.denoise(factor=factor,
                               threshold=threshold,
                               inplace=True)
            self.imageUpdated.emit()

    @pyqtSlot()
    def setEnhance(self):
        if self.image:
            self.image.enhance(inplace=True)
            self.imageUpdated.emit()

    @pyqtSlot()
    def setOrigin(self):
        if self.image:
            self.image = Image(self.origin)
            self.imageLoaded.emit()

    @pyqtSlot(str)
    def setFlip(self, axis='x'):
        if self.image:
            self.image.flip(axis=axis, inplace=True)
            self.imageUpdated.emit()


imageModel = ImageModel()



class ImplantorModel(QObject):
    propSelected = pyqtSignal()
    propsUpdated = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._prop = None
        self._props = {}

        self.cutterPolyline = ToolCutterPolyline(self)
        self.cutterRect = ToolCutterRect(self)
        self.cutterCircle = ToolCutterCircle(self)
        self.cutterCube = ToolCutterCube(self)
        self.cutterSphere = ToolCutterSphere(self)
        self.cutterPlane = ToolCutterPlane(self)

        self.splitter = ToolSplitter(self)

    @property
    def prop(self):
        return self._prop

    @prop.setter
    def prop(self, value):
        prop = value if (self.prop != value) else None

        if self.prop in self._props:
            propUnselect(self._props[self.prop])
        if prop:
            if value in self._props:
                propSelect(self._props[value])
        else:
            self.cutterPolyline.toggle = False
            self.cutterRect.toggle = False
            self.cutterCircle.toggle = False
            self.cutterCube.toggle = False
            self.cutterSphere.toggle = False
            self.cutterPlane.toggle = False

        self._prop = prop
        self.propSelected.emit()

    @property
    def props(self):
        return self._props

    @pyqtSlot(str)
    def getVisibility(self, key):
        if key in self._props:
            return self._props[key].GetVisibility()

    @pyqtSlot(str, bool)
    def setVisibility(self, key, toggle):
        if self.prop != key:
            print('{} setVisibility!!! toggle={}'.format(__file__, toggle))
            if key in self._props:
                self._props[key].SetVisibility(toggle)
        self.propsUpdated.emit()

    @pyqtSlot(str)
    def getProp(self, key):
        if key in self._props:
            return self._props[key]
        return None

    @pyqtSlot(str, PolyActor)
    def addProp(self, key, prop):
        key = self._uname(key)
        prop.color = random_mesh_color()
        self._props[key] = prop
        if len(self.props) == 1:
            self.prop = key
        self.propsUpdated.emit()
        return key

    def reProp(self, key, mesh):
        if key in self._props:
            prop = PolyActor(mesh)
            prop.color = self._props[key].color
            prop.ambient = self._props[key].ambient
            prop.diffuse = self._props[key].diffuse
            prop.specular = self._props[key].specular
            prop.specular_power = self._props[key].specular_power
            self._props[key] = prop

        self.propsUpdated.emit()

    @pyqtSlot(str, list)
    def addProps(self, key, props):
        for prop in props:
            key_ = self._uname(key)
            self._props[key_] = prop
        self.propsUpdated.emit()

    @pyqtSlot(str)
    def copyProp(self, key):
        if self.prop:
            mesh = Mesh(self._props[self.prop].mesh)
            self.addProp(key, PolyActor(mesh))

    @pyqtSlot(str)
    def saveProp(self, file_path):
        if self.prop:
            self._props[self.prop].mesh.save(file_path)

    @pyqtSlot()
    def delProp(self):
        if self.prop:
            del self._props[self.prop]
            self.prop = None
            self.propsUpdated.emit()

    def save_to_hdf(self, fd):
        grp = fd.create_group('meshes')
        for name in self.props:
            grp[name] = '1'
            save_mesh_to_hdf(fd, name, self.props[name].mesh)

    def load_from_hdf(self, fd):
        if 'meshes' in fd:
            for key in fd['meshes']:
                prop = PolyActor(read_mesh_from_hdf(fd, key))
                self.addProp(key, prop)

    def _uname(self, name):
        names = self.props.keys()
        if name in names:
            for i in range(100000):
                index = name + '.' + str(i)
                if index not in names:
                    return index
        else:
            return name


def propSelect(prop):
    prop.ambient = 0.6
    prop.diffuse = 0.4
    prop.specular = 0.5
    prop.specular_power = 30.0


def propUnselect(prop):
    prop.ambient = 0.0
    prop.diffuse = 1.0
    prop.specular = 0.0
    prop.specular_power = 0.0


class ToolCutter(QObject):
    toolUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.parent = parent
        self._name = None
        self._toggle = False
        self._inverse = False
        self._selection = None
        self._precut = None

        self.parent.propSelected.connect(self.updateSelect)

    def updateSelect(self):
        if self.parent.prop:
            if self.toggle:
                self.update()
        else:
            self.toggle = False

    def update(self, selection=None):
        if selection:
            self._selection = selection
        if self._selection and self.parent.prop:
            if self.parent.prop:
                _prop = self.parent.props[self.parent.prop]
                _prop.opacity = 0.1

                precut = _prop.mesh.clip_by_mesh(self._selection,
                                                 self.inverse,
                                                 inplace=False)
                self._precut = PolyActor(precut,
                                         color=_prop.color)
                propSelect(self.precut)
                self.toolUpdated.emit(self)

    def cut(self):
        if self._selection and self.parent.prop:
            if self._precut:
                self.parent.props[self.parent.prop] = self._precut

        self._selection = None
        self._precut = None
        self.toolUpdated.emit(self)
        self.parent.propsUpdated.emit()

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def toggle(self):
        return self._toggle

    @toggle.setter
    def toggle(self, value):
        if self._toggle == value:
            return

        self._toggle = value

        if not self.toggle:
            if self.parent.prop in self.parent.props:
                self.parent.props[self.parent.prop].opacity = 1.0
            self._precut = None
            self.parent.propsUpdated.emit()

        self.toolUpdated.emit(self)

    @property
    def inverse(self):
        return self._inverse

    @inverse.setter
    def inverse(self, value):
        if self._inverse == value:
            return

        if self.parent.prop:
            self._inverse = value
            self.toolUpdated.emit(self)
            self.update()

    @property
    def precut(self):
        return self._precut


class ToolCutterPolyline(ToolCutter):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'polyline'


class ToolCutterRect(ToolCutter):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'rect'


class ToolCutterCircle(ToolCutter):
    cutUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'circle'

    def cut(self):
        self.cutUpdated.emit(self)


class ToolCutterCube(ToolCutter):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'cube'


class ToolCutterSphere(ToolCutter):
    cutUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'sphere'

    def cut(self):
        self.cutUpdated.emit(self)


class ToolCutterPlane(ToolCutter):
    cutUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._name = 'plane'

    def cut(self):
        self.cutUpdated.emit(self)


class ToolSplitter(QObject):
    toolUpdated = pyqtSignal(QObject)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.parent = parent
        self._name = 'splitter'
        self._toggle = False
        self._number = 20
        self._size = 0
        self._parts = []

        self.parent.propSelected.connect(self.updateSelect)

    def updateSelect(self):
        if self.parent.prop:
            if self.toggle:
                self.update()
        else:
            self.toggle = False

    def update(self, number=None, size=None):
        if number != None:
            self._number = number
        if size != None:
            self._size = size

        if self.parent.prop in self.parent.props:
            prop = self.parent.props[self.parent.prop]
            if self.size == 0:
                self._parts = [PolyActor(mesh, color=random_mesh_color())
                               for mesh in prop.mesh.split(n_largest=int(self._number))]
            elif self.size == 1:
                self._parts = [PolyActor(mesh, color=random_mesh_color())
                               for mesh in prop.mesh.split(n_smallest=int(self._number))]
            self.toolUpdated.emit(self)

    def cut(self):
        if self.parent.prop in self.parent.props:
            if len(self.parts) > 0:
                self.parent.addProps(self.parent.prop + '.splt', self.parts)
                self.parent.delProp()

        self._parts = []
        self.toolUpdated.emit(self)
        self.parent.propsUpdated.emit()

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def toggle(self):
        return self._toggle

    @toggle.setter
    def toggle(self, value):
        if self._toggle == value:
            return

        self._toggle = value

        if not self.toggle:
            if self.parent.prop in self.parent.props:
                self.parent.props[self.parent.prop].opacity = 1.0
            self._precut = None

        self.toolUpdated.emit(self)

    @property
    def number(self):
        return self._number

    @number.setter
    def number(self, value):
        self._number = value
        self.update()

    @property
    def size(self):
        return self._size

    @size.setter
    def size(self, value):
        self._size = value
        self.update()

    @property
    def parts(self):
        return self._parts


implantorModel = ImplantorModel()


class LayoutModel(QObject):
    CLASSIC_BOTTOM = 0
    CLASSIC_RIGHT = 1
    ONLY_3D = 2
    TWO_BY_TWO = 3
    MIRRORING = 4
    ONLY_AXIAL = 5
    ONLY_CORONAL = 6
    ONLY_SAGITTAL = 7

    stateUpdated = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._state = None

        self.state = LayoutModel.CLASSIC_RIGHT

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        if self._state != value:
            self._state = value
            self.stateUpdated.emit()


layoutModel = LayoutModel()



class LookModel(QObject):
    lookUpdated = pyqtSignal(tuple)

    AP = Viewport.OrientAnteriorPosterior
    PA = Viewport.OrientPosteriorAnterior
    LAO = Viewport.OrientLeftAnteriorOblique
    RAO = Viewport.OrientRightAnteriorOblique
    SUP = Viewport.OrientSuperiorInferior
    INF = Viewport.OrientInferiorSuperior
    LL = Viewport.OrientLeftLateral
    RL = Viewport.OrientRightLateral

    def __init__(self, parent=None):
        super().__init__(parent=parent)

    def setLook(self, look):
        self.lookUpdated.emit(look)


lookModel = LookModel()


class MirrorerModel(QObject):
    meshLoaded = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._mesh = None

    @property
    def mesh(self):
        return self._mesh

    @mesh.setter
    def mesh(self, value):
        self._mesh = value
        self.meshLoaded.emit()


mirrorerModel = MirrorerModel()



class MounterModel(QObject):
    loaded = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._mesh = None
        self._implant = None
        self._full_mesh = None

    @property
    def mesh(self):
        return self._mesh

    @mesh.setter
    def mesh(self, value):
        self._mesh = value
        self.loaded.emit()

    @property
    def implant(self):
        return self._implant

    @implant.setter
    def implant(self, value):
        self._implant = value
        self.loaded.emit()

    @property
    def full_mesh(self):
        if self.mesh and self.implant:
            if self._full_mesh is None:
                self._full_mesh = Mesh.from_meshes([self.mesh,
                                                    self.implant])
                self._full_mesh.compute_normals()
        else:
            self._full_mesh = Mesh()

        return self._full_mesh


mounterModel = MounterModel()



class PlaneModel(QObject):
    AXIAL = 2
    CORONAL = 1
    SAGITTAL = 0

    cmapUpdated = pyqtSignal()
    levelUpdated = pyqtSignal()
    windowUpdated = pyqtSignal()

    def __init__(self, parent=None, orientation=None):
        super().__init__(parent=parent)

        self._cmap = 'grayscale'
        self._level = 50
        self._window = 400

    @property
    def cmap(self):
        return self._cmap

    @cmap.setter
    def cmap(self, value):
        if self._cmap != value:
            self._cmap = value
            self.cmapUpdated.emit()

    @property
    def level(self):
        return self._level

    @level.setter
    def level(self, value):
        if self._level != value:
            self._level = value
            self.cmapUpdated.emit()

    @property
    def window(self):
        return self._window

    @window.setter
    def window(self, value):
        if self._window != value:
            self._window = value
            self.cmapUpdated.emit()


class PlaneModelOrientation(QObject):
    sliceUpdated = pyqtSignal()

    def __init__(self, parent, orientation):
        super().__init__(parent=parent)

        self.parent = parent
        self.cmapUpdated = self.parent.cmapUpdated

        self.orientation = orientation
        self.slice = 0

        self.imageModel = imageModel
        self.imageModel.imageLoaded.connect(self.loadImage)

    def loadImage(self):
        self.slice = int(self.slice_max / 2)

    @property
    def slice(self):
        return self._slice

    @slice.setter
    def slice(self, value):
        self._slice = value
        self.sliceUpdated.emit()

    @property
    def slice_max(self):
        slice_max = 0
        if self.orientation == PlaneModel.SAGITTAL:
            slice_max = self.imageModel.image.width
        elif self.orientation == PlaneModel.CORONAL:
            slice_max = self.imageModel.image.height
        elif self.orientation == PlaneModel.AXIAL:
            slice_max = self.imageModel.image.depth
        slice_max -= 1
        return slice_max

    @property
    def cmap(self):
        return self.parent.cmap

    @cmap.setter
    def cmap(self, value):
        self.parent.cmap = value

    @property
    def level(self):
        return self.parent.level

    @level.setter
    def level(self, value):
        self.parent.level = value

    @property
    def window(self):
        return self.parent.window

    @window.setter
    def window(self, value):
        self.parent.window = value


planeModel = PlaneModel()

axialModel = PlaneModelOrientation(parent=planeModel,
                                   orientation=PlaneModel.AXIAL)
coronalModel = PlaneModelOrientation(parent=planeModel,
                                     orientation=PlaneModel.CORONAL)
sagittalModel = PlaneModelOrientation(parent=planeModel,
                                      orientation=PlaneModel.SAGITTAL)


class PrinterModel(QObject):
    loaded = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._implant = None

    @property
    def implant(self):
        return self._implant

    @implant.setter
    def implant(self, value):
        self._implant = value
        self.loaded.emit()


printerModel = PrinterModel()


class ProjectModel(QObject):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._path = None

    @property
    def path(self):
        return self._path

    @path.setter
    def path(self, value):
        self._path = value

    def load(self, path):
        self.path = path

    def save(self, path):
        pass


projectModel = ProjectModel()


class StageModel(QObject):
    stageUpdated = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)

    @property
    def stage(self):
        return self._stage

    @stage.setter
    def stage(self, value):
        self._stage = value
        self.stageUpdated.emit()


stageModel = StageModel()


class View3DModel(QObject):
    lookUpdated = pyqtSignal(int)
    modeUpdated = pyqtSignal()
    tissueUpdated = pyqtSignal()

    LOOK_AP = 0
    LOOK_PA = 1
    LOOK_LAO = 2
    LOOK_RAO = 3
    LOOK_SUP = 4
    LOOK_INF = 5
    LOOK_LL = 6
    LOOK_RL = 7

    MODE_VOLUME = 0
    MODE_MESH = 1
    MODE_CROSSHAIR = 2

    TISSUE_SKIN = 0
    TISSUE_BONE = 1
    TISSUE_MUSCLE = 2

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.mode = View3DModel.MODE_VOLUME
        self.tissue = View3DModel.TISSUE_BONE

    def setLook(self, look):
        self.lookUpdated.emit(look)

    @property
    def mode(self):
        return self._mode

    @mode.setter
    def mode(self, value):
        self._mode = value
        self.modeUpdated.emit()

    @property
    def tissue(self):
        return self._tissue

    @tissue.setter
    def tissue(self, value):
        self._tissue = value
        self.tissueUpdated.emit()


view3dModel = View3DModel()



class Ui_Colormap(object):
    def setupUi(self, Colormap):
        Colormap.setObjectName("Colormap")
        Colormap.resize(136, 581)
        self.verticalLayout = QtWidgets.QVBoxLayout(Colormap)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(Colormap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.comboBoxCmap = QtWidgets.QComboBox(self.widget)
        self.comboBoxCmap.setObjectName("comboBoxCmap")
        self.gridLayout.addWidget(self.comboBoxCmap, 1, 0, 1, 2)
        self.spinBoxLevel = QtWidgets.QSpinBox(self.widget)
        self.spinBoxLevel.setObjectName("spinBoxLevel")
        self.gridLayout.addWidget(self.spinBoxLevel, 2, 0, 1, 1)
        self.spinBoxWindow = QtWidgets.QSpinBox(self.widget)
        self.spinBoxWindow.setMaximum(4000)
        self.spinBoxWindow.setObjectName("spinBoxWindow")
        self.gridLayout.addWidget(self.spinBoxWindow, 2, 1, 1, 1)
        self.verticalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(Colormap)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.bar = ScalarBarWidget(self.widget_2)
        self.bar.setObjectName("bar")
        self.horizontalLayout.addWidget(self.bar)
        self.slider = DensityWindowSlider(self.widget_2)
        self.slider.setObjectName("slider")
        self.horizontalLayout.addWidget(self.slider)
        self.verticalLayout.addWidget(self.widget_2)

        self.retranslateUi(Colormap)
        self.comboBoxCmap.currentIndexChanged['QString'].connect(Colormap.setCmap)
        self.spinBoxLevel.valueChanged['int'].connect(Colormap.setLevel)
        self.spinBoxWindow.valueChanged['int'].connect(Colormap.setWindow)
        self.slider.levelChanged['int'].connect(Colormap.setLevel)
        self.slider.windowChanged['int'].connect(Colormap.setWindow)
        QtCore.QMetaObject.connectSlotsByName(Colormap)

    def retranslateUi(self, Colormap):
        _translate = QtCore.QCoreApplication.translate
        Colormap.setWindowTitle(_translate("Colormap", "Form"))




class Ui_Colormap(object):
    def setupUi(self, Colormap):
        Colormap.setObjectName("Colormap")
        Colormap.resize(136, 581)
        self.verticalLayout = QtWidgets.QVBoxLayout(Colormap)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(Colormap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.comboBoxCmap = QtWidgets.QComboBox(self.widget)
        self.comboBoxCmap.setObjectName("comboBoxCmap")
        self.gridLayout.addWidget(self.comboBoxCmap, 1, 0, 1, 2)
        self.spinBoxLevel = QtWidgets.QSpinBox(self.widget)
        self.spinBoxLevel.setObjectName("spinBoxLevel")
        self.gridLayout.addWidget(self.spinBoxLevel, 2, 0, 1, 1)
        self.spinBoxWindow = QtWidgets.QSpinBox(self.widget)
        self.spinBoxWindow.setMaximum(4000)
        self.spinBoxWindow.setObjectName("spinBoxWindow")
        self.gridLayout.addWidget(self.spinBoxWindow, 2, 1, 1, 1)
        self.verticalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(Colormap)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.bar = ScalarBarWidget(self.widget_2)
        self.bar.setObjectName("bar")
        self.horizontalLayout.addWidget(self.bar)
        self.slider = DensityWindowSlider(self.widget_2)
        self.slider.setObjectName("slider")
        self.horizontalLayout.addWidget(self.slider)
        self.verticalLayout.addWidget(self.widget_2)

        self.retranslateUi(Colormap)
        self.comboBoxCmap.currentIndexChanged['QString'].connect(Colormap.setCmap)
        self.spinBoxLevel.valueChanged['int'].connect(Colormap.setLevel)
        self.spinBoxWindow.valueChanged['int'].connect(Colormap.setWindow)
        self.slider.levelChanged['int'].connect(Colormap.setLevel)
        self.slider.windowChanged['int'].connect(Colormap.setWindow)
        QtCore.QMetaObject.connectSlotsByName(Colormap)

    def retranslateUi(self, Colormap):
        _translate = QtCore.QCoreApplication.translate
        Colormap.setWindowTitle(_translate("Colormap", "Form"))




class Ui_CutTools(object):
    def setupUi(self, CutTools):
        CutTools.setObjectName("CutTools")
        CutTools.resize(324, 746)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(CutTools.sizePolicy().hasHeightForWidth())
        CutTools.setSizePolicy(sizePolicy)
        self.verticalLayout = QtWidgets.QVBoxLayout(CutTools)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBoxCut = QtWidgets.QGroupBox(CutTools)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBoxCut.sizePolicy().hasHeightForWidth())
        self.groupBoxCut.setSizePolicy(sizePolicy)
        self.groupBoxCut.setObjectName("groupBoxCut")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBoxCut)
        self.verticalLayout_4.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_4.setSpacing(3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.checkBoxClose = QtWidgets.QCheckBox(self.groupBoxCut)
        self.checkBoxClose.setChecked(True)
        self.checkBoxClose.setObjectName("checkBoxClose")
        self.verticalLayout_4.addWidget(self.checkBoxClose)
        self.pbPolyline = CustomPushButton(self.groupBoxCut)
        self.pbPolyline.setEnabled(False)
        self.pbPolyline.setCheckable(True)
        self.pbPolyline.setObjectName("pbPolyline")
        self.buttonGroup = QtWidgets.QButtonGroup(CutTools)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.pbPolyline)
        self.verticalLayout_4.addWidget(self.pbPolyline)
        self.wPolyline = QtWidgets.QWidget(self.groupBoxCut)
        self.wPolyline.setObjectName("wPolyline")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.wPolyline)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 9)
        self.verticalLayout_5.setSpacing(3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label = QtWidgets.QLabel(self.wPolyline)
        self.label.setObjectName("label")
        self.verticalLayout_5.addWidget(self.label)
        self.widget_4 = QtWidgets.QWidget(self.wPolyline)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_4)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.rbPolylineInverseNo = QtWidgets.QRadioButton(self.widget_4)
        self.rbPolylineInverseNo.setChecked(True)
        self.rbPolylineInverseNo.setObjectName("rbPolylineInverseNo")
        self.bgPolylineInverse = QtWidgets.QButtonGroup(CutTools)
        self.bgPolylineInverse.setObjectName("bgPolylineInverse")
        self.bgPolylineInverse.addButton(self.rbPolylineInverseNo)
        self.horizontalLayout_2.addWidget(self.rbPolylineInverseNo)
        self.rbPolylineInverseYes = QtWidgets.QRadioButton(self.widget_4)
        self.rbPolylineInverseYes.setObjectName("rbPolylineInverseYes")
        self.bgPolylineInverse.addButton(self.rbPolylineInverseYes)
        self.horizontalLayout_2.addWidget(self.rbPolylineInverseYes)
        self.verticalLayout_5.addWidget(self.widget_4)
        self.pbPolylineCut = QtWidgets.QPushButton(self.wPolyline)
        self.pbPolylineCut.setObjectName("pbPolylineCut")
        self.verticalLayout_5.addWidget(self.pbPolylineCut)
        self.verticalLayout_4.addWidget(self.wPolyline)
        self.line_1 = QtWidgets.QFrame(self.groupBoxCut)
        self.line_1.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_1.setObjectName("line_1")
        self.verticalLayout_4.addWidget(self.line_1)
        self.pbRect = CustomPushButton(self.groupBoxCut)
        self.pbRect.setEnabled(False)
        self.pbRect.setCheckable(True)
        self.pbRect.setObjectName("pbRect")
        self.buttonGroup.addButton(self.pbRect)
        self.verticalLayout_4.addWidget(self.pbRect)
        self.wRect = QtWidgets.QWidget(self.groupBoxCut)
        self.wRect.setObjectName("wRect")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.wRect)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 9)
        self.verticalLayout_6.setSpacing(3)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_2 = QtWidgets.QLabel(self.wRect)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_6.addWidget(self.label_2)
        self.widget_6 = QtWidgets.QWidget(self.wRect)
        self.widget_6.setObjectName("widget_6")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_6)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.rbRectInverseNo = QtWidgets.QRadioButton(self.widget_6)
        self.rbRectInverseNo.setChecked(True)
        self.rbRectInverseNo.setObjectName("rbRectInverseNo")
        self.bgRectInverse = QtWidgets.QButtonGroup(CutTools)
        self.bgRectInverse.setObjectName("bgRectInverse")
        self.bgRectInverse.addButton(self.rbRectInverseNo)
        self.horizontalLayout_3.addWidget(self.rbRectInverseNo)
        self.rbRectInverseYes = QtWidgets.QRadioButton(self.widget_6)
        self.rbRectInverseYes.setObjectName("rbRectInverseYes")
        self.bgRectInverse.addButton(self.rbRectInverseYes)
        self.horizontalLayout_3.addWidget(self.rbRectInverseYes)
        self.verticalLayout_6.addWidget(self.widget_6)
        self.pbRectCut = QtWidgets.QPushButton(self.wRect)
        self.pbRectCut.setObjectName("pbRectCut")
        self.verticalLayout_6.addWidget(self.pbRectCut)
        self.verticalLayout_4.addWidget(self.wRect)
        self.line_2 = QtWidgets.QFrame(self.groupBoxCut)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout_4.addWidget(self.line_2)
        self.pbCircle = CustomPushButton(self.groupBoxCut)
        self.pbCircle.setEnabled(False)
        self.pbCircle.setCheckable(True)
        self.pbCircle.setObjectName("pbCircle")
        self.buttonGroup.addButton(self.pbCircle)
        self.verticalLayout_4.addWidget(self.pbCircle)
        self.wCircle = QtWidgets.QWidget(self.groupBoxCut)
        self.wCircle.setObjectName("wCircle")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.wCircle)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, -1)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pbCircleCut = QtWidgets.QPushButton(self.wCircle)
        self.pbCircleCut.setObjectName("pbCircleCut")
        self.verticalLayout_2.addWidget(self.pbCircleCut)
        self.verticalLayout_4.addWidget(self.wCircle)
        self.line_3 = QtWidgets.QFrame(self.groupBoxCut)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout_4.addWidget(self.line_3)
        self.pbCube = CustomPushButton(self.groupBoxCut)
        self.pbCube.setEnabled(False)
        self.pbCube.setCheckable(True)
        self.pbCube.setObjectName("pbCube")
        self.buttonGroup.addButton(self.pbCube)
        self.verticalLayout_4.addWidget(self.pbCube)
        self.wCube = QtWidgets.QWidget(self.groupBoxCut)
        self.wCube.setObjectName("wCube")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.wCube)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 9)
        self.verticalLayout_7.setSpacing(3)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_3 = QtWidgets.QLabel(self.wCube)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_7.addWidget(self.label_3)
        self.widget_8 = QtWidgets.QWidget(self.wCube)
        self.widget_8.setObjectName("widget_8")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.widget_8)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(3)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.rbCubeInverseNo = QtWidgets.QRadioButton(self.widget_8)
        self.rbCubeInverseNo.setChecked(True)
        self.rbCubeInverseNo.setObjectName("rbCubeInverseNo")
        self.bgCubeInverse = QtWidgets.QButtonGroup(CutTools)
        self.bgCubeInverse.setObjectName("bgCubeInverse")
        self.bgCubeInverse.addButton(self.rbCubeInverseNo)
        self.horizontalLayout_4.addWidget(self.rbCubeInverseNo)
        self.rbCubeInverseYes = QtWidgets.QRadioButton(self.widget_8)
        self.rbCubeInverseYes.setObjectName("rbCubeInverseYes")
        self.bgCubeInverse.addButton(self.rbCubeInverseYes)
        self.horizontalLayout_4.addWidget(self.rbCubeInverseYes)
        self.verticalLayout_7.addWidget(self.widget_8)
        self.widget = QtWidgets.QWidget(self.wCube)
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setObjectName("gridLayout")
        self.lOrientation_2 = QtWidgets.QLabel(self.widget)
        self.lOrientation_2.setObjectName("lOrientation_2")
        self.gridLayout.addWidget(self.lOrientation_2, 4, 1, 1, 1)
        self.lOrientation_3 = QtWidgets.QLabel(self.widget)
        self.lOrientation_3.setObjectName("lOrientation_3")
        self.gridLayout.addWidget(self.lOrientation_3, 5, 1, 1, 1)
        self.lScale_1 = QtWidgets.QLabel(self.widget)
        self.lScale_1.setObjectName("lScale_1")
        self.gridLayout.addWidget(self.lScale_1, 6, 1, 1, 1)
        self.lOrientation_1 = QtWidgets.QLabel(self.widget)
        self.lOrientation_1.setObjectName("lOrientation_1")
        self.gridLayout.addWidget(self.lOrientation_1, 3, 1, 1, 1)
        self.lPosition_1 = QtWidgets.QLabel(self.widget)
        self.lPosition_1.setObjectName("lPosition_1")
        self.gridLayout.addWidget(self.lPosition_1, 0, 1, 1, 1)
        self.lPosition = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lPosition.sizePolicy().hasHeightForWidth())
        self.lPosition.setSizePolicy(sizePolicy)
        self.lPosition.setObjectName("lPosition")
        self.gridLayout.addWidget(self.lPosition, 0, 0, 1, 1)
        self.lScale = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lScale.sizePolicy().hasHeightForWidth())
        self.lScale.setSizePolicy(sizePolicy)
        self.lScale.setObjectName("lScale")
        self.gridLayout.addWidget(self.lScale, 6, 0, 1, 1)
        self.lOrientation = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lOrientation.sizePolicy().hasHeightForWidth())
        self.lOrientation.setSizePolicy(sizePolicy)
        self.lOrientation.setObjectName("lOrientation")
        self.gridLayout.addWidget(self.lOrientation, 3, 0, 1, 1)
        self.lScale_2 = QtWidgets.QLabel(self.widget)
        self.lScale_2.setObjectName("lScale_2")
        self.gridLayout.addWidget(self.lScale_2, 7, 1, 1, 1)
        self.lPosition_3 = QtWidgets.QLabel(self.widget)
        self.lPosition_3.setObjectName("lPosition_3")
        self.gridLayout.addWidget(self.lPosition_3, 2, 1, 1, 1)
        self.lPosition_2 = QtWidgets.QLabel(self.widget)
        self.lPosition_2.setObjectName("lPosition_2")
        self.gridLayout.addWidget(self.lPosition_2, 1, 1, 1, 1)
        self.lScale_3 = QtWidgets.QLabel(self.widget)
        self.lScale_3.setObjectName("lScale_3")
        self.gridLayout.addWidget(self.lScale_3, 8, 1, 1, 1)
        self.verticalLayout_7.addWidget(self.widget)
        self.pbCubeCut = QtWidgets.QPushButton(self.wCube)
        self.pbCubeCut.setObjectName("pbCubeCut")
        self.verticalLayout_7.addWidget(self.pbCubeCut)
        self.verticalLayout_4.addWidget(self.wCube)
        self.line = QtWidgets.QFrame(self.groupBoxCut)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_4.addWidget(self.line)
        self.pbSphere = CustomPushButton(self.groupBoxCut)
        self.pbSphere.setEnabled(False)
        self.pbSphere.setCheckable(True)
        self.pbSphere.setObjectName("pbSphere")
        self.buttonGroup.addButton(self.pbSphere)
        self.verticalLayout_4.addWidget(self.pbSphere)
        self.wSphere = QtWidgets.QWidget(self.groupBoxCut)
        self.wSphere.setObjectName("wSphere")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.wSphere)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, -1)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_4 = QtWidgets.QLabel(self.wSphere)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_3.addWidget(self.label_4)
        self.widget_9 = QtWidgets.QWidget(self.wSphere)
        self.widget_9.setObjectName("widget_9")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.widget_9)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(3)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.rbSphereInverseNo = QtWidgets.QRadioButton(self.widget_9)
        self.rbSphereInverseNo.setChecked(True)
        self.rbSphereInverseNo.setObjectName("rbSphereInverseNo")
        self.bgSphereInverse = QtWidgets.QButtonGroup(CutTools)
        self.bgSphereInverse.setObjectName("bgSphereInverse")
        self.bgSphereInverse.addButton(self.rbSphereInverseNo)
        self.horizontalLayout_5.addWidget(self.rbSphereInverseNo)
        self.rbSphereInverseYes = QtWidgets.QRadioButton(self.widget_9)
        self.rbSphereInverseYes.setObjectName("rbSphereInverseYes")
        self.bgSphereInverse.addButton(self.rbSphereInverseYes)
        self.horizontalLayout_5.addWidget(self.rbSphereInverseYes)
        self.verticalLayout_3.addWidget(self.widget_9)
        self.pbSphereCut = QtWidgets.QPushButton(self.wSphere)
        self.pbSphereCut.setObjectName("pbSphereCut")
        self.verticalLayout_3.addWidget(self.pbSphereCut)
        self.verticalLayout_4.addWidget(self.wSphere)
        self.line_4 = QtWidgets.QFrame(self.groupBoxCut)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.verticalLayout_4.addWidget(self.line_4)
        self.pbPlane = CustomPushButton(self.groupBoxCut)
        self.pbPlane.setEnabled(False)
        self.pbPlane.setCheckable(True)
        self.pbPlane.setObjectName("pbPlane")
        self.buttonGroup.addButton(self.pbPlane)
        self.verticalLayout_4.addWidget(self.pbPlane)
        self.wPlane = QtWidgets.QWidget(self.groupBoxCut)
        self.wPlane.setObjectName("wPlane")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.wPlane)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setSpacing(3)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.pbPlaneCut = QtWidgets.QPushButton(self.wPlane)
        self.pbPlaneCut.setObjectName("pbPlaneCut")
        self.verticalLayout_8.addWidget(self.pbPlaneCut)
        self.verticalLayout_4.addWidget(self.wPlane)
        self.verticalLayout.addWidget(self.groupBoxCut)

        self.retranslateUi(CutTools)
        QtCore.QMetaObject.connectSlotsByName(CutTools)

    def retranslateUi(self, CutTools):
        _translate = QtCore.QCoreApplication.translate
        CutTools.setWindowTitle(_translate("CutTools", "Form"))
        self.groupBoxCut.setTitle(_translate("CutTools", "Вырезать:"))
        self.checkBoxClose.setText(_translate("CutTools", "Закрывать контура после обрезки"))
        self.pbPolyline.setText(_translate("CutTools", "Контур"))
        self.label.setText(_translate("CutTools", "Инверсия:"))
        self.rbPolylineInverseNo.setText(_translate("CutTools", "Нет"))
        self.rbPolylineInverseYes.setText(_translate("CutTools", "Да"))
        self.pbPolylineCut.setText(_translate("CutTools", "Обрезать"))
        self.pbPolylineCut.setShortcut(_translate("CutTools", "Space"))
        self.pbRect.setText(_translate("CutTools", "Прямоугольник"))
        self.label_2.setText(_translate("CutTools", "Инверсия:"))
        self.rbRectInverseNo.setText(_translate("CutTools", "Нет"))
        self.rbRectInverseYes.setText(_translate("CutTools", "Да"))
        self.pbRectCut.setText(_translate("CutTools", "Обрезать"))
        self.pbRectCut.setShortcut(_translate("CutTools", "Space"))
        self.pbCircle.setText(_translate("CutTools", "Круг"))
        self.pbCircleCut.setText(_translate("CutTools", "Обрезать"))
        self.pbCircleCut.setShortcut(_translate("CutTools", "Space"))
        self.pbCube.setText(_translate("CutTools", "Куб"))
        self.label_3.setText(_translate("CutTools", "Инверсия:"))
        self.rbCubeInverseNo.setText(_translate("CutTools", "Нет"))
        self.rbCubeInverseYes.setText(_translate("CutTools", "Да"))
        self.lOrientation_2.setText(_translate("CutTools", "0.0"))
        self.lOrientation_3.setText(_translate("CutTools", "0.0"))
        self.lScale_1.setText(_translate("CutTools", "0.0"))
        self.lOrientation_1.setText(_translate("CutTools", "0.0"))
        self.lPosition_1.setText(_translate("CutTools", "0.0"))
        self.lPosition.setText(_translate("CutTools", "Позиция:"))
        self.lScale.setText(_translate("CutTools", "Масштаб:"))
        self.lOrientation.setText(_translate("CutTools", "Ориентация:"))
        self.lScale_2.setText(_translate("CutTools", "0.0"))
        self.lPosition_3.setText(_translate("CutTools", "0.0"))
        self.lPosition_2.setText(_translate("CutTools", "0.0"))
        self.lScale_3.setText(_translate("CutTools", "0.0"))
        self.pbCubeCut.setText(_translate("CutTools", "Обрезать"))
        self.pbCubeCut.setShortcut(_translate("CutTools", "Space"))
        self.pbSphere.setText(_translate("CutTools", "Сфера"))
        self.label_4.setText(_translate("CutTools", "Инверсия:"))
        self.rbSphereInverseNo.setText(_translate("CutTools", "Нет"))
        self.rbSphereInverseYes.setText(_translate("CutTools", "Да"))
        self.pbSphereCut.setText(_translate("CutTools", "Обрезать"))
        self.pbSphereCut.setShortcut(_translate("CutTools", "Space"))
        self.pbPlane.setText(_translate("CutTools", "Плоскость"))
        self.pbPlaneCut.setText(_translate("CutTools", "Обрезать"))
        self.pbPlaneCut.setShortcut(_translate("CutTools", "Space"))




class Ui_DICOMDatabaseDialog(object):
    def setupUi(self, DICOMDatabaseDialog):
        DICOMDatabaseDialog.setObjectName("DICOMDatabaseDialog")
        DICOMDatabaseDialog.resize(800, 600)
        DICOMDatabaseDialog.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.horizontalLayout = QtWidgets.QHBoxLayout(DICOMDatabaseDialog)
        self.horizontalLayout.setContentsMargins(3, 3, 3, 3)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(DICOMDatabaseDialog)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tableWidgetPatients = QtWidgets.QTableWidget(self.widget)
        self.tableWidgetPatients.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidgetPatients.setTabKeyNavigation(False)
        self.tableWidgetPatients.setDragDropOverwriteMode(False)
        self.tableWidgetPatients.setDefaultDropAction(QtCore.Qt.CopyAction)
        self.tableWidgetPatients.setAlternatingRowColors(True)
        self.tableWidgetPatients.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tableWidgetPatients.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidgetPatients.setObjectName("tableWidgetPatients")
        self.tableWidgetPatients.setColumnCount(8)
        self.tableWidgetPatients.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPatients.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPatients.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPatients.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPatients.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPatients.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPatients.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPatients.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidgetPatients.setHorizontalHeaderItem(7, item)
        self.tableWidgetPatients.verticalHeader().setVisible(False)
        self.verticalLayout_2.addWidget(self.tableWidgetPatients)
        self.listWidgetSeries = QtWidgets.QListWidget(self.widget)
        self.listWidgetSeries.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.listWidgetSeries.setIconSize(QtCore.QSize(120, 120))
        self.listWidgetSeries.setMovement(QtWidgets.QListView.Static)
        self.listWidgetSeries.setProperty("isWrapping", False)
        self.listWidgetSeries.setViewMode(QtWidgets.QListView.IconMode)
        self.listWidgetSeries.setObjectName("listWidgetSeries")
        item = QtWidgets.QListWidgetItem()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/photo.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        item.setIcon(icon)
        self.listWidgetSeries.addItem(item)
        item = QtWidgets.QListWidgetItem()
        item.setIcon(icon)
        self.listWidgetSeries.addItem(item)
        self.verticalLayout_2.addWidget(self.listWidgetSeries)
        self.widgetSlices = SliceMetadata(self.widget)
        self.widgetSlices.setMinimumSize(QtCore.QSize(0, 0))
        self.widgetSlices.setObjectName("widgetSlices")
        self.verticalLayout_2.addWidget(self.widgetSlices)
        self.horizontalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(DICOMDatabaseDialog)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButtonScan = QtWidgets.QPushButton(self.widget_2)
        self.pushButtonScan.setObjectName("pushButtonScan")
        self.verticalLayout.addWidget(self.pushButtonScan)
        self.pushButtonImport = QtWidgets.QPushButton(self.widget_2)
        self.pushButtonImport.setEnabled(False)
        self.pushButtonImport.setObjectName("pushButtonImport")
        self.verticalLayout.addWidget(self.pushButtonImport)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout.addWidget(self.widget_2)

        self.retranslateUi(DICOMDatabaseDialog)
        QtCore.QMetaObject.connectSlotsByName(DICOMDatabaseDialog)

    def retranslateUi(self, DICOMDatabaseDialog):
        _translate = QtCore.QCoreApplication.translate
        DICOMDatabaseDialog.setWindowTitle(_translate("DICOMDatabaseDialog", "Импорт DICOM серии пациента"))
        self.tableWidgetPatients.setSortingEnabled(True)
        item = self.tableWidgetPatients.horizontalHeaderItem(0)
        item.setText(_translate("DICOMDatabaseDialog", "Имя"))
        item = self.tableWidgetPatients.horizontalHeaderItem(1)
        item.setText(_translate("DICOMDatabaseDialog", "Возраст"))
        item = self.tableWidgetPatients.horizontalHeaderItem(2)
        item.setText(_translate("DICOMDatabaseDialog", "ID"))
        item = self.tableWidgetPatients.horizontalHeaderItem(3)
        item.setText(_translate("DICOMDatabaseDialog", "Пол"))
        item = self.tableWidgetPatients.horizontalHeaderItem(4)
        item.setText(_translate("DICOMDatabaseDialog", "ДР"))
        item = self.tableWidgetPatients.horizontalHeaderItem(5)
        item.setText(_translate("DICOMDatabaseDialog", "Комментарии"))
        item = self.tableWidgetPatients.horizontalHeaderItem(6)
        item.setText(_translate("DICOMDatabaseDialog", "#Кол"))
        __sortingEnabled = self.listWidgetSeries.isSortingEnabled()
        self.listWidgetSeries.setSortingEnabled(False)
        item = self.listWidgetSeries.item(0)
        item.setText(_translate("DICOMDatabaseDialog", "1"))
        item.setToolTip(_translate("DICOMDatabaseDialog", "1"))
        item = self.listWidgetSeries.item(1)
        item.setText(_translate("DICOMDatabaseDialog", "23"))
        item.setToolTip(_translate("DICOMDatabaseDialog", "2"))
        self.listWidgetSeries.setSortingEnabled(__sortingEnabled)
        self.pushButtonScan.setText(_translate("DICOMDatabaseDialog", "Сканировать DICOM"))
        self.pushButtonImport.setText(_translate("DICOMDatabaseDialog", "Загрузить"))




class Ui_DICOMDatabaseWidget(object):
    def setupUi(self, DICOMDatabaseWidget):
        DICOMDatabaseWidget.setObjectName("DICOMDatabaseWidget")
        DICOMDatabaseWidget.resize(980, 795)
        self.horizontalLayout = QtWidgets.QHBoxLayout(DICOMDatabaseWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(DICOMDatabaseWidget)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.twPatients = QtWidgets.QTableWidget(self.widget)
        self.twPatients.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.twPatients.setTabKeyNavigation(False)
        self.twPatients.setDragDropOverwriteMode(False)
        self.twPatients.setDefaultDropAction(QtCore.Qt.CopyAction)
        self.twPatients.setAlternatingRowColors(True)
        self.twPatients.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.twPatients.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.twPatients.setObjectName("twPatients")
        self.twPatients.setColumnCount(8)
        self.twPatients.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.twPatients.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.twPatients.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.twPatients.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.twPatients.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.twPatients.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.twPatients.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.twPatients.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.twPatients.setHorizontalHeaderItem(7, item)
        self.twPatients.verticalHeader().setVisible(False)
        self.verticalLayout_2.addWidget(self.twPatients)
        self.lwSeries = QtWidgets.QListWidget(self.widget)
        self.lwSeries.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.lwSeries.setIconSize(QtCore.QSize(120, 120))
        self.lwSeries.setMovement(QtWidgets.QListView.Static)
        self.lwSeries.setProperty("isWrapping", False)
        self.lwSeries.setViewMode(QtWidgets.QListView.IconMode)
        self.lwSeries.setObjectName("lwSeries")
        item = QtWidgets.QListWidgetItem()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/photo.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        item.setIcon(icon)
        self.lwSeries.addItem(item)
        item = QtWidgets.QListWidgetItem()
        item.setIcon(icon)
        self.lwSeries.addItem(item)
        self.verticalLayout_2.addWidget(self.lwSeries)
        self.wSlices = SliceMetadata(self.widget)
        self.wSlices.setMinimumSize(QtCore.QSize(0, 0))
        self.wSlices.setObjectName("wSlices")
        self.verticalLayout_2.addWidget(self.wSlices)
        self.horizontalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(DICOMDatabaseWidget)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButtonScan = QtWidgets.QPushButton(self.widget_2)
        self.pushButtonScan.setObjectName("pushButtonScan")
        self.verticalLayout.addWidget(self.pushButtonScan)
        self.pushButtonImport = QtWidgets.QPushButton(self.widget_2)
        self.pushButtonImport.setEnabled(False)
        self.pushButtonImport.setObjectName("pushButtonImport")
        self.verticalLayout.addWidget(self.pushButtonImport)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout.addWidget(self.widget_2)

        self.retranslateUi(DICOMDatabaseWidget)
        QtCore.QMetaObject.connectSlotsByName(DICOMDatabaseWidget)

    def retranslateUi(self, DICOMDatabaseWidget):
        _translate = QtCore.QCoreApplication.translate
        DICOMDatabaseWidget.setWindowTitle(_translate("DICOMDatabaseWidget", "Form"))
        self.twPatients.setSortingEnabled(True)
        item = self.twPatients.horizontalHeaderItem(0)
        item.setText(_translate("DICOMDatabaseWidget", "Имя"))
        item = self.twPatients.horizontalHeaderItem(1)
        item.setText(_translate("DICOMDatabaseWidget", "Возраст"))
        item = self.twPatients.horizontalHeaderItem(2)
        item.setText(_translate("DICOMDatabaseWidget", "ID"))
        item = self.twPatients.horizontalHeaderItem(3)
        item.setText(_translate("DICOMDatabaseWidget", "Пол"))
        item = self.twPatients.horizontalHeaderItem(4)
        item.setText(_translate("DICOMDatabaseWidget", "ДР"))
        item = self.twPatients.horizontalHeaderItem(5)
        item.setText(_translate("DICOMDatabaseWidget", "Комментарии"))
        item = self.twPatients.horizontalHeaderItem(6)
        item.setText(_translate("DICOMDatabaseWidget", "#Кол"))
        __sortingEnabled = self.lwSeries.isSortingEnabled()
        self.lwSeries.setSortingEnabled(False)
        item = self.lwSeries.item(0)
        item.setText(_translate("DICOMDatabaseWidget", "1"))
        item.setToolTip(_translate("DICOMDatabaseWidget", "1"))
        item = self.lwSeries.item(1)
        item.setText(_translate("DICOMDatabaseWidget", "23"))
        item.setToolTip(_translate("DICOMDatabaseWidget", "2"))
        self.lwSeries.setSortingEnabled(__sortingEnabled)
        self.pushButtonScan.setText(_translate("DICOMDatabaseWidget", "Сканировать DICOM"))
        self.pushButtonImport.setText(_translate("DICOMDatabaseWidget", "Импортировать"))




class Ui_Editor(object):
    def setupUi(self, Editor):
        Editor.setObjectName("Editor")
        Editor.resize(800, 600)
        self.horizontalLayout = QtWidgets.QHBoxLayout(Editor)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.look = Look(Editor)
        self.look.setObjectName("look")
        self.horizontalLayout.addWidget(self.look)
        self.widget = QtWidgets.QWidget(Editor)
        self.widget.setObjectName("widget")
        self.layout = QtWidgets.QHBoxLayout(self.widget)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(0)
        self.layout.setObjectName("layout")
        self.horizontalLayout.addWidget(self.widget)
        self.scrollArea = QtWidgets.QScrollArea(Editor)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 144, 598))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.groupBox = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.rbCamera = QtWidgets.QRadioButton(self.groupBox)
        self.rbCamera.setChecked(True)
        self.rbCamera.setObjectName("rbCamera")
        self.verticalLayout_2.addWidget(self.rbCamera)
        self.rbTool = QtWidgets.QRadioButton(self.groupBox)
        self.rbTool.setEnabled(False)
        self.rbTool.setObjectName("rbTool")
        self.verticalLayout_2.addWidget(self.rbTool)
        self.verticalLayout_3.addWidget(self.groupBox)
        self.cuttools = CutTools(self.scrollAreaWidgetContents)
        self.cuttools.setObjectName("cuttools")
        self.verticalLayout_3.addWidget(self.cuttools)
        self.widget_4 = MeshTools(self.scrollAreaWidgetContents)
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_3.addWidget(self.widget_4)
        self.props = PropsTree(self.scrollAreaWidgetContents)
        self.props.setObjectName("props")
        self.verticalLayout_3.addWidget(self.props)
        self.pbPreview = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.pbPreview.setObjectName("pbPreview")
        self.verticalLayout_3.addWidget(self.pbPreview)
        self.pbImplant = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.pbImplant.setObjectName("pbImplant")
        self.verticalLayout_3.addWidget(self.pbImplant)
        self.pbNext = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.pbNext.setObjectName("pbNext")
        self.verticalLayout_3.addWidget(self.pbNext)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.horizontalLayout.addWidget(self.scrollArea)

        self.retranslateUi(Editor)
        QtCore.QMetaObject.connectSlotsByName(Editor)

    def retranslateUi(self, Editor):
        _translate = QtCore.QCoreApplication.translate
        Editor.setWindowTitle(_translate("Editor", "Form"))
        self.groupBox.setTitle(_translate("Editor", "Режимы управления:"))
        self.rbCamera.setText(_translate("Editor", "камерой"))
        self.rbTool.setText(_translate("Editor", "инструмент"))
        self.pbPreview.setText(_translate("Editor", "Предпросмотр"))
        self.pbImplant.setText(_translate("Editor", "Имплант →"))
        self.pbNext.setText(_translate("Editor", "Далее →"))




class Ui_Extractor(object):
    def setupUi(self, Extractor):
        Extractor.setObjectName("Extractor")
        Extractor.resize(800, 600)
        self.horizontalLayout = QtWidgets.QHBoxLayout(Extractor)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.look = Look(Extractor)
        self.look.setObjectName("look")
        self.horizontalLayout.addWidget(self.look)
        self.widget_2 = QtWidgets.QWidget(Extractor)
        self.widget_2.setObjectName("widget_2")
        self.layout = QtWidgets.QVBoxLayout(self.widget_2)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(3)
        self.layout.setObjectName("layout")
        self.horizontalLayout.addWidget(self.widget_2)
        self.colormap = Colormap(Extractor)
        self.colormap.setObjectName("colormap")
        self.horizontalLayout.addWidget(self.colormap)
        self.threshold = Threshold(Extractor)
        self.threshold.setObjectName("threshold")
        self.horizontalLayout.addWidget(self.threshold)
        self.widget = QtWidgets.QWidget(Extractor)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.pbNext = QtWidgets.QPushButton(self.widget)
        self.pbNext.setObjectName("pbNext")
        self.verticalLayout.addWidget(self.pbNext)
        self.horizontalLayout.addWidget(self.widget)

        self.retranslateUi(Extractor)
        QtCore.QMetaObject.connectSlotsByName(Extractor)

    def retranslateUi(self, Extractor):
        _translate = QtCore.QCoreApplication.translate
        Extractor.setWindowTitle(_translate("Extractor", "Form"))
        self.pbNext.setText(_translate("Extractor", "Далее →"))




class Ui_Histogram(object):
    def setupUi(self, Histogram):
        Histogram.setObjectName("Histogram")
        Histogram.resize(400, 300)
        self.layout = QtWidgets.QHBoxLayout(Histogram)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(3)
        self.layout.setObjectName("layout")

        self.retranslateUi(Histogram)
        QtCore.QMetaObject.connectSlotsByName(Histogram)

    def retranslateUi(self, Histogram):
        _translate = QtCore.QCoreApplication.translate
        Histogram.setWindowTitle(_translate("Histogram", "Form"))




class Ui_ImplantDatabase(object):
    def setupUi(self, ImplantDatabase):
        ImplantDatabase.setObjectName("ImplantDatabase")
        ImplantDatabase.resize(400, 300)
        self.verticalLayout = QtWidgets.QVBoxLayout(ImplantDatabase)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(ImplantDatabase)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout.addWidget(self.widget)
        self.listWidget = QtWidgets.QListWidget(ImplantDatabase)
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout.addWidget(self.listWidget)

        self.retranslateUi(ImplantDatabase)
        QtCore.QMetaObject.connectSlotsByName(ImplantDatabase)

    def retranslateUi(self, ImplantDatabase):
        _translate = QtCore.QCoreApplication.translate
        ImplantDatabase.setWindowTitle(_translate("ImplantDatabase", "Form"))




class Ui_Implantor(object):
    def setupUi(self, Implantor):
        Implantor.setObjectName("Implantor")
        Implantor.resize(800, 600)
        self.horizontalLayout = QtWidgets.QHBoxLayout(Implantor)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.look = Look(Implantor)
        self.look.setObjectName("look")
        self.horizontalLayout.addWidget(self.look)
        self.widget = QtWidgets.QWidget(Implantor)
        self.widget.setObjectName("widget")
        self.layout = QtWidgets.QHBoxLayout(self.widget)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(0)
        self.layout.setObjectName("layout")
        self.horizontalLayout.addWidget(self.widget)
        self.scrollArea = QtWidgets.QScrollArea(Implantor)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 126, 598))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(3)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.groupBox = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.rbCamera = QtWidgets.QRadioButton(self.groupBox)
        self.rbCamera.setChecked(True)
        self.rbCamera.setObjectName("rbCamera")
        self.bgStyle = QtWidgets.QButtonGroup(Implantor)
        self.bgStyle.setObjectName("bgStyle")
        self.bgStyle.addButton(self.rbCamera)
        self.verticalLayout_2.addWidget(self.rbCamera)
        self.rbTool = QtWidgets.QRadioButton(self.groupBox)
        self.rbTool.setEnabled(False)
        self.rbTool.setObjectName("rbTool")
        self.bgStyle.addButton(self.rbTool)
        self.verticalLayout_2.addWidget(self.rbTool)
        self.verticalLayout_6.addWidget(self.groupBox)
        self.cuttools = CutTools(self.scrollAreaWidgetContents)
        self.cuttools.setObjectName("cuttools")
        self.verticalLayout_6.addWidget(self.cuttools)
        self.meshtools = MeshTools(self.scrollAreaWidgetContents)
        self.meshtools.setObjectName("meshtools")
        self.verticalLayout_6.addWidget(self.meshtools)
        self.pbManipulator = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.pbManipulator.setCheckable(True)
        self.pbManipulator.setObjectName("pbManipulator")
        self.verticalLayout_6.addWidget(self.pbManipulator)
        self.pbDeformation = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.pbDeformation.setCheckable(True)
        self.pbDeformation.setObjectName("pbDeformation")
        self.verticalLayout_6.addWidget(self.pbDeformation)
        self.wDeformation = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.wDeformation.setObjectName("wDeformation")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.wDeformation)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pbReverseSense = QtWidgets.QPushButton(self.wDeformation)
        self.pbReverseSense.setObjectName("pbReverseSense")
        self.verticalLayout.addWidget(self.pbReverseSense)
        self.pbDeformationApply = QtWidgets.QPushButton(self.wDeformation)
        self.pbDeformationApply.setObjectName("pbDeformationApply")
        self.verticalLayout.addWidget(self.pbDeformationApply)
        self.verticalLayout_6.addWidget(self.wDeformation)
        self.widget_3 = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.widget_3)
        self.verticalLayout_4.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_4.setSpacing(3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.pbFlate = QtWidgets.QPushButton(self.widget_3)
        self.pbFlate.setCheckable(True)
        self.pbFlate.setObjectName("pbFlate")
        self.verticalLayout_4.addWidget(self.pbFlate)
        self.wFlate = QtWidgets.QWidget(self.widget_3)
        self.wFlate.setObjectName("wFlate")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.wFlate)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.rbInflate = QtWidgets.QRadioButton(self.wFlate)
        self.rbInflate.setChecked(True)
        self.rbInflate.setObjectName("rbInflate")
        self.buttonGroup = QtWidgets.QButtonGroup(Implantor)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.rbInflate)
        self.verticalLayout_5.addWidget(self.rbInflate)
        self.rbDeflate = QtWidgets.QRadioButton(self.wFlate)
        self.rbDeflate.setObjectName("rbDeflate")
        self.buttonGroup.addButton(self.rbDeflate)
        self.verticalLayout_5.addWidget(self.rbDeflate)
        self.pbFlateApply = QtWidgets.QPushButton(self.wFlate)
        self.pbFlateApply.setObjectName("pbFlateApply")
        self.verticalLayout_5.addWidget(self.pbFlateApply)
        self.verticalLayout_4.addWidget(self.wFlate)
        self.verticalLayout_6.addWidget(self.widget_3)
        self.groupBox_2 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_3.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pbOpenSTL = QtWidgets.QPushButton(self.groupBox_2)
        self.pbOpenSTL.setObjectName("pbOpenSTL")
        self.verticalLayout_3.addWidget(self.pbOpenSTL)
        self.pbSphere = QtWidgets.QPushButton(self.groupBox_2)
        self.pbSphere.setObjectName("pbSphere")
        self.verticalLayout_3.addWidget(self.pbSphere)
        self.pbCube2 = QtWidgets.QPushButton(self.groupBox_2)
        self.pbCube2.setObjectName("pbCube2")
        self.verticalLayout_3.addWidget(self.pbCube2)
        self.pbTorus = QtWidgets.QPushButton(self.groupBox_2)
        self.pbTorus.setObjectName("pbTorus")
        self.verticalLayout_3.addWidget(self.pbTorus)
        self.pbCone = QtWidgets.QPushButton(self.groupBox_2)
        self.pbCone.setObjectName("pbCone")
        self.verticalLayout_3.addWidget(self.pbCone)
        self.pbCylinder = QtWidgets.QPushButton(self.groupBox_2)
        self.pbCylinder.setObjectName("pbCylinder")
        self.verticalLayout_3.addWidget(self.pbCylinder)
        self.verticalLayout_6.addWidget(self.groupBox_2)
        self.props = PropsTree(self.scrollAreaWidgetContents)
        self.props.setObjectName("props")
        self.verticalLayout_6.addWidget(self.props)
        self.pbPreview = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.pbPreview.setObjectName("pbPreview")
        self.verticalLayout_6.addWidget(self.pbPreview)
        self.pbNext = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.pbNext.setObjectName("pbNext")
        self.verticalLayout_6.addWidget(self.pbNext)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.horizontalLayout.addWidget(self.scrollArea)

        self.retranslateUi(Implantor)
        QtCore.QMetaObject.connectSlotsByName(Implantor)

    def retranslateUi(self, Implantor):
        _translate = QtCore.QCoreApplication.translate
        Implantor.setWindowTitle(_translate("Implantor", "Form"))
        self.groupBox.setTitle(_translate("Implantor", "Режимы управления:"))
        self.rbCamera.setText(_translate("Implantor", "камерой"))
        self.rbTool.setText(_translate("Implantor", "инструмент"))
        self.pbManipulator.setText(_translate("Implantor", "Манипуляции"))
        self.pbDeformation.setText(_translate("Implantor", "Вытягивание"))
        self.pbReverseSense.setText(_translate("Implantor", "Переворот нормалей"))
        self.pbDeformationApply.setText(_translate("Implantor", "Применить"))
        self.pbDeformationApply.setShortcut(_translate("Implantor", "Space"))
        self.pbFlate.setText(_translate("Implantor", "Вытягивание"))
        self.rbInflate.setText(_translate("Implantor", "Вытянуть"))
        self.rbDeflate.setText(_translate("Implantor", "Вогнуть"))
        self.pbFlateApply.setText(_translate("Implantor", "Применить"))
        self.pbFlateApply.setShortcut(_translate("Implantor", "Space"))
        self.groupBox_2.setTitle(_translate("Implantor", "Примитивы:"))
        self.pbOpenSTL.setText(_translate("Implantor", "Открыть STL"))
        self.pbSphere.setText(_translate("Implantor", "Сфера"))
        self.pbCube2.setText(_translate("Implantor", "Куб"))
        self.pbTorus.setText(_translate("Implantor", "Тор"))
        self.pbCone.setText(_translate("Implantor", "Конус"))
        self.pbCylinder.setText(_translate("Implantor", "Цилиндр"))
        self.pbPreview.setText(_translate("Implantor", "Предпросмотр"))
        self.pbNext.setText(_translate("Implantor", "Далее →"))




class Ui_LayoutsWidget(object):
    def setupUi(self, LayoutsWidget):
        LayoutsWidget.setObjectName("LayoutsWidget")
        LayoutsWidget.resize(200, 200)
        self.view3d = View3D(LayoutsWidget)
        self.view3d.setGeometry(QtCore.QRect(0, 0, 100, 100))
        self.view3d.setObjectName("view3d")
        self.axial = View2D(LayoutsWidget)
        self.axial.setGeometry(QtCore.QRect(100, 0, 100, 100))
        self.axial.setObjectName("axial")
        self.coronal = View2D(LayoutsWidget)
        self.coronal.setGeometry(QtCore.QRect(0, 100, 100, 100))
        self.coronal.setObjectName("coronal")
        self.sagittal = View2D(LayoutsWidget)
        self.sagittal.setGeometry(QtCore.QRect(100, 100, 100, 100))
        self.sagittal.setObjectName("sagittal")

        self.retranslateUi(LayoutsWidget)
        QtCore.QMetaObject.connectSlotsByName(LayoutsWidget)

    def retranslateUi(self, LayoutsWidget):
        _translate = QtCore.QCoreApplication.translate
        LayoutsWidget.setWindowTitle(_translate("LayoutsWidget", "Form"))




class Ui_Look(object):
    def setupUi(self, Look):
        Look.setObjectName("Look")
        Look.resize(340, 180)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Look.sizePolicy().hasHeightForWidth())
        Look.setSizePolicy(sizePolicy)
        self.verticalLayout = QtWidgets.QVBoxLayout(Look)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(4)
        self.verticalLayout.setObjectName("verticalLayout")
        self.toolButtonAP = QtWidgets.QToolButton(Look)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButtonAP.sizePolicy().hasHeightForWidth())
        self.toolButtonAP.setSizePolicy(sizePolicy)
        self.toolButtonAP.setObjectName("toolButtonAP")
        self.verticalLayout.addWidget(self.toolButtonAP)
        self.toolButtonPA = QtWidgets.QToolButton(Look)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButtonPA.sizePolicy().hasHeightForWidth())
        self.toolButtonPA.setSizePolicy(sizePolicy)
        self.toolButtonPA.setObjectName("toolButtonPA")
        self.verticalLayout.addWidget(self.toolButtonPA)
        self.toolButtonLAO = QtWidgets.QToolButton(Look)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButtonLAO.sizePolicy().hasHeightForWidth())
        self.toolButtonLAO.setSizePolicy(sizePolicy)
        self.toolButtonLAO.setObjectName("toolButtonLAO")
        self.verticalLayout.addWidget(self.toolButtonLAO)
        self.toolButtonRAO = QtWidgets.QToolButton(Look)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButtonRAO.sizePolicy().hasHeightForWidth())
        self.toolButtonRAO.setSizePolicy(sizePolicy)
        self.toolButtonRAO.setObjectName("toolButtonRAO")
        self.verticalLayout.addWidget(self.toolButtonRAO)
        self.toolButtonSUP = QtWidgets.QToolButton(Look)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButtonSUP.sizePolicy().hasHeightForWidth())
        self.toolButtonSUP.setSizePolicy(sizePolicy)
        self.toolButtonSUP.setObjectName("toolButtonSUP")
        self.verticalLayout.addWidget(self.toolButtonSUP)
        self.toolButtonINF = QtWidgets.QToolButton(Look)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButtonINF.sizePolicy().hasHeightForWidth())
        self.toolButtonINF.setSizePolicy(sizePolicy)
        self.toolButtonINF.setObjectName("toolButtonINF")
        self.verticalLayout.addWidget(self.toolButtonINF)
        self.toolButtonLL = QtWidgets.QToolButton(Look)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButtonLL.sizePolicy().hasHeightForWidth())
        self.toolButtonLL.setSizePolicy(sizePolicy)
        self.toolButtonLL.setObjectName("toolButtonLL")
        self.verticalLayout.addWidget(self.toolButtonLL)
        self.toolButtonRL = QtWidgets.QToolButton(Look)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButtonRL.sizePolicy().hasHeightForWidth())
        self.toolButtonRL.setSizePolicy(sizePolicy)
        self.toolButtonRL.setObjectName("toolButtonRL")
        self.verticalLayout.addWidget(self.toolButtonRL)

        self.retranslateUi(Look)
        QtCore.QMetaObject.connectSlotsByName(Look)

    def retranslateUi(self, Look):
        _translate = QtCore.QCoreApplication.translate
        Look.setWindowTitle(_translate("Look", "Form"))
        self.toolButtonAP.setToolTip(_translate("Look", "Передний вид"))
        self.toolButtonAP.setText(_translate("Look", "AP"))
        self.toolButtonPA.setToolTip(_translate("Look", "Задний вид"))
        self.toolButtonPA.setText(_translate("Look", "PA"))
        self.toolButtonLAO.setToolTip(_translate("Look", "Левый передний косой вид"))
        self.toolButtonLAO.setText(_translate("Look", "LAO"))
        self.toolButtonRAO.setToolTip(_translate("Look", "Правый передний косой вид"))
        self.toolButtonRAO.setText(_translate("Look", "RAO"))
        self.toolButtonSUP.setToolTip(_translate("Look", "Сверху вид"))
        self.toolButtonSUP.setText(_translate("Look", "SUP"))
        self.toolButtonINF.setToolTip(_translate("Look", "Снизу вид"))
        self.toolButtonINF.setText(_translate("Look", "INF"))
        self.toolButtonLL.setToolTip(_translate("Look", "Левый боковой вид"))
        self.toolButtonLL.setText(_translate("Look", "LL"))
        self.toolButtonRL.setToolTip(_translate("Look", "Правый боковой"))
        self.toolButtonRL.setText(_translate("Look", "RL"))




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/bone.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.stages = Stages(self.centralwidget)
        self.stages.setObjectName("stages")
        self.verticalLayout.addWidget(self.stages)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = StatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actOpenProject = QtWidgets.QAction(MainWindow)
        self.actOpenProject.setObjectName("actOpenProject")
        self.actSaveProject = QtWidgets.QAction(MainWindow)
        self.actSaveProject.setObjectName("actSaveProject")
        self.actExit = QtWidgets.QAction(MainWindow)
        self.actExit.setObjectName("actExit")
        self.menu.addAction(self.actOpenProject)
        self.menu.addAction(self.actSaveProject)
        self.menu.addSeparator()
        self.menu.addAction(self.actExit)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "Файл"))
        self.actOpenProject.setText(_translate("MainWindow", "Открыть проект"))
        self.actOpenProject.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actSaveProject.setText(_translate("MainWindow", "Сохранить проект"))
        self.actSaveProject.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actExit.setText(_translate("MainWindow", "Выход"))
        self.actExit.setShortcut(_translate("MainWindow", "Ctrl+Q"))




class Ui_MeshTools(object):
    def setupUi(self, MeshTools):
        MeshTools.setObjectName("MeshTools")
        MeshTools.resize(310, 307)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MeshTools.sizePolicy().hasHeightForWidth())
        MeshTools.setSizePolicy(sizePolicy)
        self.verticalLayout = QtWidgets.QVBoxLayout(MeshTools)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox = QtWidgets.QGroupBox(MeshTools)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_2.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pbClose = QtWidgets.QPushButton(self.groupBox)
        self.pbClose.setObjectName("pbClose")
        self.verticalLayout_2.addWidget(self.pbClose)
        self.pbFill = QtWidgets.QPushButton(self.groupBox)
        self.pbFill.setEnabled(True)
        self.pbFill.setObjectName("pbFill")
        self.verticalLayout_2.addWidget(self.pbFill)
        self.pbSplit = QtWidgets.QPushButton(self.groupBox)
        self.pbSplit.setCheckable(True)
        self.pbSplit.setObjectName("pbSplit")
        self.verticalLayout_2.addWidget(self.pbSplit)
        self.wSplit = QtWidgets.QWidget(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.wSplit.sizePolicy().hasHeightForWidth())
        self.wSplit.setSizePolicy(sizePolicy)
        self.wSplit.setObjectName("wSplit")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.wSplit)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, -1)
        self.verticalLayout_4.setSpacing(3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.widget_2 = QtWidgets.QWidget(self.wSplit)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.sbSplitNumber = QtWidgets.QSpinBox(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sbSplitNumber.sizePolicy().hasHeightForWidth())
        self.sbSplitNumber.setSizePolicy(sizePolicy)
        self.sbSplitNumber.setObjectName("sbSplitNumber")
        self.horizontalLayout_2.addWidget(self.sbSplitNumber)
        self.cbSplitSize = QtWidgets.QComboBox(self.widget_2)
        self.cbSplitSize.setObjectName("cbSplitSize")
        self.cbSplitSize.addItem("")
        self.cbSplitSize.addItem("")
        self.horizontalLayout_2.addWidget(self.cbSplitSize)
        self.verticalLayout_4.addWidget(self.widget_2)
        self.pbSplitApply = QtWidgets.QPushButton(self.wSplit)
        self.pbSplitApply.setObjectName("pbSplitApply")
        self.verticalLayout_4.addWidget(self.pbSplitApply)
        self.verticalLayout_2.addWidget(self.wSplit)
        self.line = QtWidgets.QFrame(self.groupBox)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_2.addWidget(self.line)
        self.pbSmooth = QtWidgets.QPushButton(self.groupBox)
        self.pbSmooth.setCheckable(True)
        self.pbSmooth.setObjectName("pbSmooth")
        self.verticalLayout_2.addWidget(self.pbSmooth)
        self.wSmooth = QtWidgets.QWidget(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.wSmooth.sizePolicy().hasHeightForWidth())
        self.wSmooth.setSizePolicy(sizePolicy)
        self.wSmooth.setObjectName("wSmooth")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.wSmooth)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 9)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.sbIterations = QtWidgets.QSpinBox(self.wSmooth)
        self.sbIterations.setMaximum(100)
        self.sbIterations.setProperty("value", 20)
        self.sbIterations.setObjectName("sbIterations")
        self.verticalLayout_3.addWidget(self.sbIterations)
        self.pbSmoothApply = QtWidgets.QPushButton(self.wSmooth)
        self.pbSmoothApply.setEnabled(True)
        self.pbSmoothApply.setObjectName("pbSmoothApply")
        self.verticalLayout_3.addWidget(self.pbSmoothApply)
        self.verticalLayout_2.addWidget(self.wSmooth)
        self.verticalLayout.addWidget(self.groupBox)

        self.retranslateUi(MeshTools)
        QtCore.QMetaObject.connectSlotsByName(MeshTools)

    def retranslateUi(self, MeshTools):
        _translate = QtCore.QCoreApplication.translate
        MeshTools.setWindowTitle(_translate("MeshTools", "Form"))
        self.groupBox.setTitle(_translate("MeshTools", "Инструменты:"))
        self.pbClose.setText(_translate("MeshTools", "Закрыть контура"))
        self.pbFill.setText(_translate("MeshTools", "Заполнить дыры"))
        self.pbSplit.setText(_translate("MeshTools", "Разделить по размеру"))
        self.label.setText(_translate("MeshTools", "Оставить:"))
        self.cbSplitSize.setItemText(0, _translate("MeshTools", "самых больших"))
        self.cbSplitSize.setItemText(1, _translate("MeshTools", "самых маленьких"))
        self.pbSplitApply.setText(_translate("MeshTools", "Разделить"))
        self.pbSmooth.setText(_translate("MeshTools", "Сглаживание"))
        self.pbSmoothApply.setText(_translate("MeshTools", "Применить"))




class Ui_Mirrorer(object):
    def setupUi(self, Mirrorer):
        Mirrorer.setObjectName("Mirrorer")
        Mirrorer.resize(800, 586)
        self.horizontalLayout = QtWidgets.QHBoxLayout(Mirrorer)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget_4 = Look(Mirrorer)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout.addWidget(self.widget_4)
        self.widget = QtWidgets.QWidget(Mirrorer)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget_2 = QtWidgets.QWidget(self.widget)
        self.widget_2.setObjectName("widget_2")
        self.layout = QtWidgets.QHBoxLayout(self.widget_2)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(3)
        self.layout.setObjectName("layout")
        self.verticalLayout.addWidget(self.widget_2)
        self.horizontalLayout.addWidget(self.widget)
        self.widget_3 = QtWidgets.QWidget(Mirrorer)
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_3)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox = QtWidgets.QGroupBox(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_3.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pbImport = QtWidgets.QPushButton(self.groupBox)
        self.pbImport.setCheckable(False)
        self.pbImport.setObjectName("pbImport")
        self.verticalLayout_3.addWidget(self.pbImport)
        self.wImport = QtWidgets.QWidget(self.groupBox)
        self.wImport.setObjectName("wImport")
        self.gridLayout = QtWidgets.QGridLayout(self.wImport)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(3)
        self.gridLayout.setObjectName("gridLayout")
        self.tbPlus = QtWidgets.QToolButton(self.wImport)
        self.tbPlus.setObjectName("tbPlus")
        self.gridLayout.addWidget(self.tbPlus, 1, 2, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.wImport)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 0, 1, 1)
        self.tbMinus = QtWidgets.QToolButton(self.wImport)
        self.tbMinus.setObjectName("tbMinus")
        self.gridLayout.addWidget(self.tbMinus, 1, 1, 1, 1)
        self.groupBoxFlip = QtWidgets.QGroupBox(self.wImport)
        self.groupBoxFlip.setObjectName("groupBoxFlip")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.groupBoxFlip)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.pushButtonFlipX = QtWidgets.QPushButton(self.groupBoxFlip)
        self.pushButtonFlipX.setObjectName("pushButtonFlipX")
        self.verticalLayout_5.addWidget(self.pushButtonFlipX)
        self.pushButtonFlipY = QtWidgets.QPushButton(self.groupBoxFlip)
        self.pushButtonFlipY.setObjectName("pushButtonFlipY")
        self.verticalLayout_5.addWidget(self.pushButtonFlipY)
        self.pushButtonFlipZ = QtWidgets.QPushButton(self.groupBoxFlip)
        self.pushButtonFlipZ.setObjectName("pushButtonFlipZ")
        self.verticalLayout_5.addWidget(self.pushButtonFlipZ)
        self.gridLayout.addWidget(self.groupBoxFlip, 0, 0, 1, 3)
        self.verticalLayout_3.addWidget(self.wImport)
        self.pbMirrorer = QtWidgets.QPushButton(self.groupBox)
        self.pbMirrorer.setCheckable(True)
        self.pbMirrorer.setChecked(True)
        self.pbMirrorer.setObjectName("pbMirrorer")
        self.verticalLayout_3.addWidget(self.pbMirrorer)
        self.wMirrorer = QtWidgets.QWidget(self.groupBox)
        self.wMirrorer.setObjectName("wMirrorer")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.wMirrorer)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.pbManipulator = QtWidgets.QPushButton(self.wMirrorer)
        self.pbManipulator.setCheckable(True)
        self.pbManipulator.setObjectName("pbManipulator")
        self.verticalLayout_4.addWidget(self.pbManipulator)
        self.label = QtWidgets.QLabel(self.wMirrorer)
        self.label.setObjectName("label")
        self.verticalLayout_4.addWidget(self.label)
        self.rbRight = QtWidgets.QRadioButton(self.wMirrorer)
        self.rbRight.setChecked(True)
        self.rbRight.setObjectName("rbRight")
        self.buttonGroup = QtWidgets.QButtonGroup(Mirrorer)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.rbRight)
        self.verticalLayout_4.addWidget(self.rbRight)
        self.rbLeft = QtWidgets.QRadioButton(self.wMirrorer)
        self.rbLeft.setObjectName("rbLeft")
        self.buttonGroup.addButton(self.rbLeft)
        self.verticalLayout_4.addWidget(self.rbLeft)
        self.verticalLayout_3.addWidget(self.wMirrorer)
        self.widget_5 = QtWidgets.QWidget(self.groupBox)
        self.widget_5.setObjectName("widget_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_5)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.widget_5)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.dsbDistance = QtWidgets.QDoubleSpinBox(self.widget_5)
        self.dsbDistance.setDecimals(1)
        self.dsbDistance.setSingleStep(0.1)
        self.dsbDistance.setProperty("value", 3.0)
        self.dsbDistance.setObjectName("dsbDistance")
        self.horizontalLayout_2.addWidget(self.dsbDistance)
        self.verticalLayout_3.addWidget(self.widget_5)
        self.pbFind = QtWidgets.QPushButton(self.groupBox)
        self.pbFind.setObjectName("pbFind")
        self.verticalLayout_3.addWidget(self.pbFind)
        self.pbSave = QtWidgets.QPushButton(self.groupBox)
        self.pbSave.setObjectName("pbSave")
        self.verticalLayout_3.addWidget(self.pbSave)
        self.verticalLayout_2.addWidget(self.groupBox)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.pbNext = QtWidgets.QPushButton(self.widget_3)
        self.pbNext.setObjectName("pbNext")
        self.verticalLayout_2.addWidget(self.pbNext)
        self.horizontalLayout.addWidget(self.widget_3)

        self.retranslateUi(Mirrorer)
        QtCore.QMetaObject.connectSlotsByName(Mirrorer)

    def retranslateUi(self, Mirrorer):
        _translate = QtCore.QCoreApplication.translate
        Mirrorer.setWindowTitle(_translate("Mirrorer", "Form"))
        self.groupBox.setTitle(_translate("Mirrorer", "Поиск объёма:"))
        self.pbImport.setText(_translate("Mirrorer", "Загрузить шаблон"))
        self.tbPlus.setText(_translate("Mirrorer", "+"))
        self.label_3.setText(_translate("Mirrorer", "Масштабировать:"))
        self.tbMinus.setText(_translate("Mirrorer", "-"))
        self.groupBoxFlip.setTitle(_translate("Mirrorer", "Переворот"))
        self.pushButtonFlipX.setText(_translate("Mirrorer", "Перевернуть по X"))
        self.pushButtonFlipY.setText(_translate("Mirrorer", "Перевернуть по Y"))
        self.pushButtonFlipZ.setText(_translate("Mirrorer", "Перевернуть по Z"))
        self.pbMirrorer.setText(_translate("Mirrorer", "Зеркалировать"))
        self.pbManipulator.setText(_translate("Mirrorer", "Манипулятор"))
        self.label.setText(_translate("Mirrorer", "Направление:"))
        self.rbRight.setText(_translate("Mirrorer", "→ Право"))
        self.rbLeft.setText(_translate("Mirrorer", "← Лево"))
        self.label_2.setText(_translate("Mirrorer", "Расстояние:"))
        self.pbFind.setText(_translate("Mirrorer", "Поиск объёма"))
        self.pbSave.setText(_translate("Mirrorer", "Сохранить резуальтат"))
        self.pbNext.setText(_translate("Mirrorer", "Далее →"))




class Ui_Mounter(object):
    def setupUi(self, Mounter):
        Mounter.setObjectName("Mounter")
        Mounter.resize(800, 600)
        self.horizontalLayout = QtWidgets.QHBoxLayout(Mounter)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.look = Look(Mounter)
        self.look.setObjectName("look")
        self.horizontalLayout.addWidget(self.look)
        self.widget_2 = QtWidgets.QWidget(Mounter)
        self.widget_2.setObjectName("widget_2")
        self.layout = QtWidgets.QHBoxLayout(self.widget_2)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(3)
        self.layout.setObjectName("layout")
        self.horizontalLayout.addWidget(self.widget_2)
        self.widget = QtWidgets.QWidget(Mounter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox = QtWidgets.QGroupBox(self.widget)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.listWidget = QtWidgets.QListWidget(self.groupBox)
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout_2.addWidget(self.listWidget)
        self.pbDelete = QtWidgets.QPushButton(self.groupBox)
        self.pbDelete.setEnabled(False)
        self.pbDelete.setObjectName("pbDelete")
        self.verticalLayout_2.addWidget(self.pbDelete)
        self.pbCreate = QtWidgets.QPushButton(self.groupBox)
        self.pbCreate.setCheckable(True)
        self.pbCreate.setObjectName("pbCreate")
        self.verticalLayout_2.addWidget(self.pbCreate)
        self.wCreate = QtWidgets.QWidget(self.groupBox)
        self.wCreate.setObjectName("wCreate")
        self.formLayout = QtWidgets.QFormLayout(self.wCreate)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setSpacing(3)
        self.formLayout.setObjectName("formLayout")
        self.label_2 = QtWidgets.QLabel(self.wCreate)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.dsbLength = QtWidgets.QDoubleSpinBox(self.wCreate)
        self.dsbLength.setSingleStep(0.1)
        self.dsbLength.setProperty("value", 3.0)
        self.dsbLength.setObjectName("dsbLength")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.dsbLength)
        self.label = QtWidgets.QLabel(self.wCreate)
        self.label.setObjectName("label")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label)
        self.dsbWidth = QtWidgets.QDoubleSpinBox(self.wCreate)
        self.dsbWidth.setSingleStep(0.1)
        self.dsbWidth.setProperty("value", 3.0)
        self.dsbWidth.setObjectName("dsbWidth")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.dsbWidth)
        self.label_3 = QtWidgets.QLabel(self.wCreate)
        self.label_3.setObjectName("label_3")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_3)
        self.pbSave = QtWidgets.QPushButton(self.wCreate)
        self.pbSave.setObjectName("pbSave")
        self.formLayout.setWidget(7, QtWidgets.QFormLayout.SpanningRole, self.pbSave)
        self.label_4 = QtWidgets.QLabel(self.wCreate)
        self.label_4.setObjectName("label_4")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.label_4)
        self.dsbRadius = QtWidgets.QDoubleSpinBox(self.wCreate)
        self.dsbRadius.setSingleStep(0.1)
        self.dsbRadius.setProperty("value", 1.5)
        self.dsbRadius.setObjectName("dsbRadius")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.dsbRadius)
        self.line = QtWidgets.QFrame(self.wCreate)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.SpanningRole, self.line)
        self.label_5 = QtWidgets.QLabel(self.wCreate)
        self.label_5.setObjectName("label_5")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.label_5)
        self.label_6 = QtWidgets.QLabel(self.wCreate)
        self.label_6.setObjectName("label_6")
        self.formLayout.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.label_6)
        self.dsbMaximumDistance = QtWidgets.QDoubleSpinBox(self.wCreate)
        self.dsbMaximumDistance.setSingleStep(0.1)
        self.dsbMaximumDistance.setProperty("value", 1.0)
        self.dsbMaximumDistance.setObjectName("dsbMaximumDistance")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.dsbMaximumDistance)
        self.dsbMinimumStep = QtWidgets.QDoubleSpinBox(self.wCreate)
        self.dsbMinimumStep.setSingleStep(0.1)
        self.dsbMinimumStep.setProperty("value", 5.0)
        self.dsbMinimumStep.setObjectName("dsbMinimumStep")
        self.formLayout.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.dsbMinimumStep)
        self.verticalLayout_2.addWidget(self.wCreate)
        self.verticalLayout.addWidget(self.groupBox)
        self.groupBox_2 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.spinBox = QtWidgets.QSpinBox(self.groupBox_2)
        self.spinBox.setMinimum(-10000)
        self.spinBox.setMaximum(10000)
        self.spinBox.setProperty("value", 400)
        self.spinBox.setObjectName("spinBox")
        self.verticalLayout_3.addWidget(self.spinBox)
        self.pbApply = QtWidgets.QPushButton(self.groupBox_2)
        self.pbApply.setObjectName("pbApply")
        self.verticalLayout_3.addWidget(self.pbApply)
        self.pbDelete2 = QtWidgets.QPushButton(self.groupBox_2)
        self.pbDelete2.setObjectName("pbDelete2")
        self.verticalLayout_3.addWidget(self.pbDelete2)
        self.verticalLayout.addWidget(self.groupBox_2)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.cbImplicitize = QtWidgets.QCheckBox(self.widget)
        self.cbImplicitize.setChecked(False)
        self.cbImplicitize.setObjectName("cbImplicitize")
        self.verticalLayout.addWidget(self.cbImplicitize)
        self.pbNext = QtWidgets.QPushButton(self.widget)
        self.pbNext.setObjectName("pbNext")
        self.verticalLayout.addWidget(self.pbNext)
        self.horizontalLayout.addWidget(self.widget)

        self.retranslateUi(Mounter)
        QtCore.QMetaObject.connectSlotsByName(Mounter)

    def retranslateUi(self, Mounter):
        _translate = QtCore.QCoreApplication.translate
        Mounter.setWindowTitle(_translate("Mounter", "Form"))
        self.groupBox.setTitle(_translate("Mounter", "Крепления:"))
        self.pbDelete.setText(_translate("Mounter", "Удалить крепление"))
        self.pbCreate.setText(_translate("Mounter", "Создать крепление"))
        self.label_2.setText(_translate("Mounter", "Высота:"))
        self.label.setText(_translate("Mounter", "Ширина:"))
        self.label_3.setText(_translate("Mounter", "Отверстия:"))
        self.pbSave.setText(_translate("Mounter", "Сохранить"))
        self.label_4.setText(_translate("Mounter", "Радиус:"))
        self.label_5.setText(_translate("Mounter", "До импланта:"))
        self.label_6.setText(_translate("Mounter", "Между отверсиями:"))
        self.groupBox_2.setTitle(_translate("Mounter", "Дополнительная поверхность:"))
        self.pbApply.setText(_translate("Mounter", "Применить"))
        self.pbDelete2.setText(_translate("Mounter", "Удалить"))
        self.cbImplicitize.setText(_translate("Mounter", "implicitize"))
        self.pbNext.setText(_translate("Mounter", "Далее →"))




class Ui_PatientCard(object):
    def setupUi(self, PatientCard):
        PatientCard.setObjectName("PatientCard")
        PatientCard.resize(800, 600)
        self.verticalLayout = QtWidgets.QVBoxLayout(PatientCard)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(PatientCard)
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget_3 = QtWidgets.QWidget(self.widget)
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_3)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.labelPhoto = QtWidgets.QLabel(self.widget_3)
        self.labelPhoto.setText("")
        self.labelPhoto.setScaledContents(False)
        self.labelPhoto.setAlignment(QtCore.Qt.AlignCenter)
        self.labelPhoto.setObjectName("labelPhoto")
        self.verticalLayout_2.addWidget(self.labelPhoto)
        self.pushButtonPhoto = QtWidgets.QPushButton(self.widget_3)
        self.pushButtonPhoto.setObjectName("pushButtonPhoto")
        self.verticalLayout_2.addWidget(self.pushButtonPhoto)
        self.horizontalLayout.addWidget(self.widget_3)
        self.widget_4 = QtWidgets.QWidget(self.widget)
        self.widget_4.setObjectName("widget_4")
        self.formLayout = QtWidgets.QFormLayout(self.widget_4)
        self.formLayout.setObjectName("formLayout")
        self.label_2 = QtWidgets.QLabel(self.widget_4)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.lineEditName = QtWidgets.QLineEdit(self.widget_4)
        self.lineEditName.setObjectName("lineEditName")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.lineEditName)
        self.label_6 = QtWidgets.QLabel(self.widget_4)
        self.label_6.setObjectName("label_6")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_6)
        self.comboBoxSex = QtWidgets.QComboBox(self.widget_4)
        self.comboBoxSex.setObjectName("comboBoxSex")
        self.comboBoxSex.addItem("")
        self.comboBoxSex.addItem("")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.comboBoxSex)
        self.label_4 = QtWidgets.QLabel(self.widget_4)
        self.label_4.setObjectName("label_4")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_4)
        self.dateTimeEditBirthdate = QtWidgets.QDateTimeEdit(self.widget_4)
        self.dateTimeEditBirthdate.setDate(QtCore.QDate(1900, 1, 30))
        self.dateTimeEditBirthdate.setCalendarPopup(True)
        self.dateTimeEditBirthdate.setObjectName("dateTimeEditBirthdate")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.dateTimeEditBirthdate)
        self.label_3 = QtWidgets.QLabel(self.widget_4)
        self.label_3.setObjectName("label_3")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_3)
        self.lineEditAge = QtWidgets.QLineEdit(self.widget_4)
        self.lineEditAge.setReadOnly(True)
        self.lineEditAge.setObjectName("lineEditAge")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.lineEditAge)
        self.label_5 = QtWidgets.QLabel(self.widget_4)
        self.label_5.setObjectName("label_5")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.label_5)
        self.doubleSpinBoxWeight = QtWidgets.QDoubleSpinBox(self.widget_4)
        self.doubleSpinBoxWeight.setDecimals(1)
        self.doubleSpinBoxWeight.setMaximum(300.0)
        self.doubleSpinBoxWeight.setProperty("value", 0.0)
        self.doubleSpinBoxWeight.setObjectName("doubleSpinBoxWeight")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.doubleSpinBoxWeight)
        self.horizontalLayout.addWidget(self.widget_4)
        self.verticalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(PatientCard)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.widgetSlices = SliceMetadata(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widgetSlices.sizePolicy().hasHeightForWidth())
        self.widgetSlices.setSizePolicy(sizePolicy)
        self.widgetSlices.setObjectName("widgetSlices")
        self.horizontalLayout_2.addWidget(self.widgetSlices)
        self.widget_6 = QtWidgets.QWidget(self.widget_2)
        self.widget_6.setObjectName("widget_6")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget_6)
        self.verticalLayout_3.setContentsMargins(0, 5, 0, 0)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pushButtonDICOM = QtWidgets.QPushButton(self.widget_6)
        self.pushButtonDICOM.setObjectName("pushButtonDICOM")
        self.verticalLayout_3.addWidget(self.pushButtonDICOM)
        self.pushButtonSTL = QtWidgets.QPushButton(self.widget_6)
        self.pushButtonSTL.setObjectName("pushButtonSTL")
        self.verticalLayout_3.addWidget(self.pushButtonSTL)
        self.labelPreview = QtWidgets.QLabel(self.widget_6)
        self.labelPreview.setText("")
        self.labelPreview.setScaledContents(False)
        self.labelPreview.setObjectName("labelPreview")
        self.verticalLayout_3.addWidget(self.labelPreview)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem)
        self.widget_5 = QtWidgets.QWidget(self.widget_6)
        self.widget_5.setObjectName("widget_5")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_5)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pbNext = QtWidgets.QPushButton(self.widget_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pbNext.sizePolicy().hasHeightForWidth())
        self.pbNext.setSizePolicy(sizePolicy)
        self.pbNext.setObjectName("pbNext")
        self.horizontalLayout_3.addWidget(self.pbNext)
        self.verticalLayout_3.addWidget(self.widget_5)
        self.horizontalLayout_2.addWidget(self.widget_6)
        self.verticalLayout.addWidget(self.widget_2)

        self.retranslateUi(PatientCard)
        QtCore.QMetaObject.connectSlotsByName(PatientCard)

    def retranslateUi(self, PatientCard):
        _translate = QtCore.QCoreApplication.translate
        PatientCard.setWindowTitle(_translate("PatientCard", "Карточка пациента"))
        self.pushButtonPhoto.setText(_translate("PatientCard", "Изменить фото"))
        self.label_2.setText(_translate("PatientCard", "ФИО:"))
        self.label_6.setText(_translate("PatientCard", "Пол:"))
        self.comboBoxSex.setItemText(0, _translate("PatientCard", "М"))
        self.comboBoxSex.setItemText(1, _translate("PatientCard", "Ж"))
        self.label_4.setText(_translate("PatientCard", "Дата рождения:"))
        self.dateTimeEditBirthdate.setDisplayFormat(_translate("PatientCard", "yyyy.MM.dd"))
        self.label_3.setText(_translate("PatientCard", "Возраст:"))
        self.label_5.setText(_translate("PatientCard", "Вес:"))
        self.pushButtonDICOM.setText(_translate("PatientCard", "Импортировать DICOM"))
        self.pushButtonSTL.setText(_translate("PatientCard", "Импортировать STL"))
        self.pbNext.setText(_translate("PatientCard", "Далее →"))




class Ui_Preprocessor(object):
    def setupUi(self, Preprocessor):
        Preprocessor.setObjectName("Preprocessor")
        Preprocessor.resize(801, 600)
        self.horizontalLayout = QtWidgets.QHBoxLayout(Preprocessor)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget_5 = QtWidgets.QWidget(Preprocessor)
        self.widget_5.setObjectName("widget_5")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_5)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.widget_3 = QtWidgets.QWidget(self.widget_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_3.sizePolicy().hasHeightForWidth())
        self.widget_3.setSizePolicy(sizePolicy)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.comboBoxOrientation = QtWidgets.QComboBox(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBoxOrientation.sizePolicy().hasHeightForWidth())
        self.comboBoxOrientation.setSizePolicy(sizePolicy)
        self.comboBoxOrientation.setObjectName("comboBoxOrientation")
        self.comboBoxOrientation.addItem("")
        self.comboBoxOrientation.addItem("")
        self.comboBoxOrientation.addItem("")
        self.horizontalLayout_2.addWidget(self.comboBoxOrientation)
        self.cbCmap = QtWidgets.QComboBox(self.widget_3)
        self.cbCmap.setObjectName("cbCmap")
        self.horizontalLayout_2.addWidget(self.cbCmap)
        self.toolButtonZoomIn = QtWidgets.QToolButton(self.widget_3)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/zoom-in.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButtonZoomIn.setIcon(icon)
        self.toolButtonZoomIn.setObjectName("toolButtonZoomIn")
        self.horizontalLayout_2.addWidget(self.toolButtonZoomIn)
        self.toolButtonZoomOut = QtWidgets.QToolButton(self.widget_3)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/zoom-out.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButtonZoomOut.setIcon(icon1)
        self.toolButtonZoomOut.setObjectName("toolButtonZoomOut")
        self.horizontalLayout_2.addWidget(self.toolButtonZoomOut)
        self.verticalLayout_2.addWidget(self.widget_3)
        self.view2d = View2D(self.widget_5)
        self.view2d.setObjectName("view2d")
        self.verticalLayout_2.addWidget(self.view2d)
        self.horizontalLayout.addWidget(self.widget_5)
        self.colormap = Colormap(Preprocessor)
        self.colormap.setObjectName("colormap")
        self.horizontalLayout.addWidget(self.colormap)
        self.widget = QtWidgets.QWidget(Preprocessor)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pbOrigin = QtWidgets.QPushButton(self.widget)
        self.pbOrigin.setObjectName("pbOrigin")
        self.verticalLayout.addWidget(self.pbOrigin)
        self.groupBox_4 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(3)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.widget_4 = QtWidgets.QWidget(self.groupBox_4)
        self.widget_4.setObjectName("widget_4")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.widget_4)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label = QtWidgets.QLabel(self.widget_4)
        self.label.setObjectName("label")
        self.gridLayout_3.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.widget_4)
        self.label_2.setObjectName("label_2")
        self.gridLayout_3.addWidget(self.label_2, 1, 0, 1, 1)
        self.smoothSigma = QtWidgets.QDoubleSpinBox(self.widget_4)
        self.smoothSigma.setMinimum(1.0)
        self.smoothSigma.setMaximum(10.0)
        self.smoothSigma.setSingleStep(0.1)
        self.smoothSigma.setObjectName("smoothSigma")
        self.gridLayout_3.addWidget(self.smoothSigma, 0, 1, 1, 1)
        self.smoothWindow = QtWidgets.QDoubleSpinBox(self.widget_4)
        self.smoothWindow.setMinimum(1.0)
        self.smoothWindow.setMaximum(10.0)
        self.smoothWindow.setSingleStep(0.1)
        self.smoothWindow.setObjectName("smoothWindow")
        self.gridLayout_3.addWidget(self.smoothWindow, 1, 1, 1, 1)
        self.verticalLayout_6.addWidget(self.widget_4)
        self.smoothApply = QtWidgets.QPushButton(self.groupBox_4)
        self.smoothApply.setEnabled(True)
        self.smoothApply.setObjectName("smoothApply")
        self.verticalLayout_6.addWidget(self.smoothApply)
        self.verticalLayout.addWidget(self.groupBox_4)
        self.groupBox_2 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget_2 = QtWidgets.QWidget(self.groupBox_2)
        self.widget_2.setObjectName("widget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget_2)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.denoiseFactor = QtWidgets.QSlider(self.widget_2)
        self.denoiseFactor.setOrientation(QtCore.Qt.Horizontal)
        self.denoiseFactor.setTickPosition(QtWidgets.QSlider.TicksAbove)
        self.denoiseFactor.setObjectName("denoiseFactor")
        self.gridLayout_2.addWidget(self.denoiseFactor, 0, 0, 1, 1)
        self.denoiseFactor_2 = QtWidgets.QSpinBox(self.widget_2)
        self.denoiseFactor_2.setObjectName("denoiseFactor_2")
        self.gridLayout_2.addWidget(self.denoiseFactor_2, 0, 1, 1, 1)
        self.denoiseThreshold = QtWidgets.QSlider(self.widget_2)
        self.denoiseThreshold.setOrientation(QtCore.Qt.Horizontal)
        self.denoiseThreshold.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.denoiseThreshold.setObjectName("denoiseThreshold")
        self.gridLayout_2.addWidget(self.denoiseThreshold, 1, 0, 1, 1)
        self.denoiseThreshold_2 = QtWidgets.QSpinBox(self.widget_2)
        self.denoiseThreshold_2.setObjectName("denoiseThreshold_2")
        self.gridLayout_2.addWidget(self.denoiseThreshold_2, 1, 1, 1, 1)
        self.verticalLayout_5.addWidget(self.widget_2)
        self.denoiseApply = QtWidgets.QPushButton(self.groupBox_2)
        self.denoiseApply.setEnabled(False)
        self.denoiseApply.setObjectName("denoiseApply")
        self.verticalLayout_5.addWidget(self.denoiseApply)
        self.verticalLayout.addWidget(self.groupBox_2)
        self.groupBox = QtWidgets.QGroupBox(self.widget)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pushButtonEnhance = QtWidgets.QPushButton(self.groupBox)
        self.pushButtonEnhance.setObjectName("pushButtonEnhance")
        self.verticalLayout_3.addWidget(self.pushButtonEnhance)
        self.verticalLayout.addWidget(self.groupBox)
        self.groupBox_3 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.pushButtonFlipX = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButtonFlipX.setObjectName("pushButtonFlipX")
        self.verticalLayout_4.addWidget(self.pushButtonFlipX)
        self.pushButtonFlipY = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButtonFlipY.setObjectName("pushButtonFlipY")
        self.verticalLayout_4.addWidget(self.pushButtonFlipY)
        self.pushButtonFlipZ = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButtonFlipZ.setObjectName("pushButtonFlipZ")
        self.verticalLayout_4.addWidget(self.pushButtonFlipZ)
        self.verticalLayout.addWidget(self.groupBox_3)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.pushButtonPreview = QtWidgets.QPushButton(self.widget)
        self.pushButtonPreview.setObjectName("pushButtonPreview")
        self.verticalLayout.addWidget(self.pushButtonPreview)
        self.pbNext = QtWidgets.QPushButton(self.widget)
        self.pbNext.setObjectName("pbNext")
        self.verticalLayout.addWidget(self.pbNext)
        self.horizontalLayout.addWidget(self.widget)

        self.retranslateUi(Preprocessor)
        self.denoiseFactor.valueChanged['int'].connect(Preprocessor.setDenoiseFactor)
        self.denoiseFactor_2.valueChanged['int'].connect(Preprocessor.setDenoiseFactor)
        self.denoiseThreshold.valueChanged['int'].connect(Preprocessor.setDenoiseThreshold)
        self.denoiseThreshold_2.valueChanged['int'].connect(Preprocessor.setDenoiseThreshold)
        QtCore.QMetaObject.connectSlotsByName(Preprocessor)

    def retranslateUi(self, Preprocessor):
        _translate = QtCore.QCoreApplication.translate
        Preprocessor.setWindowTitle(_translate("Preprocessor", "Form"))
        self.comboBoxOrientation.setItemText(0, _translate("Preprocessor", "AXIAL"))
        self.comboBoxOrientation.setItemText(1, _translate("Preprocessor", "SAGITTAL"))
        self.comboBoxOrientation.setItemText(2, _translate("Preprocessor", "CORONAL"))
        self.toolButtonZoomIn.setText(_translate("Preprocessor", "+"))
        self.toolButtonZoomOut.setText(_translate("Preprocessor", "-"))
        self.pbOrigin.setText(_translate("Preprocessor", "Сбросить до оригинала"))
        self.groupBox_4.setTitle(_translate("Preprocessor", "Сглаживание"))
        self.label.setText(_translate("Preprocessor", "Сигма"))
        self.label_2.setText(_translate("Preprocessor", "Окно"))
        self.smoothApply.setText(_translate("Preprocessor", "Применить"))
        self.groupBox_2.setTitle(_translate("Preprocessor", "Анизотропная фильтрация"))
        self.denoiseApply.setText(_translate("Preprocessor", "Применить"))
        self.groupBox.setTitle(_translate("Preprocessor", "Повысить резкость"))
        self.pushButtonEnhance.setText(_translate("Preprocessor", "Применить"))
        self.groupBox_3.setTitle(_translate("Preprocessor", "Переворот"))
        self.pushButtonFlipX.setText(_translate("Preprocessor", "Перевернуть по X"))
        self.pushButtonFlipY.setText(_translate("Preprocessor", "Перевернуть по Y"))
        self.pushButtonFlipZ.setText(_translate("Preprocessor", "Перевернуть по Z"))
        self.pushButtonPreview.setText(_translate("Preprocessor", "Предпросмотр"))
        self.pbNext.setText(_translate("Preprocessor", "Далее →"))




class Ui_PreviewDialog(object):
    def setupUi(self, PreviewDialog):
        PreviewDialog.setObjectName("PreviewDialog")
        PreviewDialog.resize(800, 600)
        self.horizontalLayout = QtWidgets.QHBoxLayout(PreviewDialog)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(PreviewDialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.tbLayoutClassicRight = QtWidgets.QToolButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tbLayoutClassicRight.sizePolicy().hasHeightForWidth())
        self.tbLayoutClassicRight.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/LAYOUT_CLASSIC_RIGHT.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tbLayoutClassicRight.setIcon(icon)
        self.tbLayoutClassicRight.setIconSize(QtCore.QSize(20, 20))
        self.tbLayoutClassicRight.setCheckable(True)
        self.tbLayoutClassicRight.setChecked(True)
        self.tbLayoutClassicRight.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.tbLayoutClassicRight.setAutoRaise(True)
        self.tbLayoutClassicRight.setObjectName("tbLayoutClassicRight")
        self.buttonGroupLayouts = QtWidgets.QButtonGroup(PreviewDialog)
        self.buttonGroupLayouts.setObjectName("buttonGroupLayouts")
        self.buttonGroupLayouts.addButton(self.tbLayoutClassicRight)
        self.verticalLayout_4.addWidget(self.tbLayoutClassicRight)
        self.tbLayoutClassicBottom = QtWidgets.QToolButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tbLayoutClassicBottom.sizePolicy().hasHeightForWidth())
        self.tbLayoutClassicBottom.setSizePolicy(sizePolicy)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/LAYOUT_CLASSIC_BOTTOM.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tbLayoutClassicBottom.setIcon(icon1)
        self.tbLayoutClassicBottom.setIconSize(QtCore.QSize(20, 20))
        self.tbLayoutClassicBottom.setCheckable(True)
        self.tbLayoutClassicBottom.setAutoRaise(True)
        self.tbLayoutClassicBottom.setObjectName("tbLayoutClassicBottom")
        self.buttonGroupLayouts.addButton(self.tbLayoutClassicBottom)
        self.verticalLayout_4.addWidget(self.tbLayoutClassicBottom)
        self.tbLayoutTwoByTwo = QtWidgets.QToolButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tbLayoutTwoByTwo.sizePolicy().hasHeightForWidth())
        self.tbLayoutTwoByTwo.setSizePolicy(sizePolicy)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/LAYOUT_TWO_BY_TWO.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tbLayoutTwoByTwo.setIcon(icon2)
        self.tbLayoutTwoByTwo.setIconSize(QtCore.QSize(20, 20))
        self.tbLayoutTwoByTwo.setCheckable(True)
        self.tbLayoutTwoByTwo.setAutoRaise(True)
        self.tbLayoutTwoByTwo.setObjectName("tbLayoutTwoByTwo")
        self.buttonGroupLayouts.addButton(self.tbLayoutTwoByTwo)
        self.verticalLayout_4.addWidget(self.tbLayoutTwoByTwo)
        self.tbLayoutOnly3D = QtWidgets.QToolButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tbLayoutOnly3D.sizePolicy().hasHeightForWidth())
        self.tbLayoutOnly3D.setSizePolicy(sizePolicy)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/LAYOUT_3D_ONLY.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tbLayoutOnly3D.setIcon(icon3)
        self.tbLayoutOnly3D.setIconSize(QtCore.QSize(20, 20))
        self.tbLayoutOnly3D.setCheckable(True)
        self.tbLayoutOnly3D.setAutoRaise(True)
        self.tbLayoutOnly3D.setObjectName("tbLayoutOnly3D")
        self.buttonGroupLayouts.addButton(self.tbLayoutOnly3D)
        self.verticalLayout_4.addWidget(self.tbLayoutOnly3D)
        self.tbLayoutOnlyAxial = QtWidgets.QToolButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tbLayoutOnlyAxial.sizePolicy().hasHeightForWidth())
        self.tbLayoutOnlyAxial.setSizePolicy(sizePolicy)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/axial.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tbLayoutOnlyAxial.setIcon(icon4)
        self.tbLayoutOnlyAxial.setIconSize(QtCore.QSize(20, 20))
        self.tbLayoutOnlyAxial.setCheckable(True)
        self.tbLayoutOnlyAxial.setAutoRaise(True)
        self.tbLayoutOnlyAxial.setObjectName("tbLayoutOnlyAxial")
        self.buttonGroupLayouts.addButton(self.tbLayoutOnlyAxial)
        self.verticalLayout_4.addWidget(self.tbLayoutOnlyAxial)
        self.tbLayoutOnlySagittal = QtWidgets.QToolButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tbLayoutOnlySagittal.sizePolicy().hasHeightForWidth())
        self.tbLayoutOnlySagittal.setSizePolicy(sizePolicy)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/sagittal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tbLayoutOnlySagittal.setIcon(icon5)
        self.tbLayoutOnlySagittal.setIconSize(QtCore.QSize(20, 20))
        self.tbLayoutOnlySagittal.setCheckable(True)
        self.tbLayoutOnlySagittal.setAutoRaise(True)
        self.tbLayoutOnlySagittal.setObjectName("tbLayoutOnlySagittal")
        self.buttonGroupLayouts.addButton(self.tbLayoutOnlySagittal)
        self.verticalLayout_4.addWidget(self.tbLayoutOnlySagittal)
        self.tbLayoutOnlyCoronal = QtWidgets.QToolButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tbLayoutOnlyCoronal.sizePolicy().hasHeightForWidth())
        self.tbLayoutOnlyCoronal.setSizePolicy(sizePolicy)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/coronal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tbLayoutOnlyCoronal.setIcon(icon6)
        self.tbLayoutOnlyCoronal.setIconSize(QtCore.QSize(20, 20))
        self.tbLayoutOnlyCoronal.setCheckable(True)
        self.tbLayoutOnlyCoronal.setAutoRaise(True)
        self.tbLayoutOnlyCoronal.setObjectName("tbLayoutOnlyCoronal")
        self.buttonGroupLayouts.addButton(self.tbLayoutOnlyCoronal)
        self.verticalLayout_4.addWidget(self.tbLayoutOnlyCoronal)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem)
        self.look = Look(self.widget)
        self.look.setObjectName("look")
        self.verticalLayout_4.addWidget(self.look)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem1)
        self.horizontalLayout.addWidget(self.widget)
        self.layouts = LayoutsWidget(PreviewDialog)
        self.layouts.setObjectName("layouts")
        self.horizontalLayout.addWidget(self.layouts)
        self.colormap = Colormap(PreviewDialog)
        self.colormap.setObjectName("colormap")
        self.horizontalLayout.addWidget(self.colormap)
        self.widget_2 = QtWidgets.QWidget(PreviewDialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBoxTissue = QtWidgets.QGroupBox(self.widget_2)
        self.groupBoxTissue.setObjectName("groupBoxTissue")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBoxTissue)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.radioButtonBone = QtWidgets.QRadioButton(self.groupBoxTissue)
        self.radioButtonBone.setChecked(True)
        self.radioButtonBone.setObjectName("radioButtonBone")
        self.buttonGroupTissue = QtWidgets.QButtonGroup(PreviewDialog)
        self.buttonGroupTissue.setObjectName("buttonGroupTissue")
        self.buttonGroupTissue.addButton(self.radioButtonBone)
        self.verticalLayout_3.addWidget(self.radioButtonBone)
        self.radioButtonSkin = QtWidgets.QRadioButton(self.groupBoxTissue)
        self.radioButtonSkin.setObjectName("radioButtonSkin")
        self.buttonGroupTissue.addButton(self.radioButtonSkin)
        self.verticalLayout_3.addWidget(self.radioButtonSkin)
        self.radioButtonMuscle = QtWidgets.QRadioButton(self.groupBoxTissue)
        self.radioButtonMuscle.setObjectName("radioButtonMuscle")
        self.buttonGroupTissue.addButton(self.radioButtonMuscle)
        self.verticalLayout_3.addWidget(self.radioButtonMuscle)
        self.verticalLayout.addWidget(self.groupBoxTissue)
        self.pbHistogram = QtWidgets.QPushButton(self.widget_2)
        self.pbHistogram.setCheckable(True)
        self.pbHistogram.setObjectName("pbHistogram")
        self.verticalLayout.addWidget(self.pbHistogram)
        self.dwHistogram_ = QtWidgets.QDockWidget(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dwHistogram_.sizePolicy().hasHeightForWidth())
        self.dwHistogram_.setSizePolicy(sizePolicy)
        self.dwHistogram_.setFeatures(QtWidgets.QDockWidget.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetMovable)
        self.dwHistogram_.setObjectName("dwHistogram_")
        self.dwHistogram = Histogram()
        self.dwHistogram.setObjectName("dwHistogram")
        self.dwHistogram_.setWidget(self.dwHistogram)
        self.verticalLayout.addWidget(self.dwHistogram_)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem2)
        self.pbClose = QtWidgets.QPushButton(self.widget_2)
        self.pbClose.setObjectName("pbClose")
        self.verticalLayout.addWidget(self.pbClose)
        self.horizontalLayout.addWidget(self.widget_2)

        self.retranslateUi(PreviewDialog)
        QtCore.QMetaObject.connectSlotsByName(PreviewDialog)

    def retranslateUi(self, PreviewDialog):
        _translate = QtCore.QCoreApplication.translate
        PreviewDialog.setWindowTitle(_translate("PreviewDialog", "Предпросмотр снимка < CAD-система «Smart Implant»"))
        self.tbLayoutClassicBottom.setText(_translate("PreviewDialog", "..."))
        self.tbLayoutTwoByTwo.setText(_translate("PreviewDialog", "..."))
        self.tbLayoutOnly3D.setText(_translate("PreviewDialog", "..."))
        self.tbLayoutOnlyAxial.setText(_translate("PreviewDialog", "A"))
        self.tbLayoutOnlySagittal.setText(_translate("PreviewDialog", "S"))
        self.tbLayoutOnlyCoronal.setText(_translate("PreviewDialog", "C"))
        self.groupBoxTissue.setTitle(_translate("PreviewDialog", "Ткани"))
        self.radioButtonBone.setText(_translate("PreviewDialog", "Кости"))
        self.radioButtonSkin.setText(_translate("PreviewDialog", "Кожа"))
        self.radioButtonMuscle.setText(_translate("PreviewDialog", "Мускулы"))
        self.pbHistogram.setText(_translate("PreviewDialog", "Гистограмма"))
        self.dwHistogram_.setWindowTitle(_translate("PreviewDialog", "Результат измерения"))
        self.pbClose.setText(_translate("PreviewDialog", "Закрыть"))




class Ui_Printer(object):
    def setupUi(self, Printer):
        Printer.setObjectName("Printer")
        Printer.resize(800, 600)
        self.horizontalLayout = QtWidgets.QHBoxLayout(Printer)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.look = Look(Printer)
        self.look.setObjectName("look")
        self.horizontalLayout.addWidget(self.look)
        self.widget = QtWidgets.QWidget(Printer)
        self.widget.setObjectName("widget")
        self.layout = QtWidgets.QHBoxLayout(self.widget)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(3)
        self.layout.setObjectName("layout")
        self.horizontalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(Printer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pbFix = QtWidgets.QPushButton(self.widget_2)
        self.pbFix.setObjectName("pbFix")
        self.verticalLayout_2.addWidget(self.pbFix)
        self.groupBox = QtWidgets.QGroupBox(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.rbHigh = QtWidgets.QRadioButton(self.groupBox)
        self.rbHigh.setChecked(True)
        self.rbHigh.setObjectName("rbHigh")
        self.buttonGroup = QtWidgets.QButtonGroup(Printer)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.rbHigh)
        self.verticalLayout.addWidget(self.rbHigh)
        self.rbMiddle = QtWidgets.QRadioButton(self.groupBox)
        self.rbMiddle.setObjectName("rbMiddle")
        self.buttonGroup.addButton(self.rbMiddle)
        self.verticalLayout.addWidget(self.rbMiddle)
        self.rbLow = QtWidgets.QRadioButton(self.groupBox)
        self.rbLow.setObjectName("rbLow")
        self.buttonGroup.addButton(self.rbLow)
        self.verticalLayout.addWidget(self.rbLow)
        self.verticalLayout_2.addWidget(self.groupBox)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.pbSave = QtWidgets.QPushButton(self.widget_2)
        self.pbSave.setObjectName("pbSave")
        self.verticalLayout_2.addWidget(self.pbSave)
        self.horizontalLayout.addWidget(self.widget_2)

        self.retranslateUi(Printer)
        QtCore.QMetaObject.connectSlotsByName(Printer)

    def retranslateUi(self, Printer):
        _translate = QtCore.QCoreApplication.translate
        Printer.setWindowTitle(_translate("Printer", "Form"))
        self.pbFix.setText(_translate("Printer", "Исправить ошибки"))
        self.groupBox.setTitle(_translate("Printer", "Качество"))
        self.rbHigh.setText(_translate("Printer", "Высокое"))
        self.rbMiddle.setText(_translate("Printer", "Среднее"))
        self.rbLow.setText(_translate("Printer", "Низкое"))
        self.pbSave.setText(_translate("Printer", "Сохранить STL"))




class Ui_ProjectDialog(object):
    def setupUi(self, ProjectDialog):
        ProjectDialog.setObjectName("ProjectDialog")
        ProjectDialog.resize(636, 480)
        self.horizontalLayout = QtWidgets.QHBoxLayout(ProjectDialog)
        self.horizontalLayout.setContentsMargins(3, 3, 3, 3)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.listWidget = QtWidgets.QListWidget(ProjectDialog)
        self.listWidget.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.listWidget.setObjectName("listWidget")
        self.horizontalLayout.addWidget(self.listWidget)
        self.widget = QtWidgets.QWidget(ProjectDialog)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.widget_2 = QtWidgets.QWidget(self.widget)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.labelRosatom = QtWidgets.QLabel(self.widget_2)
        self.labelRosatom.setMaximumSize(QtCore.QSize(100, 100))
        self.labelRosatom.setText("")
        self.labelRosatom.setPixmap(QtGui.QPixmap(":/icons/logo-rosatom.png"))
        self.labelRosatom.setScaledContents(True)
        self.labelRosatom.setObjectName("labelRosatom")
        self.horizontalLayout_2.addWidget(self.labelRosatom)
        self.labelDgtu = QtWidgets.QLabel(self.widget_2)
        self.labelDgtu.setMaximumSize(QtCore.QSize(100, 100))
        self.labelDgtu.setText("")
        self.labelDgtu.setPixmap(QtGui.QPixmap(":/icons/logo-dgtu.png"))
        self.labelDgtu.setScaledContents(True)
        self.labelDgtu.setObjectName("labelDgtu")
        self.horizontalLayout_2.addWidget(self.labelDgtu)
        self.labelSechenov = QtWidgets.QLabel(self.widget_2)
        self.labelSechenov.setMaximumSize(QtCore.QSize(100, 100))
        self.labelSechenov.setText("")
        self.labelSechenov.setPixmap(QtGui.QPixmap(":/icons/logo-sechenov.png"))
        self.labelSechenov.setScaledContents(True)
        self.labelSechenov.setObjectName("labelSechenov")
        self.horizontalLayout_2.addWidget(self.labelSechenov)
        self.verticalLayout.addWidget(self.widget_2)
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.pushButtonCreateProject = QtWidgets.QPushButton(self.widget)
        self.pushButtonCreateProject.setAutoDefault(False)
        self.pushButtonCreateProject.setObjectName("pushButtonCreateProject")
        self.verticalLayout.addWidget(self.pushButtonCreateProject)
        self.pushButtonOpenProject = QtWidgets.QPushButton(self.widget)
        self.pushButtonOpenProject.setAutoDefault(False)
        self.pushButtonOpenProject.setObjectName("pushButtonOpenProject")
        self.verticalLayout.addWidget(self.pushButtonOpenProject)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem2)
        self.horizontalLayout.addWidget(self.widget)

        self.retranslateUi(ProjectDialog)
        QtCore.QMetaObject.connectSlotsByName(ProjectDialog)

    def retranslateUi(self, ProjectDialog):
        _translate = QtCore.QCoreApplication.translate
        ProjectDialog.setWindowTitle(_translate("ProjectDialog", "CAD-система «Smart Implant»"))
        self.label.setText(_translate("ProjectDialog", "<html><head/><body><p><span style=\" font-size:24pt; font-weight:600;\">CAD-система</span></p></body></html>"))
        self.label_2.setText(_translate("ProjectDialog", "<html><head/><body><p><span style=\" font-size:24pt; font-weight:600;\">«Smart Implant»</span></p></body></html>"))
        self.pushButtonCreateProject.setText(_translate("ProjectDialog", "Создать проект"))
        self.pushButtonOpenProject.setText(_translate("ProjectDialog", "Открыть проект"))




class Ui_PropsTree(object):
    def setupUi(self, PropsTree):
        PropsTree.setObjectName("PropsTree")
        PropsTree.resize(299, 325)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(PropsTree.sizePolicy().hasHeightForWidth())
        PropsTree.setSizePolicy(sizePolicy)
        self.verticalLayout = QtWidgets.QVBoxLayout(PropsTree)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox = QtWidgets.QGroupBox(PropsTree)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_2.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tree = QtWidgets.QTreeWidget(self.groupBox)
        self.tree.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tree.setHeaderHidden(True)
        self.tree.setObjectName("tree")
        self.tree.headerItem().setText(0, "1")
        self.tree.header().setVisible(False)
        self.verticalLayout_2.addWidget(self.tree)
        self.pbSave = QtWidgets.QPushButton(self.groupBox)
        self.pbSave.setObjectName("pbSave")
        self.verticalLayout_2.addWidget(self.pbSave)
        self.pbCopy = QtWidgets.QPushButton(self.groupBox)
        self.pbCopy.setObjectName("pbCopy")
        self.verticalLayout_2.addWidget(self.pbCopy)
        self.pbDelete = QtWidgets.QPushButton(self.groupBox)
        self.pbDelete.setObjectName("pbDelete")
        self.verticalLayout_2.addWidget(self.pbDelete)
        self.verticalLayout.addWidget(self.groupBox)

        self.retranslateUi(PropsTree)
        QtCore.QMetaObject.connectSlotsByName(PropsTree)

    def retranslateUi(self, PropsTree):
        _translate = QtCore.QCoreApplication.translate
        PropsTree.setWindowTitle(_translate("PropsTree", "Form"))
        self.groupBox.setTitle(_translate("PropsTree", "Модели:"))
        self.pbSave.setText(_translate("PropsTree", "Сохранить"))
        self.pbCopy.setText(_translate("PropsTree", "Копировать"))
        self.pbDelete.setText(_translate("PropsTree", "Удалить"))




class Ui_SliceMetadata(object):
    def setupUi(self, SliceMetadata):
        SliceMetadata.setObjectName("SliceMetadata")
        SliceMetadata.resize(658, 537)
        self.verticalLayout = QtWidgets.QVBoxLayout(SliceMetadata)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox = QtWidgets.QGroupBox(SliceMetadata)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.verticalLayout.addWidget(self.groupBox)
        self.widget_2 = QtWidgets.QWidget(SliceMetadata)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.horizontalSlider = QtWidgets.QSlider(self.widget_2)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalLayout.addWidget(self.horizontalSlider)
        self.spinBox = QtWidgets.QSpinBox(self.widget_2)
        self.spinBox.setObjectName("spinBox")
        self.horizontalLayout.addWidget(self.spinBox)
        self.verticalLayout.addWidget(self.widget_2)
        self.widget = QtWidgets.QWidget(SliceMetadata)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tableWidget = QtWidgets.QTableWidget(self.widget)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.tableWidget.verticalHeader().setVisible(False)
        self.verticalLayout_2.addWidget(self.tableWidget)
        self.verticalLayout.addWidget(self.widget)

        self.retranslateUi(SliceMetadata)
        QtCore.QMetaObject.connectSlotsByName(SliceMetadata)

    def retranslateUi(self, SliceMetadata):
        _translate = QtCore.QCoreApplication.translate
        SliceMetadata.setWindowTitle(_translate("SliceMetadata", "Form"))
        self.groupBox.setTitle(_translate("SliceMetadata", "Файл:"))
        self.label.setText(_translate("SliceMetadata", "Путь к файлу"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("SliceMetadata", "Тег"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("SliceMetadata", "Атрибут"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("SliceMetadata", "Значение"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("SliceMetadata", "VR"))




class Ui_Stages(object):
    def setupUi(self, Stages):
        Stages.setObjectName("Stages")
        Stages.resize(800, 600)
        Stages.setTabPosition(QtWidgets.QTabWidget.South)
        self.patientcard = PatientCard()
        self.patientcard.setObjectName("patientcard")
        Stages.addTab(self.patientcard, "")
        self.preprocessor = Preprocessor()
        self.preprocessor.setObjectName("preprocessor")
        Stages.addTab(self.preprocessor, "")
        self.extractor = Extractor()
        self.extractor.setObjectName("extractor")
        Stages.addTab(self.extractor, "")
        self.editor = Editor()
        self.editor.setObjectName("editor")
        Stages.addTab(self.editor, "")
        self.mirrorer = Mirrorer()
        self.mirrorer.setObjectName("mirrorer")
        Stages.addTab(self.mirrorer, "")
        self.implantor = Implantor()
        self.implantor.setObjectName("implantor")
        Stages.addTab(self.implantor, "")
        self.mounter = Mounter()
        self.mounter.setObjectName("mounter")
        Stages.addTab(self.mounter, "")
        self.printer = Printer()
        self.printer.setObjectName("printer")
        Stages.addTab(self.printer, "")

        self.retranslateUi(Stages)
        Stages.setCurrentIndex(6)
        QtCore.QMetaObject.connectSlotsByName(Stages)

    def retranslateUi(self, Stages):
        _translate = QtCore.QCoreApplication.translate
        Stages.setWindowTitle(_translate("Stages", "TabWidget"))
        Stages.setTabText(Stages.indexOf(self.patientcard), _translate("Stages", "Карта пациента"))
        Stages.setTabText(Stages.indexOf(self.preprocessor), _translate("Stages", "Предобработка"))
        Stages.setTabText(Stages.indexOf(self.extractor), _translate("Stages", "Извлечение модели"))
        Stages.setTabText(Stages.indexOf(self.editor), _translate("Stages", "Редактирование модели"))
        Stages.setTabText(Stages.indexOf(self.mirrorer), _translate("Stages", "Поиск недостающего объема"))
        Stages.setTabText(Stages.indexOf(self.implantor), _translate("Stages", "Редактирование импланта"))
        Stages.setTabText(Stages.indexOf(self.mounter), _translate("Stages", "Конструктор креплений"))
        Stages.setTabText(Stages.indexOf(self.printer), _translate("Stages", "Обработка для печати"))




class Ui_StageTwo(object):
    def setupUi(self, StageTwo):
        StageTwo.setObjectName("StageTwo")
        StageTwo.resize(800, 600)
        self.horizontalLayout = QtWidgets.QHBoxLayout(StageTwo)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget_5 = QtWidgets.QWidget(StageTwo)
        self.widget_5.setObjectName("widget_5")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_5)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.widget_3 = QtWidgets.QWidget(self.widget_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_3.sizePolicy().hasHeightForWidth())
        self.widget_3.setSizePolicy(sizePolicy)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.comboBoxOrientation = QtWidgets.QComboBox(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBoxOrientation.sizePolicy().hasHeightForWidth())
        self.comboBoxOrientation.setSizePolicy(sizePolicy)
        self.comboBoxOrientation.setObjectName("comboBoxOrientation")
        self.comboBoxOrientation.addItem("")
        self.comboBoxOrientation.addItem("")
        self.comboBoxOrientation.addItem("")
        self.horizontalLayout_2.addWidget(self.comboBoxOrientation)
        self.comboBoxCmap = QtWidgets.QComboBox(self.widget_3)
        self.comboBoxCmap.setObjectName("comboBoxCmap")
        self.horizontalLayout_2.addWidget(self.comboBoxCmap)
        self.toolButtonZoomIn = QtWidgets.QToolButton(self.widget_3)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/zoom-in.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButtonZoomIn.setIcon(icon)
        self.toolButtonZoomIn.setObjectName("toolButtonZoomIn")
        self.horizontalLayout_2.addWidget(self.toolButtonZoomIn)
        self.toolButtonZoomOut = QtWidgets.QToolButton(self.widget_3)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/zoom-out.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButtonZoomOut.setIcon(icon1)
        self.toolButtonZoomOut.setObjectName("toolButtonZoomOut")
        self.horizontalLayout_2.addWidget(self.toolButtonZoomOut)
        self.verticalLayout_2.addWidget(self.widget_3)
        self.view2d = View2D(self.widget_5)
        self.view2d.setObjectName("view2d")
        self.verticalLayout_2.addWidget(self.view2d)
        self.horizontalLayout.addWidget(self.widget_5)
        self.colormap = Colormap(StageTwo)
        self.colormap.setObjectName("colormap")
        self.horizontalLayout.addWidget(self.colormap)
        self.widget = QtWidgets.QWidget(StageTwo)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox_4 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(3)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.widget_4 = QtWidgets.QWidget(self.groupBox_4)
        self.widget_4.setObjectName("widget_4")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.widget_4)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label = QtWidgets.QLabel(self.widget_4)
        self.label.setObjectName("label")
        self.gridLayout_3.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.widget_4)
        self.label_2.setObjectName("label_2")
        self.gridLayout_3.addWidget(self.label_2, 1, 0, 1, 1)
        self.smoothSigma = QtWidgets.QDoubleSpinBox(self.widget_4)
        self.smoothSigma.setMinimum(1.0)
        self.smoothSigma.setMaximum(10.0)
        self.smoothSigma.setSingleStep(0.1)
        self.smoothSigma.setObjectName("smoothSigma")
        self.gridLayout_3.addWidget(self.smoothSigma, 0, 1, 1, 1)
        self.smoothWindow = QtWidgets.QDoubleSpinBox(self.widget_4)
        self.smoothWindow.setMinimum(1.0)
        self.smoothWindow.setMaximum(10.0)
        self.smoothWindow.setSingleStep(0.1)
        self.smoothWindow.setObjectName("smoothWindow")
        self.gridLayout_3.addWidget(self.smoothWindow, 1, 1, 1, 1)
        self.verticalLayout_6.addWidget(self.widget_4)
        self.smoothApply = QtWidgets.QPushButton(self.groupBox_4)
        self.smoothApply.setEnabled(False)
        self.smoothApply.setObjectName("smoothApply")
        self.verticalLayout_6.addWidget(self.smoothApply)
        self.verticalLayout.addWidget(self.groupBox_4)
        self.groupBox_2 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget_2 = QtWidgets.QWidget(self.groupBox_2)
        self.widget_2.setObjectName("widget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget_2)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.denoiseFactor = QtWidgets.QSlider(self.widget_2)
        self.denoiseFactor.setOrientation(QtCore.Qt.Horizontal)
        self.denoiseFactor.setTickPosition(QtWidgets.QSlider.TicksAbove)
        self.denoiseFactor.setObjectName("denoiseFactor")
        self.gridLayout_2.addWidget(self.denoiseFactor, 0, 0, 1, 1)
        self.denoiseFactor_2 = QtWidgets.QSpinBox(self.widget_2)
        self.denoiseFactor_2.setObjectName("denoiseFactor_2")
        self.gridLayout_2.addWidget(self.denoiseFactor_2, 0, 1, 1, 1)
        self.denoiseThreshold = QtWidgets.QSlider(self.widget_2)
        self.denoiseThreshold.setOrientation(QtCore.Qt.Horizontal)
        self.denoiseThreshold.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.denoiseThreshold.setObjectName("denoiseThreshold")
        self.gridLayout_2.addWidget(self.denoiseThreshold, 1, 0, 1, 1)
        self.denoiseThreshold_2 = QtWidgets.QSpinBox(self.widget_2)
        self.denoiseThreshold_2.setObjectName("denoiseThreshold_2")
        self.gridLayout_2.addWidget(self.denoiseThreshold_2, 1, 1, 1, 1)
        self.verticalLayout_5.addWidget(self.widget_2)
        self.denoiseApply = QtWidgets.QPushButton(self.groupBox_2)
        self.denoiseApply.setEnabled(False)
        self.denoiseApply.setObjectName("denoiseApply")
        self.verticalLayout_5.addWidget(self.denoiseApply)
        self.verticalLayout.addWidget(self.groupBox_2)
        self.groupBox = QtWidgets.QGroupBox(self.widget)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pushButtonEnhance = QtWidgets.QPushButton(self.groupBox)
        self.pushButtonEnhance.setObjectName("pushButtonEnhance")
        self.verticalLayout_3.addWidget(self.pushButtonEnhance)
        self.verticalLayout.addWidget(self.groupBox)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.pushButtonPreview = QtWidgets.QPushButton(self.widget)
        self.pushButtonPreview.setObjectName("pushButtonPreview")
        self.verticalLayout.addWidget(self.pushButtonPreview)
        self.pushButtonNext = QtWidgets.QPushButton(self.widget)
        self.pushButtonNext.setObjectName("pushButtonNext")
        self.verticalLayout.addWidget(self.pushButtonNext)
        self.horizontalLayout.addWidget(self.widget)

        self.retranslateUi(StageTwo)
        self.denoiseFactor.valueChanged['int'].connect(StageTwo.setDenoiseFactor)
        self.denoiseFactor_2.valueChanged['int'].connect(StageTwo.setDenoiseFactor)
        self.denoiseThreshold.valueChanged['int'].connect(StageTwo.setDenoiseThreshold)
        self.denoiseThreshold_2.valueChanged['int'].connect(StageTwo.setDenoiseThreshold)
        QtCore.QMetaObject.connectSlotsByName(StageTwo)

    def retranslateUi(self, StageTwo):
        _translate = QtCore.QCoreApplication.translate
        StageTwo.setWindowTitle(_translate("StageTwo", "Form"))
        self.comboBoxOrientation.setItemText(0, _translate("StageTwo", "AXIAL"))
        self.comboBoxOrientation.setItemText(1, _translate("StageTwo", "SAGITTAL"))
        self.comboBoxOrientation.setItemText(2, _translate("StageTwo", "CORONAL"))
        self.toolButtonZoomIn.setText(_translate("StageTwo", "+"))
        self.toolButtonZoomOut.setText(_translate("StageTwo", "-"))
        self.groupBox_4.setTitle(_translate("StageTwo", "Сглаживание"))
        self.label.setText(_translate("StageTwo", "Сигма"))
        self.label_2.setText(_translate("StageTwo", "Окно"))
        self.smoothApply.setText(_translate("StageTwo", "Применить"))
        self.groupBox_2.setTitle(_translate("StageTwo", "Анизотропная фильтрация"))
        self.denoiseApply.setText(_translate("StageTwo", "Применить"))
        self.groupBox.setTitle(_translate("StageTwo", "Повысить резкость"))
        self.pushButtonEnhance.setText(_translate("StageTwo", "Применить"))
        self.pushButtonPreview.setText(_translate("StageTwo", "Предпросмотр"))
        self.pushButtonNext.setText(_translate("StageTwo", "Далее →"))




class Ui_Threshold(object):
    def setupUi(self, Threshold):
        Threshold.setObjectName("Threshold")
        Threshold.resize(669, 589)
        self.verticalLayout = QtWidgets.QVBoxLayout(Threshold)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(Threshold)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.sbLevelMax = QtWidgets.QSpinBox(self.widget)
        self.sbLevelMax.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.sbLevelMax.setMinimum(-50000)
        self.sbLevelMax.setMaximum(50000)
        self.sbLevelMax.setSingleStep(1)
        self.sbLevelMax.setObjectName("sbLevelMax")
        self.verticalLayout_2.addWidget(self.sbLevelMax)
        self.sbLevelMin = QtWidgets.QSpinBox(self.widget)
        self.sbLevelMin.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.sbLevelMin.setMinimum(-50000)
        self.sbLevelMin.setMaximum(50000)
        self.sbLevelMin.setObjectName("sbLevelMin")
        self.verticalLayout_2.addWidget(self.sbLevelMin)
        self.verticalLayout.addWidget(self.widget)
        self.slider = ThresholdSlider(Threshold)
        self.slider.setObjectName("slider")
        self.verticalLayout.addWidget(self.slider)

        self.retranslateUi(Threshold)
        QtCore.QMetaObject.connectSlotsByName(Threshold)

    def retranslateUi(self, Threshold):
        _translate = QtCore.QCoreApplication.translate
        Threshold.setWindowTitle(_translate("Threshold", "Form"))




class Ui_View2D(object):
    def setupUi(self, View2D):
        View2D.setObjectName("View2D")
        View2D.resize(900, 53)
        self.layout = QtWidgets.QVBoxLayout(View2D)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(3)
        self.layout.setObjectName("layout")
        self.widget_2 = QtWidgets.QWidget(View2D)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(4)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tbTools = QtWidgets.QToolButton(self.widget_2)
        self.tbTools.setText("")
        self.tbTools.setCheckable(True)
        self.tbTools.setArrowType(QtCore.Qt.DownArrow)
        self.tbTools.setObjectName("tbTools")
        self.horizontalLayout.addWidget(self.tbTools)
        self.widget = QtWidgets.QWidget(self.widget_2)
        self.widget.setObjectName("widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.sSlice = QtWidgets.QSlider(self.widget)
        self.sSlice.setMaximum(8999)
        self.sSlice.setOrientation(QtCore.Qt.Horizontal)
        self.sSlice.setTickPosition(QtWidgets.QSlider.TicksAbove)
        self.sSlice.setObjectName("sSlice")
        self.horizontalLayout_2.addWidget(self.sSlice)
        self.sbSlice = QtWidgets.QSpinBox(self.widget)
        self.sbSlice.setMaximumSize(QtCore.QSize(25, 16777215))
        self.sbSlice.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.sbSlice.setMaximum(8999)
        self.sbSlice.setObjectName("sbSlice")
        self.horizontalLayout_2.addWidget(self.sbSlice)
        self.horizontalLayout.addWidget(self.widget)
        self.layout.addWidget(self.widget_2)
        self.tools = QtWidgets.QWidget(View2D)
        self.tools.setObjectName("tools")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.tools)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.toolButtonPan = CustomToolButton(self.tools)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/pan.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButtonPan.setIcon(icon)
        self.toolButtonPan.setCheckable(True)
        self.toolButtonPan.setObjectName("toolButtonPan")
        self.buttonGroup = QtWidgets.QButtonGroup(View2D)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.toolButtonPan)
        self.horizontalLayout_3.addWidget(self.toolButtonPan)
        self.toolButtonRotate = CustomToolButton(self.tools)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/rotate.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButtonRotate.setIcon(icon1)
        self.toolButtonRotate.setCheckable(True)
        self.toolButtonRotate.setObjectName("toolButtonRotate")
        self.buttonGroup.addButton(self.toolButtonRotate)
        self.horizontalLayout_3.addWidget(self.toolButtonRotate)
        self.toolButtonZoom = CustomToolButton(self.tools)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/zoom.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButtonZoom.setIcon(icon2)
        self.toolButtonZoom.setCheckable(True)
        self.toolButtonZoom.setObjectName("toolButtonZoom")
        self.buttonGroup.addButton(self.toolButtonZoom)
        self.horizontalLayout_3.addWidget(self.toolButtonZoom)
        self.tbDistanceMeasurer = QtWidgets.QToolButton(self.tools)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/DistanceMeasurer.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tbDistanceMeasurer.setIcon(icon3)
        self.tbDistanceMeasurer.setCheckable(True)
        self.tbDistanceMeasurer.setObjectName("tbDistanceMeasurer")
        self.horizontalLayout_3.addWidget(self.tbDistanceMeasurer)
        self.tbAngleMeasurer = QtWidgets.QToolButton(self.tools)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/AngleMeasurer.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tbAngleMeasurer.setIcon(icon4)
        self.tbAngleMeasurer.setCheckable(True)
        self.tbAngleMeasurer.setObjectName("tbAngleMeasurer")
        self.horizontalLayout_3.addWidget(self.tbAngleMeasurer)
        self.toolButtonLineProbe = QtWidgets.QToolButton(self.tools)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/histogram.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButtonLineProbe.setIcon(icon5)
        self.toolButtonLineProbe.setCheckable(True)
        self.toolButtonLineProbe.setObjectName("toolButtonLineProbe")
        self.horizontalLayout_3.addWidget(self.toolButtonLineProbe)
        spacerItem = QtWidgets.QSpacerItem(739, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.layout.addWidget(self.tools)

        self.retranslateUi(View2D)
        self.tbTools.toggled['bool'].connect(self.tools.setVisible)
        QtCore.QMetaObject.connectSlotsByName(View2D)

    def retranslateUi(self, View2D):
        _translate = QtCore.QCoreApplication.translate
        View2D.setWindowTitle(_translate("View2D", "Form"))
        self.toolButtonPan.setText(_translate("View2D", "..."))
        self.toolButtonRotate.setText(_translate("View2D", "..."))
        self.toolButtonZoom.setText(_translate("View2D", "..."))
        self.tbDistanceMeasurer.setText(_translate("View2D", "Ruler"))
        self.tbAngleMeasurer.setText(_translate("View2D", "..."))
        self.toolButtonLineProbe.setText(_translate("View2D", "..."))




class Ui_View3D(object):
    def setupUi(self, View3D):
        View3D.setObjectName("View3D")
        View3D.resize(800, 600)
        self.layout = QtWidgets.QHBoxLayout(View3D)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(3)
        self.layout.setObjectName("layout")

        self.retranslateUi(View3D)
        QtCore.QMetaObject.connectSlotsByName(View3D)

    def retranslateUi(self, View3D):
        _translate = QtCore.QCoreApplication.translate
        View3D.setWindowTitle(_translate("View3D", "Form"))





class Colormap(QWidget):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        from ..views.colormap_ui import Ui_Colormap
        self.ui = Ui_Colormap()
        self.ui.setupUi(self)

        self.setDisabled(True)

        self.setMaximumWidth(86)

        self.imageModel = imageModel
        self.imageModel.imageLoaded.connect(self.loadImage)

        self.planeModel = planeModel
        self.planeModel.cmapUpdated.connect(self.updateCmap)
        self.planeModel.levelUpdated.connect(self.updateLevel)
        self.planeModel.windowUpdated.connect(self.updateWindow)

    @pyqtSlot(bool)
    def setCmapHidden(self, toggle):
        self.ui.comboBoxCmap.setHidden(toggle)

    @pyqtSlot(str)
    def setCmap(self, cmap_name):
        if self.planeModel:
            self.planeModel.cmap = cmap_name

    @pyqtSlot(int)
    def setLevel(self, level):
        if self.planeModel:
            self.planeModel.level = level

    @pyqtSlot(int)
    def setWindow(self, window):
        if self.planeModel:
            self.planeModel.window = window

    @pyqtSlot()
    def loadImage(self):
        self.setEnabled(True)

        for color_name in color.cmaps():
            self.ui.comboBoxCmap.addItem(color_name)

        self.updateCmap()
        self.updateLevel()
        self.updateWindow()

        self.ui.spinBoxLevel.setRange(-2048, 2048)
        self.ui.spinBoxWindow.setRange(255, 4096)

        print("{} image loaded".format(self.objectName()))

    @pyqtSlot()
    def updateCmap(self):
        cmap_name = self.planeModel.cmap

        if self.ui.comboBoxCmap.currentText() != cmap_name:
            self.ui.comboBoxCmap.setCurrentText(cmap_name)

        self.ui.bar.setCmap(color.cmap(cmap_name))
        print("{} set: {}".format(self.objectName(), cmap_name))

    @pyqtSlot()
    def updateLevel(self):
        level = self.planeModel.level

        if self.ui.slider.getLevel() != level:
            self.ui.slider.setLevel(level)
        if self.ui.spinBoxLevel.value() != level:
            self.ui.spinBoxLevel.setValue(level)

    @pyqtSlot()
    def updateWindow(self):
        window = self.planeModel.window

        if self.ui.slider.getWindow() != window:
            self.ui.slider.setWindow(window)
        if self.ui.spinBoxWindow.value() != window:
            self.ui.spinBoxWindow.setValue(window)


class DensityWindowSlider(QWidget):
    windowChanged = pyqtSignal(int)
    levelChanged = pyqtSignal(int)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._levelChanged = 50
        self._window = 400

        self._densities = [-2048, 2048]

        self._click_type = None
        self._click_pos = None

        self._coordinates = {}

        self._font = QFont('Decorative', 7)
        fmw = QFontMetrics(self._font).width(str(self.getDensityMin()))
        self.setMinimumWidth(fmw + 20)
        self.setMaximumWidth(fmw + 20)

    def mousePressEvent(self, event):
        if (event.buttons() == Qt.LeftButton):
            self._click_pos = event.y()
            self._click_type = self.getPixType(event.y())

    def mouseReleaseEvent(self, event):
        self._click_pos = None
        self._click_type = None

    def mouseMoveEvent(self, event):
        if (self._click_type == 1):
            self.moveWindowMax(self._click_pos - event.y())
        elif (self._click_type == 2):
            self.moveWindow(self._click_pos - event.y())
        elif (self._click_type == 3):
            self.moveWindowMin(self._click_pos - event.y())
        self._click_pos = event.y()

    def moveWindow(self, y):
        pix = self.getPixelByDensity(self.getLevel()) - y
        if (pix < 0):
            pix = 0
        if (pix > self.height() - 1):
            pix = self.height() - 1

        wc = self._coordinates[pix]
        self.setLevel(wc)

    def moveWindowMin(self, y):
        pix_size = self.height() / sum(map(abs, self.getDensities()))
        ww = int(self.getWindow() - (y / pix_size) * 2)
        self.setWindow(ww)

    def moveWindowMax(self, y):
        pix_size = self.height() / sum(map(abs, self.getDensities()))
        ww = int(self.getWindow() + (y / pix_size) * 2)
        self.setWindow(ww)

    def paintEvent(self, event):
        w = self.width()
        h = self.height()

        qp = QPainter(self)

        qp.setFont(self._font)
        self._fh = QFontMetrics(self._font).height()

        self.updateCoordinates()

        for p in self._coordinates:
            if ((self._coordinates[p] % 500) == 0):
                qp.drawLine(0, p, 15, p)
                
                txt = self._coordinates[p]
                if txt == 2000:
                    txt = 1000
                elif txt == 1500:
                    txt = 750
                elif txt == 1000:
                    txt = 500
                elif txt == 500:
                    txt = 250
                elif txt == -500:
                    txt = -250
                elif txt == -1000:
                    txt = -500
                elif txt == -1500:
                    txt = -750
                elif txt == -2000:
                    txt = -1000

                qp.drawText(QRectF(20, p - (self._fh / 2), w, h),
                            Qt.AlignLeft, str(txt))
            elif ((self._coordinates[p] % 100) == 0):
                qp.drawLine(0, p, 5, p)

        self.updateWindowVars()

        qp.setPen(QColor(20, 20, 140))
        qp.setBrush(QColor(20, 20, 140, 70))
        qp.drawRect(0, self.window_x, 15, self.window_h)

        qp.setPen(QColor(20, 20, 140))
        qp.setBrush(QColor(20, 20, 140, 70))
        qp.drawRect(0, self.window_x, 15, 5)
        qp.drawRect(0, self.window_x + self.window_h - 5, 15, 5)

    def getPixelByDensity(self, density):
        h = min(self._coordinates.values(), key=lambda x: abs(x - density))
        return list(self._coordinates.keys())[list(self._coordinates.values()).index(h)]

    def getPixType(self, y):
        if (y > self.window_x and (y < self.window_x + 5)):
            return 1
        elif (y > self.window_x + 5 and (y < self.window_x + self.window_h - 5)):
            return 2
        elif ((y > (self.window_x + self.window_h - 5)) and (y < self.window_x + self.window_h)):
            return 3
        else:
            return 0

    def updateWindowVars(self):
        self.window_x = self.getPixelByDensity(
            self._levelChanged + self._window / 2)
        self.window_h = self.getPixelByDensity(
            self._levelChanged - self._window / 2) - self.window_x

    def updateCoordinates(self):
        self._coordinates = {}

        w = self.width()
        h = self.height()

        pix_size = h / sum(map(abs, self.getDensities()))

        text1 = self.getDensityMax() - (self.getDensityMax() % 500)
        # координаты значений
        for p1 in range(int((self.getDensityMax() % 500) * pix_size), h, int(500 * pix_size)):
            self._coordinates[p1] = text1

            text2 = text1
            for g in range(100, 500, 100):
                text2 -= 100
                p2 = int(p1 + (g * pix_size))
                if p2 > h:
                    break
                self._coordinates[p2] = text2

            text1 -= 500

        for p3 in range(0, h):
            if p3 not in self._coordinates:
                density = self.getDensityMax() - int(p3 / pix_size)
                if (density % 100) == 0:
                    density = round(self.getDensityMax() - (p3 / pix_size)) - 1
                self._coordinates[p3] = density

    @pyqtSlot(int)
    def setLevel(self, val):
        center_min = self.getDensityMin() + self.getWindow() / 2
        center_max = self.getDensityMax() - self.getWindow() / 2

        if (val < center_min):
            val = center_min
        if (val > center_max):
            val = center_max

        self._levelChanged = val
        self.levelChanged.emit(val)
        self.update()

    @pyqtSlot(int)
    def setWindow(self, val):
        if (val < 255):
            val = 255

        self._window = val
        self.windowChanged.emit(val)
        self.update()

    def getLevel(self):
        return self._levelChanged

    def getWindow(self):
        return self._window

    def getDensities(self):
        return self._densities

    def getDensityMin(self):
        return self._densities[0]

    def getDensityMax(self):
        return self._densities[1]

    def setDensities(self, densities=[]):
        self._densities = densities
        self.update()


class ScalarBarWidget(QWidget):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._lookup_table = None
        self._densities = [0, 0]

    def setCmap(self, lut):
        self._lookup_table = lut
        self._densities = list(map(int, self._lookup_table.GetTableRange()))

        self._font = QFont('Decorative', 8)
        self._fm = QFontMetrics(self._font)
        self._fmw = self._fm.width(str(self._densities[0]))
        self._fmh = self._fm.height()
        self.setMinimumWidth(self._fmw + 15)
        self.setMaximumWidth(self._fmw + 15)

        self.update()

    def drawText(self, qp):
        d = (self._densities[1] - self._densities[0])

        txt = str(self._densities[1])
        txt_w = self._fm.width(txt)
        x = 0
        y = 0
        w = self.width()
        h = self._fmh
        qp.setPen(QColor(255, 255, 255))
        qp.setBrush(QColor(255, 255, 255))
        qp.drawRect(w - txt_w - 2, y, w, h)
        qp.setPen(QColor(0, 0, 0))
        qp.drawText(x, y, w, h, Qt.AlignRight, str(1000))

        txt = str(int(self._densities[1] - d * 0.25))
        txt_w = self._fm.width(txt)
        x = 0
        y = self.height() * 0.25 - self._fmh / 2
        w = self.width()
        h = self._fmh
        qp.setPen(QColor(255, 255, 255))
        qp.setBrush(QColor(255, 255, 255))
        qp.drawRect(w - txt_w - 2, y, w, h)
        qp.setPen(QColor(0, 0, 0))
        qp.drawText(x, y, w, h, Qt.AlignRight, str(500))

        txt = str(int(self._densities[1] - d * 0.5))
        txt_w = self._fm.width(txt)
        x = 0
        y = self.height() * 0.5 - self._fmh / 2
        w = self.width()
        h = self._fmh
        qp.setPen(QColor(255, 255, 255))
        qp.setBrush(QColor(255, 255, 255))
        qp.drawRect(w - txt_w - 2, y, w, h)
        qp.setPen(QColor(0, 0, 0))
        qp.drawText(x, y, w, h, Qt.AlignRight, txt)

        txt = str(int(self._densities[1] - d * 0.75))
        txt_w = self._fm.width(txt)
        x = 0
        y = self.height() * 0.75 - self._fmh / 2
        w = self.width()
        h = self._fmh
        qp.setPen(QColor(255, 255, 255))
        qp.setBrush(QColor(255, 255, 255))
        qp.drawRect(w - txt_w - 2, y, w, h)
        qp.setPen(QColor(0, 0, 0))
        qp.drawText(x, y, w, h, Qt.AlignRight, str(-500))

        txt = str(self._densities[0])
        txt_w = self._fm.width(txt)
        x = 0
        y = self.height() - self._fmh
        w = self.width()
        h = self._fmh
        qp.setPen(QColor(255, 255, 255))
        qp.setBrush(QColor(255, 255, 255))
        qp.drawRect(w - txt_w - 2, y, w, h)
        qp.setPen(QColor(0, 0, 0))
        qp.drawText(x, y, w, h, Qt.AlignRight, str(-1000))

    def paintEvent(self, event):
        if self._lookup_table is None:
            return

        qp = QPainter(self)

        w = self.width()
        h = self.height()

        g = self._lookup_table.GetNumberOfAvailableColors() / h

        for y in range(h):
            color = self._lookup_table.GetTable().GetTuple4(int(y * g))
            qp.setPen(QColor(color[0], color[1], color[2], color[3]))
            qp.drawLine(0, h - y, w, h - y)

        self.drawText(qp)


class WindowLevelSlider(QWidget):
    CLICK_TYPE_WINDOW_MAX = 0
    CLICK_TYPE_WINDOW_BODY = 1
    CLICK_TYPE_WINDOW_MIN = 2

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._click_pos = None
        self._click_type = None
        self._font = QFont('Decorative', 7)
        self._coordinates = {}
        self._window_x = 0
        self._window_h = 0

        fmw = QFontMetrics(self.font).width('-1024')
        self.setMinimumWidth(fmw + 20)
        self.setMaximumWidth(fmw + 20)

    def mousePressEvent(self, event):
        if (event.buttons() == Qt.LeftButton):
            self.click_pos = event.y()
            self.click_type = event.y()

    def mouseReleaseEvent(self, event):
        self.click_pos = None
        self.click_type = None

    def mouseMoveEvent(self, event):
        if WindowLevelSlider.CLICK_TYPE_WINDOW_MAX is self.click_type:
            self.moveWindowMax(self.click_pos - event.y())
        elif WindowLevelSlider.CLICK_TYPE_WINDOW_BODY is self.click_type:
            self.moveWindow(self.click_pos - event.y())
        elif WindowLevelSlider.CLICK_TYPE_WINDOW_MIN is self._click_type:
            self.moveWindowMin(self.click_pos - event.y())
        self.click_pos = event.y()

    @property
    def click_pos(self):
        return self._click_pos

    @click_pos.setter
    def click_pos(self, value):
        self._click_pos = value

    @property
    def click_type(self):
        return self._click_type

    @click_type.setter
    def click_type(self, value):
        if (value > self.window_x and (value < self.window_x + 5)):
            self._click_type = WindowLevelSlider.CLICK_TYPE_WINDOW_MAX
        elif (value > self.window_x + 5 and (value < self.window_x + self.window_h - 5)):
            self._click_type = WindowLevelSlider.CLICK_TYPE_WINDOW_BODY
        elif ((value > (self.window_x + self.window_h - 5)) and (value < self.window_x + self.window_h)):
            self._click_type = WindowLevelSlider.CLICK_TYPE_WINDOW_MIN
        else:
            self._click_type = None

    @property
    def window(self):
        return 400

    @property
    def level(self):
        return 50

    @property
    def font(self):
        return self._font

    @property
    def coordinates(self):
        self._coordinates = {}

        w = self.width()
        h = self.height()

        pix_size = h / sum(map(abs, [-1024, 1024]))

        text1 = 1024 - (1024 % 500)
        for p1 in range(int((1024 % 500) * pix_size), h, int(500 * pix_size)):
            self._coordinates[p1] = text1

            text2 = text1
            for g in range(100, 500, 100):
                text2 -= 100
                p2 = int(p1 + (g * pix_size))
                if p2 > h:
                    break
                self._coordinates[p2] = text2

            text1 -= 500

        for p3 in range(0, h):
            if p3 not in self._coordinates:
                density = 1024 - int(p3 / pix_size)
                if (density % 100) == 0:
                    density = round(1024 - (p3 / pix_size)) - 1
                self._coordinates[p3] = density

        return self._coordinates

    @property
    def window_x(self):
        self._window_x = self.getPixelByDensity(self.level + self.window / 2)

        return self._window_x

    @property
    def window_h(self):
        self._window_h = self.getPixelByDensity(
            self.level - self.window / 2) - self.window_x

        return self._window_h

    def getPixelByDensity(self, density):
        h = min(self.coordinates.values(), key=lambda x: abs(x - density))

        return list(self.coordinates.keys())[list(self.coordinates.values()).index(h)]

    def moveWindow(self, y):
        pix = self.getPixelByDensity(self.getLevel()) - y
        if (pix < 0):
            pix = 0
        if (pix > self.height() - 1):
            pix = self.height() - 1

        wc = self._coordinates[pix]
        self.setLevel(wc)

    def paintEvent(self, event):
        w = self.width()
        h = self.height()

        qp = QPainter(self)

        qp.setFont(self.font)
        self._fh = QFontMetrics(self.font).height()

        for p in self.coordinates:
            if ((self.coordinates[p] % 500) == 0):
                qp.drawLine(0, p, 15, p)

                txt = self._coordinates[p]
                qp.drawText(QRectF(20, p - (self._fh / 2), w, h),
                            Qt.AlignLeft, str(txt))
            elif ((self._coordinates[p] % 100) == 0):
                qp.drawLine(0, p, 5, p)

        qp.setPen(QColor(20, 20, 140))
        qp.setBrush(QColor(20, 20, 140, 70))
        qp.drawRect(0, self.window_x, 15, self.window_h)

        qp.setPen(QColor(20, 20, 140))
        qp.setBrush(QColor(20, 20, 140, 70))
        qp.drawRect(0, self.window_x, 15, 5)
        qp.drawRect(0, self.window_x + self.window_h - 5, 15, 5)


class ScalarBarWidget(QWidget):

    def __init__(self, parent=None):
        super().__init__(parent=parent)


if __name__ == "__main__":
    import sys
    from PyQt5.QtWidgets import QApplication

    app = QApplication(sys.argv)

    slider = WindowLevelSlider()
    slider.showMaximized()

    sys.exit(app.exec_())




class CutTools(QWidget, Ui_CutTools):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.wPolyline.setVisible(False)
        self.wRect.setVisible(False)
        self.wCircle.setVisible(False)
        self.wCube.setVisible(False)
        self.wSphere.setVisible(False)
        self.wPlane.setVisible(False)

        self.editorModel = editorModel
        self.editorModel.propSelected.connect(self.selectProp)
        self.editorModel.cutterPolyline.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterRect.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterCircle.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterCube.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterSphere.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterPlane.toolUpdated.connect(self.updateTool)

        self.selectProp()
        self.updateTool()

    def setModel(self, model):
        self.editorModel = model
        self.editorModel.propSelected.connect(self.selectProp)
        self.editorModel.cutterPolyline.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterRect.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterCube.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterCircle.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterSphere.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterPlane.toolUpdated.connect(self.updateTool)

        self.selectProp()
        self.updateTool()

    def selectProp(self):
        toggle = bool(self.editorModel.prop)
        self.pbPolyline.setEnabled(toggle)
        self.pbRect.setEnabled(toggle)
        self.pbCircle.setEnabled(toggle)
        self.pbCube.setEnabled(toggle)
        self.pbSphere.setEnabled(toggle)
        self.pbPlane.setEnabled(toggle)

    def updateTool(self):
        self.buttonGroup.setExclusive(False)
        self.pbPolyline.setChecked(self.editorModel.cutterPolyline.toggle)
        self.pbRect.setChecked(self.editorModel.cutterRect.toggle)
        self.pbCircle.setChecked(self.editorModel.cutterCircle.toggle)
        self.pbCube.setChecked(self.editorModel.cutterCube.toggle)
        self.pbSphere.setChecked(self.editorModel.cutterSphere.toggle)
        self.pbPlane.setChecked(self.editorModel.cutterPlane.toggle)
        self.buttonGroup.setExclusive(True)

        if self.editorModel.cutterPolyline.inverse:
            self.rbPolylineInverseYes.setChecked(True)
        else:
            self.rbPolylineInverseNo.setChecked(True)

        if self.editorModel.cutterRect.inverse:
            self.rbRectInverseYes.setChecked(True)
        else:
            self.rbRectInverseNo.setChecked(True)

        if self.editorModel.cutterCube.inverse:
            self.rbCubeInverseYes.setChecked(True)
        else:
            self.rbCubeInverseNo.setChecked(True)

        if self.editorModel.cutterSphere.inverse:
            self.rbSphereInverseYes.setChecked(True)
        else:
            self.rbSphereInverseNo.setChecked(True)

        self.wPolyline.setVisible(self.editorModel.cutterPolyline.toggle)
        self.wRect.setVisible(self.editorModel.cutterRect.toggle)
        self.wCircle.setVisible(self.editorModel.cutterCircle.toggle)
        self.wCube.setVisible(self.editorModel.cutterCube.toggle)
        self.wSphere.setVisible(self.editorModel.cutterSphere.toggle)
        self.wPlane.setVisible(self.editorModel.cutterPlane.toggle)

    @pyqtSlot(bool)
    def on_pbPolyline_toggled(self, toggle):
        self.editorModel.cutterPolyline.toggle = toggle

    @pyqtSlot(QAbstractButton)
    def on_bgPolylineInverse_buttonClicked(self, btn):
        inverse = self._getInverse(btn)
        self.editorModel.cutterPolyline.inverse = inverse

    @pyqtSlot()
    def on_pbPolylineCut_pressed(self):
        print('polyline cut')
        self.editorModel.cutterPolyline.cut()

        if self.checkBoxClose.isChecked():
            prop = self.editorModel.prop
            if prop in self.editorModel.props:
                mesh = self.editorModel.props[prop].mesh
                mesh.close_mesh(inplace=True)

    @pyqtSlot(bool)
    def on_pbRect_toggled(self, toggle):
        self.editorModel.cutterRect.toggle = toggle

    @pyqtSlot(bool)
    def on_pbCircle_toggled(self, toggle):
        self.editorModel.cutterCircle.toggle = toggle

    @pyqtSlot(QAbstractButton)
    def on_bgRectInverse_buttonClicked(self, btn):
        inverse = self._getInverse(btn)
        self.editorModel.cutterRect.inverse = inverse

    @pyqtSlot()
    def on_pbRectCut_pressed(self):
        print('rect cut')
        self.editorModel.cutterRect.cut()

        if self.checkBoxClose.isChecked():
            prop = self.editorModel.prop
            if prop in self.editorModel.props:
                mesh = self.editorModel.props[prop].mesh
                mesh.close_mesh(inplace=True)

    @pyqtSlot()
    def on_pbCircleCut_pressed(self):
        print('circle cut')
        self.editorModel.cutterCircle.cut()

        if self.checkBoxClose.isChecked():
            prop = self.editorModel.prop
            if prop in self.editorModel.props:
                mesh = self.editorModel.props[prop].mesh
                mesh.close_mesh(inplace=True)

    @pyqtSlot(bool)
    def on_pbCube_toggled(self, toggle):
        self.editorModel.cutterCube.toggle = toggle

    @pyqtSlot(QAbstractButton)
    def on_bgCubeInverse_buttonClicked(self, btn):
        inverse = self._getInverse(btn)
        self.editorModel.cutterCube.inverse = inverse

    @pyqtSlot()
    def on_pbCubeCut_pressed(self):
        print('cube cut')
        self.editorModel.cutterCube.cut()

        if self.checkBoxClose.isChecked():
            prop = self.editorModel.prop
            if prop in self.editorModel.props:
                mesh = self.editorModel.props[prop].mesh
                mesh.close_mesh(inplace=True)

    @pyqtSlot(bool)
    def on_pbSphere_toggled(self, toggle):
        self.editorModel.cutterSphere.toggle = toggle

    @pyqtSlot(QAbstractButton)
    def on_bgSphereInverse_buttonClicked(self, btn):
        inverse = self._getInverse(btn)
        self.editorModel.cutterSphere.inverse = inverse

    @pyqtSlot()
    def on_pbSphereCut_pressed(self):
        print('sphere cut')
        self.editorModel.cutterSphere.cut()

        if self.checkBoxClose.isChecked():
            prop = self.editorModel.prop
            if prop in self.editorModel.props:
                mesh = self.editorModel.props[prop].mesh
                mesh.close_mesh(inplace=True)

    @pyqtSlot(bool)
    def on_pbPlane_toggled(self, toggle):
        self.editorModel.cutterPlane.toggle = toggle

    @pyqtSlot()
    def on_pbPlaneCut_pressed(self):
        print('plane cut')
        self.editorModel.cutterPlane.close_mesh = self.checkBoxClose.isChecked()
        self.editorModel.cutterPlane.cut()

    def _getInverse(self, b):
        inverse = False
        if isinstance(b, QAbstractButton):
            if b.text() == 'Да':
                inverse = True
            else:
                inverse = False
        elif isinstance(b, QButtonGroup):
            if b.checkedButton().text() == 'Да':
                inverse = True
            else:
                inverse = False
        return inverse






if os.getenv('APPDATA'):
    if not os.path.exists(os.getenv('APPDATA') + '/cadsi/'):
        os.makedirs(os.getenv('APPDATA') + '/cadsi/')

    DATABASE_PATH = os.getenv('APPDATA') + '/cadsi/dicom.db'
else:
    DATABASE_PATH = 'dicom.db'


def adapt_array(arr):
    """
    http://stackoverflow.com/a/31312102/190597 (SoulNibbler)
    """
    out = io.BytesIO()
    numpy.save(out, arr)
    out.seek(0)
    return sqlite3.Binary(out.read())


def convert_array(text):
    out = io.BytesIO(text)
    out.seek(0)
    return numpy.load(out)


sqlite3.register_adapter(numpy.ndarray, adapt_array)
sqlite3.register_converter("array", convert_array)


class DICOMDatabaseDialog(QDialog, Ui_DICOMDatabaseDialog):
    slices = pyqtSignal(list)
    preview = pyqtSignal(numpy.ndarray)

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.setWindowFlags(
            self.windowFlags() | Qt.WindowMaximizeButtonHint | Qt.WindowMinimizeButtonHint)

        self.tableWidgetPatients.selectionModel().clearSelection()

        self._patient_uid = None
        self._series_instance_uid = None

        self._conn = sqlite3.connect(DATABASE_PATH,
                                     detect_types=sqlite3.PARSE_DECLTYPES)

        self._cur = self._conn.cursor()
        self._cur.execute('PRAGMA foreign_keys = ON')
        self._cur.execute(sql_create_patients_table)
        self._cur.execute(sql_create_series_table)
        self._cur.execute(sql_create_slices_table)

        self.updatePatients()
        self.updateSeries()
        self.updateSlices()

    def deleteNonSlices(self):
        rows = []
        for row in self._cur.execute('SELECT * FROM slices GROUP BY series_instance_uid'):
            if not os.path.isfile(row[0]):
                rows.append(row)
        for row in rows:
            self._cur.execute('DELETE FROM series WHERE series_instance_uid = ?',
                              (row[1],))


        self._conn.commit()


        if len(rows) > 0:
            self.updatePatients()
            self.updateSeries()
            self.updateSlices()

    def updatePatients(self):
        self.tableWidgetPatients.setRowCount(0)

        for row, patient in enumerate(self._cur.execute("SELECT * FROM patients")):
            self.tableWidgetPatients.insertRow(
                self.tableWidgetPatients.rowCount())
            for col, item in enumerate(patient):
                if col == 0:
                    patient_uid = item
                    continue
                if col == 4:
                    for ch in (("F", "Ж"), ("M", "М")):
                        item = item.replace(ch[0], ch[1])
                if col == 5:
                    pbd = str(item)
                    item = pbd[:4] + "/" + pbd[4:6] + "/" + pbd[6:8]

                item = QTableWidgetItem(str(item))
                self.tableWidgetPatients.setItem(row, col - 1, item)

                if col == 1:
                    item.setData(Qt.UserRole, patient_uid)

            cur = self._conn.cursor()
            r = cur.execute("""
                                SELECT COUNT(*)
                                FROM slices
                                JOIN series ON series.series_instance_uid = slices.series_instance_uid
                                WHERE series.patient_uid = ?
                            """, (patient_uid,))
            cnt = r.fetchone()[0]

            if cnt == 0:
                cur.execute("DELETE FROM patients WHERE patient_uid = ?", (patient_uid, ))
                self._conn.commit()
                self.updatePatients()

            item = QTableWidgetItem(str(cnt))
            self.tableWidgetPatients.setItem(row, col, item)

            btn = QPushButton()
            btn.pressed.connect(
                partial(self.deletePatient, patient_uid=patient_uid))
            btn.setIcon(QIcon(QPixmap(":/icons/delete.png")))
            self.tableWidgetPatients.setCellWidget(row, 7, btn)

        self.tableWidgetPatients.resizeColumnsToContents()
        self.tableWidgetPatients.resizeRowsToContents()
        self.tableWidgetPatients.horizontalHeader().setSectionResizeMode(5,
                                                                         QHeaderView.Stretch)

    def updateSeries(self):
        self.listWidgetSeries.clear()

        if self._patient_uid == None:
            return

        query = 'SELECT * FROM series WHERE patient_uid = ' + \
            str(self._patient_uid)

        for row, serie in enumerate(self._cur.execute(query)):
            item = QListWidgetItem(str(serie[4]))
            item.setData(Qt.UserRole, serie[0])
            icon = QIcon()

            if serie[7] is not None:
                height, width, channel = serie[7].shape
                bytesPerLine = 3 * width
                qImg = QImage(serie[7].data, width, height,
                              bytesPerLine, QImage.Format_RGB888)
            else:
                qImg = QImage(':/icons/photo.jpg')
            icon.addPixmap(QPixmap(qImg),
                           QIcon.Normal, QIcon.Off)
            item.setIcon(icon)
            ttip = "<b>Модальность:</b> " + serie[5] + "<br>" + \
                "<b>Дата:</b> " + serie[2][:4] + "-" + serie[2][4:6] + "-" + serie[2][6:8] + "<br>" + \
                "<b>Время:</b> " + serie[3][:2] + ":" + serie[3][2:4] + ":" + serie[2][4:6] + "<br>" + \
                "<b>Учреждение:</b> " + serie[6] + "<br>" + \
                "<b>Комментарии:</b> " + serie[4] + "<br>"
            item.setToolTip(ttip)
            self.listWidgetSeries.addItem(item)

    def updateSlices(self):
        self.deleteNonSlices()

        if self._series_instance_uid == None:
            self.widgetSlices.setSlices([])
            return

        self._cur.execute('SELECT slice_path FROM slices WHERE series_instance_uid = ?',
                          (self._series_instance_uid, ))
        self.widgetSlices.setSlices([x[0] for x in self._cur.fetchall()])

    @pyqtSlot(int)
    def deletePatient(self, patient_uid):
        self._cur.execute('DELETE FROM patients WHERE patient_uid = ?',
                          (patient_uid, ))
        self._conn.commit()

        self._patient_uid = None
        self._series_instance_uid = None

        self.updatePatients()
        self.updateSeries()
        self.updateSlices()

    @pyqtSlot(int, int)
    def on_tableWidgetPatients_cellClicked(self, row, column):
        patient_uid = self.tableWidgetPatients.item(row,
                                                    0).data(Qt.UserRole)
        if patient_uid == self._patient_uid:
            self.tableWidgetPatients.selectionModel().clearSelection()
            self._patient_uid = None
        else:
            self._patient_uid = patient_uid

        self._series_instance_uid = None

        self.updateSeries()
        self.updateSlices()

    @pyqtSlot(QListWidgetItem)
    def on_listWidgetSeries_itemClicked(self, item):
        series_instance_uid = item.data(Qt.UserRole)

        if series_instance_uid == self._series_instance_uid:
            self.listWidgetSeries.selectionModel().clearSelection()
            self._series_instance_uid = None
            self.pushButtonImport.setEnabled(False)
        else:
            self.pushButtonImport.setEnabled(True)
            self._series_instance_uid = series_instance_uid

        self.updateSlices()

    @pyqtSlot(QListWidgetItem)
    def on_listWidgetSeries_itemDoubleClicked(self, item):
        self._series_instance_uid = item.data(Qt.UserRole)
        self.on_pushButtonImport_pressed()

    @pyqtSlot()
    def on_pushButtonScan_pressed(self):
        dir_name = str(QFileDialog.getExistingDirectory(self,
                                                        'Открыть',
                                                        str(Path.home()),
                                                        QFileDialog.ShowDirsOnly))

        if dir_name:
            pd = QProgressDialog(self)
            pd.setMinimum(0)
            pd.setMaximum(0)
            pd.setValue(0)
            pd.resize(400, 100)
            pd.setLabel(QLabel("Чтение DICOM файлов...", pd))
            pd.show()

            thread = UpdateDatabase(self, dir_name)
            thread.finished.connect(pd.close)
            thread.finished.connect(self.updatePatients)
            thread.finished.connect(self.updateSeries)
            thread.finished.connect(self.updateSlices)
            thread.start()

    @pyqtSlot()
    def on_pushButtonImport_pressed(self):
        if self._series_instance_uid:
            self._cur.execute('SELECT slice_path FROM slices WHERE series_instance_uid = ?',
                              (self._series_instance_uid, ))
            slices = [x[0] for x in self._cur.fetchall()]
            self.slices.emit(slices)

            self._cur.execute('SELECT series_preview FROM series WHERE series_instance_uid = ?',
                              (self._series_instance_uid,))
            self.preview.emit(self._cur.fetchone()[0])

            self.close()

sql_create_patients_table = """ CREATE TABLE IF NOT EXISTS patients (
  patient_uid INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  patient_name VARCHAR(255) NULL,
  patient_age VARCHAR(255) NULL,
  patient_id VARCHAR(255) NULL,
  patient_sex VARCHAR(255) NULL,
  patient_birth_date VARCHAR(255) NULL,
  patient_comments VARCHAR(255) NULL,
  UNIQUE(patient_name, patient_age, patient_id, patient_sex, patient_birth_date, patient_comments) ON CONFLICT IGNORE
  )
"""

sql_create_series_table = """ CREATE TABLE IF NOT EXISTS series (
  series_instance_uid VARCHAR(255) NOT NULL,
  series_number VARCHAR(255) NULL,
  series_date VARCHAR(255) NULL,
  series_time VARCHAR(255) NULL,
  series_description VARCHAR(255) NULL,
  modality VARCHAR(255) NULL,
  institution_name VARCHAR(255) NULL,
  series_preview array NULL,
  patient_uid INTEGER NOT NULL,
  PRIMARY KEY (series_instance_uid),
  FOREIGN KEY (patient_uid) REFERENCES patients(patient_uid) ON DELETE CASCADE
  )
"""

sql_create_slices_table = """ CREATE TABLE IF NOT EXISTS slices (
  slice_path TEXT NOT NULL,
  series_instance_uid VARCHAR(255) NOT NULL,
  UNIQUE(slice_path) ON CONFLICT IGNORE,
  FOREIGN KEY (series_instance_uid) REFERENCES series(series_instance_uid) ON DELETE CASCADE
  )
"""


class UpdateDatabase(QThread):

    def __init__(self, parent, directory):
        super().__init__(parent)
        self.directory = directory

    def run(self):
        conn = sqlite3.connect(DATABASE_PATH,
                               detect_types=sqlite3.PARSE_DECLTYPES)
        cur = conn.cursor()

        patient_fields = [col[1] for col in cur.execute(
            "PRAGMA table_info('patients')") if col[1] not in ['patient_uid']]
        serie_fields = [col[1] for col in cur.execute(
            "PRAGMA table_info('series')") if col[1] not in []]

        # sql
        sql_select_from_patients = 'SELECT patient_uid FROM patients WHERE ' + \
            ' = ? AND '.join(patient_fields) + ' = ?'
        sql_insert_into_patients = 'INSERT INTO patients(' + ', '.join(
            patient_fields) + ') VALUES(' + ', '.join(['?'] * len(patient_fields)) + ')'
        sql_insert_into_series = 'INSERT INTO series(' + ', '.join(
            serie_fields) + ') VALUES(' + ', '.join(['?'] * len(serie_fields)) + ')'

        series_raw = dicom.scan_directory(self.directory)

        series = []
        for item in series_raw.items():
            slice_path = item[0]
            serie_raw = item[1]

            series_instance_uid = serie_raw.get('series_instance_uid')
            if not series_instance_uid:
                continue
            if series_instance_uid not in series:
                series.append(series_instance_uid)

            # patient to db
            patient = tuple(
                map(lambda x: str(serie_raw.get(x, '')), patient_fields))
            cur.execute(sql_select_from_patients, patient)
            try:
                serie_raw['patient_uid'] = cur.fetchone()[0]
            except TypeError:
                cur.execute(sql_insert_into_patients, patient)
                serie_raw['patient_uid'] = cur.lastrowid

            # serie to db

            serie = tuple(
                map(lambda x: str(serie_raw.get(x, '')), serie_fields))
            cur.execute(
                'SELECT * FROM series WHERE series_instance_uid = ?', (series_instance_uid, ))
            if cur.fetchone() is None:
                cur.execute(sql_insert_into_series, serie)

            # slice to db
            cur.execute(
                'INSERT INTO slices(slice_path, series_instance_uid) VALUES(?, ?)', (slice_path, series_instance_uid))

        conn.commit()

        renderer = vtk.vtkRenderer()
        render_window = vtk.vtkRenderWindow()
        render_window.SetOffScreenRendering(1)
        render_window.AddRenderer(renderer)
        render_window.SetSize(512, 512)

        camera = renderer.GetActiveCamera()
        camera.SetPosition(0, -1.0, 0)
        camera.SetFocalPoint(0, 0.0, 0)

        # сортировка слайсов и добавление изображения
        for series_instance_uid in series:
            cur.execute('SELECT slice_path FROM slices WHERE series_instance_uid = ?',
                        (series_instance_uid, ))
            slices = dicom.sort_files([x[0] for x in cur.fetchall()])
            cur.execute(
                'DELETE FROM slices WHERE series_instance_uid = ?', (series_instance_uid, ))
            for slice_path in slices:
                cur.execute(
                    'INSERT INTO slices(slice_path, series_instance_uid) VALUES(?, ?)', (slice_path, series_instance_uid))

            if len(slices) > 50:
                image = dicom.read_volume(slices)
                actor = VolActor(image)

                renderer.AddActor(actor)
                renderer.ResetCamera()
                camera.Zoom(1.5)
                camera.Roll(180)
                render_window.Render()

                window_to_image_filter = vtk.vtkWindowToImageFilter()
                window_to_image_filter.SetInput(render_window)
                window_to_image_filter.Update()

                renderer.RemoveActor(actor)

                result = Image(window_to_image_filter.GetOutput())
                series_preview = numpy.fliplr(result.as_numpy())

                cur.execute('UPDATE series SET series_preview = ? WHERE series_instance_uid = ?',
                            (series_preview, series_instance_uid,))

        conn.commit()
        conn.close()






class Editor(QWidget, Ui_Editor):
    previewdialog = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self._tool_parts = []
        self._tool_precut = None
        self._tool_cube = None
        self._tool_sphere = None
        self._tool_plane = None

        self.viewport = Viewport()
        self.viewport.istyle = vtk.vtkInteractorStyleTrackballCamera()
        self.viewport.interactor.Initialize()
        self.layout.addWidget(self.viewport)
        self.viewport.interactor.AddObserver(vtk.vtkCommand.CharEvent,
                                             self.callback)

        self.editorModel = editorModel
        self.editorModel.propSelected.connect(self.updateRender)
        self.editorModel.propsUpdated.connect(self.updateProps)
        self.editorModel.cutterPolyline.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterRect.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterCircle.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterCircle.cutUpdated.connect(self.cutCircle)
        self.editorModel.cutterCube.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterSphere.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterSphere.cutUpdated.connect(self.cutSphere)
        self.editorModel.cutterPlane.toolUpdated.connect(self.updateTool)
        self.editorModel.cutterPlane.cutUpdated.connect(self.cutPlane)
        self.editorModel.splitter.toolUpdated.connect(self.updateTool)

        self.lookModel = lookModel
        self.lookModel.lookUpdated.connect(self.updateLook)

        self.mirrorerModel = mirrorerModel

        self.implantorModel = implantorModel

        self.stageModel = stageModel

    def callback(self, caller, event):
        if self.viewport.interactor.GetKeySym() == 'Escape':
            if self.rbTool.isChecked():
                self.on_rbCamera_toggled(True)
            elif self.rbTool.isEnabled():
                self.on_rbTool_toggled(True)

    @pyqtSlot()
    def updateRender(self):
        self.viewport.rwindow.Render()

    @pyqtSlot()
    def updateProps(self):
        for prop in self.viewport.actors():
            self.viewport.remove_prop(prop)
        if self._tool_cube:
            self._tool_cube.hide()
            self._tool_cube.show()

        if self.editorModel.cutterCircle.toggle:
            if self.editorModel.prop in self.editorModel.props:
                mesh = self.editorModel.props[self.editorModel.prop].mesh
                self.viewport.istyle.set_mesh(mesh)

        self.viewport.add_props(self.editorModel.props.values())
        # self.updateRender()

    @pyqtSlot(QObject)
    def updateTool(self, tool):
        if tool.toggle:
            self.viewport.renderer.RemoveActor(self._tool_precut)
            if hasattr(tool, 'precut'):
                self._tool_precut = tool.precut
            if hasattr(tool, 'parts'):
                for part in self._tool_parts:
                    self.viewport.remove_prop(part)
                self._tool_parts = tool.parts
        else:
            self.on_rbCamera_toggled(True)
            self.rbTool.setEnabled(False)

            if self._tool_cube:
                self._tool_cube.hide()
                self._tool_cube = None
                if self.editorModel.prop in self.editorModel.props:
                    self.editorModel.props[self.editorModel.prop].opacity = 1.0
            if self._tool_plane:
                self._tool_plane.hide()
                self._tool_plane = None
                self.updateProps()
            if self._tool_sphere:
                self._tool_sphere.hide()
                self._tool_sphere = None
                self.updateProps()
            if tool.name == 'splitter':
                for part in tool.parts:
                    self.viewport.remove_prop(part)
                if self.editorModel.prop in self.editorModel.props:
                    self.viewport.add_prop(self.editorModel.props[
                        self.editorModel.prop])

            self.updateRender()
            return

        if tool.name == 'polyline':
            self.rbTool.setEnabled(True)
            self.on_rbTool_toggled(True)
            self.viewport.renderer.AddActor(self._tool_precut)
        elif tool.name == 'rect':
            self.rbTool.setEnabled(True)
            self.on_rbTool_toggled(True)
            self.viewport.renderer.AddActor(self._tool_precut)
        elif tool.name == 'circle':
            self.rbTool.setEnabled(True)
            self.on_rbTool_toggled(True)
            self.viewport.renderer.AddActor(self._tool_precut)
        elif tool.name == 'cube':
            self.viewport.renderer.AddActor(self._tool_precut)
            if not self._tool_cube:
                prop = self.editorModel.props[self.editorModel.prop]
                self._tool_cube = CubeW(interactor=self.viewport.interactor,
                                        prop=prop,
                                        on_select=tool.update,
                                        cuttools=self.cuttools)
                self._tool_cube.show()
        elif tool.name == 'sphere':
            if not self._tool_sphere:
                self.sphere_mesh = Mesh.sphere(center=(105.202, 99.188, 50.0),
                                               radius=30.0)
                self.sphere_actor = PolyActor(mesh=self.sphere_mesh,
                                              color='green',
                                              opacity=0.5)
                self.viewport.renderer.AddActor(self.sphere_actor)
                self._tool_sphere = CubeManipulator(interactor=self.viewport.interactor,
                                                    actor=self.sphere_actor)
                self._tool_sphere.show()

            # self.viewport.renderer.AddActor(self._tool_precut)
            # if not self._tool_cube:
            #     prop = self.editorModel.props[self.editorModel.prop]
            #     self._tool_cube = CubeW(interactor=self.viewport.interactor,
            #                             prop=prop,
            #                             on_select=tool.update,
            #                             cuttools=self.cuttools)
            #     self._tool_cube.show()
        elif tool.name == 'plane':
            # self.viewport.remove_prop(self.editorModel.props[
            #                           self.editorModel.prop])
            # self.viewport.add_props(tool.parts)
            if not self._tool_plane:
                # prop = self.editorModel.props[self.editorModel.prop]
                # self._tool_plane = PlaneW(interactor=self.viewport.interactor,
                #                           prop=prop,
                #                           on_select=tool.update)
                # self.viewport.remove_prop(self.editorModel.props[
                #                           self.editorModel.prop])
                self._tool_plane = PlaneW(interactor=self.viewport.interactor)
                self._tool_plane.show()

        elif tool.name == 'splitter':
            self.viewport.remove_prop(self.editorModel.props[
                                      self.editorModel.prop])
            self.viewport.add_props(tool.parts)

        self.updateRender()

    def cutPlane(self, tool):
        if self._tool_plane:
            left, right = self._tool_plane.orig.mesh.disect_by_plane(
                self._tool_plane._plane)

            if self.editorModel.cutterPlane.close_mesh:
                left.close_mesh(inplace=True)
                right.close_mesh(inplace=True)

            self.editorModel.addProp(self.editorModel.prop + '.l',
                                     PolyActor(left))
            self.editorModel.addProp(self.editorModel.prop + '.r',
                                     PolyActor(right))
            self.editorModel.delProp()
            self.updateProps()
            self.updateTool(self.editorModel.cutterPlane)
            # self.editorModel.cutterPlane.toggle = False

    def cutSphere(self, tool):
        if self._tool_sphere:
            if self.editorModel.prop in self.editorModel.props:
                prop = self.editorModel.props[self.editorModel.prop]
                self.editorModel.props[self.editorModel.prop] = PolyActor(prop.mesh.clip_by_mesh(self._tool_sphere.mesh,
                                                                                                 inverse=tool.inverse),
                                                                          color=prop.color)
                self.updateProps()

                self.viewport.renderer.AddActor(self.sphere_actor)
                self._tool_sphere = CubeManipulator(interactor=self.viewport.interactor,
                                                    actor=self.sphere_actor)
                self._tool_sphere.show()

    def cutCircle(self, tool):
        if self.editorModel.prop in self.editorModel.props:
            prop = self.editorModel.props[self.editorModel.prop]

            point_idxs = self.viewport.istyle.selection_indexes
            cell_idxs = []

            # Бежим по всем точкам
            for index in point_idxs:
                # Для каждой точки находит включающие ее ячейки
                cell_idxs.extend(face_for_point(prop.mesh, index))
            # Избавляемся от дубликатов
            cell_idxs = list(set(cell_idxs))
            # Удаляем ячейки из меша
            delete_cells(prop.mesh, cell_idxs)

            self.viewport.remove_prop(self.viewport.istyle.selection_actor)
            self.viewport.istyle.selection_actor = None
            self.viewport.istyle.set_mesh(prop.mesh)
            self.viewport.rwindow.Render()

    @pyqtSlot(tuple)
    def updateLook(self, look):
        self.viewport.look_from(look)

    def on_rbCamera_toggled(self, toggle):
        if toggle:
            self.rbCamera.setChecked(True)
            self.viewport.istyle = vtk.vtkInteractorStyleTrackballCamera()

    def on_rbTool_toggled(self, toggle):
        if toggle:
            self.rbTool.setChecked(True)
            cutterPolyline = self.editorModel.cutterPolyline
            cutterRect = self.editorModel.cutterRect
            cutterCircle = self.editorModel.cutterCircle

            if cutterPolyline.toggle:
                self.viewport.istyle = StyleDrawPolygon3(interactor=self.viewport.interactor,
                                                         on_select=cutterPolyline.update)
            if cutterRect.toggle:
                self.viewport.istyle = StyleRubberBand2D(
                    on_selection=cutterRect.update)
            if cutterCircle.toggle:
                self.viewport.istyle = CircleSelection(interactor=self.viewport.interactor,
                                                       on_selected=None)
                if self.editorModel.prop in self.editorModel.props:
                    mesh = self.editorModel.props[self.editorModel.prop].mesh
                    self.viewport.istyle.set_mesh(mesh)

    def on_pbNext_pressed(self):
        if self.editorModel.prop in self.editorModel.props:
            mesh = self.editorModel.props[self.editorModel.prop].mesh
            self.mirrorerModel.mesh = mesh
            self.stageModel.stage = 4

    def on_pbImplant_pressed(self):
        if self.editorModel.prop in self.editorModel.props:
            mesh = self.editorModel.props[self.editorModel.prop].mesh
            self.implantorModel.addProp('mesh', PolyActor(mesh))
            self.stageModel.stage = 5

    def on_pbPreview_pressed(self):
        self.previewdialog.emit()


class CubeW(object):

    def __init__(self, interactor, prop, on_select, cuttools):
        self.interactor = interactor
        self.prop = prop
        self.on_select = on_select
        self.cuttools = cuttools

        self.widget = vtk.vtkBoxWidget()
        self.widget.SetInteractor(interactor)
        # self.widget.SetProp3D(self.prop)
        self.widget.PlaceWidget(self.prop.mesh.bounds)

        self.widget.GetFaceProperty().SetEdgeColor(get_color('blue'))
        self.widget.GetSelectedFaceProperty().SetEdgeColor(get_color('yellow'))

        self.widget.AddObserver(vtk.vtkCommand.InteractionEvent, self.event)

    @property
    def bounds(self):
        return self.prop.mesh.bounds

    @property
    def transform(self):
        trans = vtk.vtkTransform()
        self.widget.GetTransform(trans)
        return trans

    @property
    def scale(self):
        return self.transform.GetScale()

    @property
    def position(self):
        return self.transform.GetPosition()

    @property
    def orientation(self):
        return self.transform.GetOrientation()

    @property
    def width(self):
        return (self.bounds[1] - self.bounds[0]) * self.scale[0]

    @property
    def height(self):
        return (self.bounds[3] - self.bounds[2]) * self.scale[1]

    @property
    def depth(self):
        return (self.bounds[5] - self.bounds[4]) * self.scale[2]

    def event(self, caller=None, ev=None):
        self.on_select(self.as_planes())

        self.cuttools.lPosition_1.setText(str(self.position[0]))
        self.cuttools.lPosition_2.setText(str(self.position[1]))
        self.cuttools.lPosition_3.setText(str(self.position[2]))
        print('Cube position: {}'.format(self.position))

        self.cuttools.lOrientation_1.setText(str(self.orientation[0]))
        self.cuttools.lOrientation_2.setText(str(self.orientation[1]))
        self.cuttools.lOrientation_3.setText(str(self.orientation[2]))
        print('Cube orientation: {}'.format(self.orientation))

        self.cuttools.lScale_1.setText(str(self.scale[0]))
        self.cuttools.lScale_2.setText(str(self.scale[1]))
        self.cuttools.lScale_3.setText(str(self.scale[2]))
        print('Cube scale: {}'.format(self.scale))

    @property
    def renderer(self):
        return self.interactor.GetRenderWindow().GetRenderers().GetFirstRenderer()

    def show(self):
        self.widget.On()
        self.event()

    def hide(self):
        self.widget.Off()

    def as_polydata(self):
        poly_data = vtk.vtkPolyData()
        self.widget.GetPolyData(poly_data)
        return poly_data

    def as_planes(self):
        planes = vtk.vtkPlanes()
        self.widget.GetPlanes(planes)
        return planes


class PlaneW(object):

    class ImplicitPlaneInteractionCallback(object):
        """     """

        def __init__(self, hi=None, plane=None, interactor=None):
            """     """
            self.hi = hi
            self._plane = plane
            self._iren = interactor

        def __call__(self, caller=None, ev=None):
            if not self.hi.orig:
                return
            """     """
            if hasattr(caller, 'GetRepresentation'):
                rep = caller.GetRepresentation()
                if hasattr(rep, 'GetPlane') and self._plane:
                    rep.GetPlane(self._plane)

            # mesh = self.hi.orig.mesh
            # left, right = mesh.disect_by_plane(self._plane)
            # self.hi.renderer.RemoveActor(self.hi.precut_left)
            # self.hi.renderer.RemoveActor(self.hi.precut_right)
            # self.hi.precut_left = PolyActor(left,
            #                                 color='red',
            #                                 opacity=1.0)
            # self.hi.precut_right = PolyActor(right,
            #                                  color='green',
            #                                  opacity=1.0)
            # self.hi.renderer.AddActor(self.hi.precut_left)
            # self.hi.renderer.AddActor(self.hi.precut_right)

    def __init__(self, interactor):
        """     """

        self.editorModel = editorModel
        self.editorModel.propSelected.connect(self.event2)
        # self.editorModel.inverseUpdated.connect(self.event2)
        if self.editorModel.prop:
            self._iren = interactor
            self._bounds = self.orig.mesh.bounds
            center = self.orig.mesh.center
            if math.isnan(center[0]):
                center = ((self._bounds[0] + self._bounds[1]) / 2,
                          (self._bounds[2] + self._bounds[3]) / 2,
                          (self._bounds[4] + self._bounds[5]) / 2)
            self._plane = Plane(origin=center, normal=(1, 0, 0))
            self._callback = PlaneW.ImplicitPlaneInteractionCallback(self,
                                                                     self._plane,
                                                                     self._iren)

            # left, right = self.orig.mesh.disect_by_plane(self._plane)
            # self.precut_left = PolyActor(left,
            #                              color='red',
            #                              opacity=1.0)
            # self.precut_right = PolyActor(right,
            #                               color='green',
            #                               opacity=1.0)
            # self.renderer.AddActor(self.precut_left)
            # self.renderer.AddActor(self.precut_right)

            self.rep = vtk.vtkImplicitPlaneRepresentation()
            self.rep.SetPlaceFactor(1.25)
            print(self.orig.mesh.center)
            print(self._bounds)
            self.rep.PlaceWidget(self._bounds)
            self.rep.SetNormal(self._plane.GetNormal())
            self.rep.SetOrigin(self._plane.GetOrigin())
            self.rep.DrawOutlineOff()
            self.rep.DrawPlaneOn()

            self.widget = vtk.vtkImplicitPlaneWidget2()
            self.widget.SetInteractor(self._iren)
            self.widget.SetRepresentation(self.rep)
            self.widget.AddObserver(vtk.vtkCommand.InteractionEvent,
                                    self._callback)

    def _pos(self, value):
        origin = self._plane.GetOrigin()
        self._plane.SetOrigin(value, origin[1], origin[2])
        self.rep.SetOrigin(self._plane.GetOrigin())

    def event2(self):
        self._callback()
        self._iren.GetRenderWindow().Render()

    def show(self):
        self.widget.On()

    def hide(self):
        self.widget.Off()
        # self.renderer.RemoveActor(self.precut_left)
        # self.renderer.RemoveActor(self.precut_right)

    @property
    def renderer(self):
        return self._iren.GetRenderWindow().GetRenderers().GetFirstRenderer()

    @property
    def orig(self):
        orig = None
        if self.editorModel.prop in self.editorModel.props:
            orig = self.editorModel.props[self.editorModel.prop]
        return orig

    @property
    def plane(self):
        return self._plane


class PlaneW2(object):

    class ImplicitPlaneInteractionCallback(object):
        """     """

        def __init__(self, hi=None, plane=None, interactor=None):
            """     """
            self.hi = hi
            self._plane = plane
            self._iren = interactor

        def __call__(self, caller=None, ev=None):
            if not self.hi.orig:
                return
            """     """
            if hasattr(caller, 'GetRepresentation'):
                rep = caller.GetRepresentation()
                if hasattr(rep, 'GetPlane') and self._plane:
                    rep.GetPlane(self._plane)

            mesh = self.hi.orig.mesh
            left, right = mesh.disect_by_plane(self._plane)
            self.hi.renderer.RemoveActor(self.hi.precut_left)
            self.hi.renderer.RemoveActor(self.hi.precut_right)
            self.hi.precut_left = PolyActor(left,
                                            color='red',
                                            opacity=1.0)
            self.hi.precut_right = PolyActor(right,
                                             color='green',
                                             opacity=1.0)
            self.hi.renderer.AddActor(self.hi.precut_left)
            self.hi.renderer.AddActor(self.hi.precut_right)

    def __init__(self, interactor):
        """     """

        self.editorModel = editorModel
        self.editorModel.propSelected.connect(self.event2)
        # self.editorModel.inverseUpdated.connect(self.event2)
        if self.editorModel.prop:
            self._iren = interactor
            self._bounds = self.orig.mesh.bounds
            center = self.orig.mesh.center
            if math.isnan(center[0]):
                center = ((self._bounds[0] + self._bounds[1]) / 2,
                          (self._bounds[2] + self._bounds[3]) / 2,
                          (self._bounds[4] + self._bounds[5]) / 2)
            self._plane = Plane(origin=center, normal=(1, 0, 0))
            self._callback = PlaneW.ImplicitPlaneInteractionCallback(self,
                                                                     self._plane,
                                                                     self._iren)

            left, right = self.orig.mesh.disect_by_plane(self._plane)
            self.precut_left = PolyActor(left,
                                         color='red',
                                         opacity=1.0)
            self.precut_right = PolyActor(right,
                                          color='green',
                                          opacity=1.0)
            self.renderer.AddActor(self.precut_left)
            self.renderer.AddActor(self.precut_right)

            self.rep = vtk.vtkImplicitPlaneRepresentation()
            self.rep.SetPlaceFactor(1.25)
            print(self.orig.mesh.center)
            print(self._bounds)
            self.rep.PlaceWidget(self._bounds)
            self.rep.SetNormal(self._plane.GetNormal())
            self.rep.SetOrigin(self._plane.GetOrigin())
            self.rep.DrawOutlineOff()
            self.rep.DrawPlaneOn()

            self.widget = vtk.vtkImplicitPlaneWidget2()
            self.widget.SetInteractor(self._iren)
            self.widget.SetRepresentation(self.rep)
            self.widget.AddObserver(vtk.vtkCommand.InteractionEvent,
                                    self._callback)

    def _pos(self, value):
        origin = self._plane.GetOrigin()
        self._plane.SetOrigin(value, origin[1], origin[2])
        self.rep.SetOrigin(self._plane.GetOrigin())

    def event2(self):
        self._callback()
        self._iren.GetRenderWindow().Render()

    def show(self):
        self.widget.On()

    def hide(self):
        self.widget.Off()
        self.renderer.RemoveActor(self.precut_left)
        self.renderer.RemoveActor(self.precut_right)

    @property
    def renderer(self):
        return self._iren.GetRenderWindow().GetRenderers().GetFirstRenderer()

    @property
    def orig(self):
        orig = None
        if self.editorModel.prop in self.editorModel.props:
            orig = self.editorModel.props[self.editorModel.prop]
        return orig

    @property
    def plane(self):
        return self._plane






class Extractor(QWidget, Ui_Extractor):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.viewport = Viewport()
        self.viewport.istyle = vtk.vtkInteractorStyleTrackballCamera()
        self.viewport.interactor.Initialize()
        self.layout.addWidget(self.viewport)

        self.view = None
        self.threshold.levelMinUpdated.connect(self.updateMinThreshold)
        self.threshold.levelMaxUpdated.connect(self.updateMaxThreshold)

        self.imageModel = imageModel
        self.imageModel.imageLoaded.connect(self.loadImage)

        self.lookModel = lookModel
        self.lookModel.lookUpdated.connect(self.updateLook)

        self.planeModel = planeModel
        self.planeModel.cmapUpdated.connect(self.updateCmap)
        self.planeModel.levelUpdated.connect(self.updateLevel)
        self.planeModel.windowUpdated.connect(self.updateWindow)

        self.editorModel = editorModel

        self.stageModel = stageModel

    def loadImage(self):
        if self.view:
            self.view.hide()
            self.view = None

        self.view = ImageView(self.viewport.interactor,
                              self.imageModel.image,
                              window=self.planeModel.window,
                              level=self.planeModel.level,
                              colormap=self.planeModel.cmap)
        self.view.on_windowlevel_changed = self.on_windowlevel
        self.view.on_cursor_changed = self.on_cursor
        self.view.contour_threshold = 400
        self.view.upper_threshold = 1500
        self.view.show()

        self.view.update_contours()
        self.updateRender()

        self.viewport.reset_view()
        self.viewport.look_from((0.4, -1.0, 0.4))
        self.viewport.zoom(1.35)

    def updateCmap(self):
        if self.view:
            self.view.colormap = self.planeModel.cmap

    def updateLevel(self):
        if self.view:
            self.view.level = self.planeModel.level

    def updateWindow(self):
        if self.view:
            self.view.window = self.planeModel.window

    def updateMinThreshold(self):
        if self.view:
            self.view.contour_threshold = self.threshold.ui.slider.level_min
            self.view.update_contours()
            self.updateRender()

    def updateMaxThreshold(self):
        if self.view:
            self.view.upper_threshold = self.threshold.ui.slider.level_max
            self.view.update_contours()
            self.updateRender()

    @pyqtSlot()
    def updateRender(self):
        self.viewport.rwindow.Render()

    def on_windowlevel(self, window, level):
        self.planeModel.level = level
        self.planeModel.window = window
        print('window: ', window)
        print('level: ', level)

    def on_cursor(self, cursor):
        print(cursor)
        self.updateRender()

    @pyqtSlot(tuple)
    def updateLook(self, look):
        self.viewport.look_from(look)

    def on_pbNext_pressed(self):
        threshold = self.threshold.ui.slider.level_min
        threshold2 = self.threshold.ui.slider.level_max
        if threshold2 == 1500:
            discrete = False
            
        mesh = self.imageModel.image.extract_surface(threshold=threshold,
                                                     threshold2=threshold2,
                                                     discrete=discrete)

        self.editorModel.addProp('mesh', PolyActor(mesh))
        self.stageModel.stage = 3






class Histogram(QWidget, Ui_Histogram):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.plot = PlotCanvas(self)
        self.layout.addWidget(self.plot)

        self.histogramModel = histogramModel
        self.histogramModel.histogramUpdated.connect(self.updateSamples)

    def updateSamples(self):
        self.plot.plot(self.histogramModel.histogram)


class PlotCanvas(FigureCanvas):

    def __init__(self, parent=None, width=4, height=5, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)

        FigureCanvas.__init__(self, fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self,
                                   QSizePolicy.Expanding,
                                   QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def plot(self, x):
        self.axes.clear()
        self.axes.plot(x)
        self.axes.plot([500] * len(x))
        self.draw()





tmpdir = tempfile.gettempdir()


class ImplantDatabase(QWidget, Ui_ImplantDatabase):
    implant = pyqtSignal(str)

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self._directory = "./libcore/data/implants"
        self.listDir()

    def listDir(self):
        for root, dirs, files in os.walk(self._directory):
            for file in files:
                if file[-3:].lower() == 'stl':
                    print(root, file)
                    icon = screenshot(root + '/' + file)

                    # Create QCustomQWidget
                    myQCustomQWidget = QCustomQWidget()
                    myQCustomQWidget.setTextUp(file)
                    myQCustomQWidget.setTextDown(root + '/' + file)
                    myQCustomQWidget.setIcon(icon)
                    # Create QListWidgetItem
                    listWidgetItem = QtWidgets.QListWidgetItem(self.listWidget)
                    # Set size hint
                    listWidgetItem.setSizeHint(myQCustomQWidget.sizeHint())
                    # Add QListWidgetItem into QListWidget
                    self.listWidget.addItem(listWidgetItem)
                    self.listWidget.setItemWidget(listWidgetItem,
                                                  myQCustomQWidget)

    @pyqtSlot(QtWidgets.QListWidgetItem)
    def on_listWidget_itemDoubleClicked(self, item):
        file_path = self.listWidget.itemWidget(item).textDownQLabel.text()
        if os.path.exists(tmpdir + '/tmp.stl'):
            os.remove(tmpdir + '/tmp.stl')
        os.link(file_path, tmpdir + '/tmp.stl')
        self.implant.emit(tmpdir + '/tmp.stl')


class QCustomQWidget(QtWidgets.QWidget):

    def __init__(self, parent=None):
        super(QCustomQWidget, self).__init__(parent)
        self.textQVBoxLayout = QtWidgets.QVBoxLayout()
        self.textUpQLabel = QtWidgets.QLabel()
        self.textDownQLabel = QtWidgets.QLabel()
        self.textQVBoxLayout.addWidget(self.textUpQLabel)
        self.textQVBoxLayout.addWidget(self.textDownQLabel)
        self.allQHBoxLayout = QtWidgets.QHBoxLayout()
        self.iconQLabel = QtWidgets.QLabel()
        self.iconQLabel.setMaximumSize(50, 50)
        self.allQHBoxLayout.addWidget(self.iconQLabel, 0)
        self.allQHBoxLayout.addLayout(self.textQVBoxLayout, 1)
        self.setLayout(self.allQHBoxLayout)
        # setStyleSheet
        # self.textUpQLabel.setStyleSheet('''
        #     color: rgb(0, 0, 255);
        # ''')
        # self.textDownQLabel.setStyleSheet('''
        #     color: rgb(255, 0, 0);
        # ''')

    def setTextUp(self, text):
        self.textUpQLabel.setText(text)

    def setTextDown(self, text):
        self.textDownQLabel.setText(text)

    def setIcon(self, imagePath):
        height, width, channel = imagePath.shape
        bytesPerLine = 3 * width
        qImg = QtGui.QImage(imagePath.data,
                            width,
                            height,
                            bytesPerLine,
                            QtGui.QImage.Format_RGB888)

        self.iconQLabel.setPixmap(QtGui.QPixmap(qImg).scaled(50, 50))


renderer = vtk.vtkRenderer()
render_window = vtk.vtkRenderWindow()
render_window.SetOffScreenRendering(1)
render_window.AddRenderer(renderer)
render_window.SetSize(512, 512)
camera = renderer.GetActiveCamera()
camera.SetPosition(0, -1.0, 0)
camera.SetFocalPoint(0, 0.0, 0)
camera.Zoom(1.5)
camera.Roll(180)


def screenshot(file_path):
    if os.path.exists(tmpdir + '/tmp.stl'):
        os.remove(tmpdir + '/tmp.stl')
    os.link(file_path, tmpdir + '/tmp.stl')
    image = Mesh(tmpdir + '/tmp.stl')
    # image = Mesh('./implants/Пластины/PBL-102.stl')
    actor = PolyActor(image)

    renderer.AddActor(actor)
    renderer.ResetCamera()
    render_window.Render()

    window_to_image_filter = vtk.vtkWindowToImageFilter()
    window_to_image_filter.SetInput(render_window)
    window_to_image_filter.Update()

    renderer.RemoveActor(actor)

    result = Image(window_to_image_filter.GetOutput())
    return result.as_numpy()

if __name__ == "__main__":
    import os
    import sys

    from PyQt5.QtWidgets import QApplication

    app = QApplication(sys.argv)

    mw = ImplantDatabase()
    mw.showMaximized()

    sys.exit(app.exec_())






class Implantor(QWidget, Ui_Implantor):
    previewdialog = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self._tool_parts = []
        self._tool_precut = None
        self._tool_cube = None
        self._tool_sphere = None
        self._tool_plane = None

        self._prop = None

        self.wFlate.setHidden(True)
        self.wDeformation.setVisible(False)
        self.pbFlate.setVisible(False)

        self.viewport = Viewport()
        self.viewport.istyle = vtk.vtkInteractorStyleTrackballCamera()
        self.viewport.interactor.Initialize()
        self.layout.addWidget(self.viewport)
        self.viewport.interactor.AddObserver(vtk.vtkCommand.CharEvent,
                                             self.callback)

        self.selection_actor = None
        self.selection_indexes = []
        self.mesh = None
        self.arrow = None

        self.implantorModel = implantorModel
        self.implantorModel.propSelected.connect(self.updateRender)
        self.implantorModel.propSelected.connect(self.updateManip)
        self.implantorModel.propsUpdated.connect(self.updateProps)
        self.implantorModel.cutterPolyline.toolUpdated.connect(self.updateTool)
        self.implantorModel.cutterRect.toolUpdated.connect(self.updateTool)
        self.implantorModel.cutterCube.toolUpdated.connect(self.updateTool)
        self.implantorModel.cutterCircle.toolUpdated.connect(self.updateTool)
        self.implantorModel.cutterCircle.cutUpdated.connect(self.cutCircle)
        self.implantorModel.cutterSphere.toolUpdated.connect(self.updateTool)
        self.implantorModel.cutterSphere.cutUpdated.connect(self.cutSphere)
        self.implantorModel.cutterPlane.toolUpdated.connect(self.updateTool)
        self.implantorModel.cutterPlane.cutUpdated.connect(self.cutPlane)
        self.implantorModel.splitter.toolUpdated.connect(self.updateTool)

        self.lookModel = lookModel
        self.lookModel.lookUpdated.connect(self.updateLook)

        self.mirrorerModel = mirrorerModel

        self.stageModel = stageModel

        self.cuttools.setModel(implantorModel)
        self.meshtools.setModel(implantorModel)
        self.props.setModel(implantorModel)

        self.mounterModel = mounterModel

    def on_pbFlate_toggled(self, toggle):
        self.wFlate.setVisible(toggle)
        if toggle:
            self.on_pbDeformation_toggled(False)
            if not self.pbFlate.isChecked():
                self.pbFlate.setChecked(Qt.Checked)

            self.sphere_widget = SphereWidget(
                interactor=self.viewport.interactor)
            self.sphere_widget.show()
        else:
            if self.pbFlate.isChecked():
                self.pbFlate.setChecked(Qt.Unchecked)

            if hasattr(self, 'sphere_widget'):
                self.sphere_widget.hide()
                del self.sphere_widget

    def on_pbFlateApply_pressed(self):
        if self.implantorModel.prop:
            actor = self.implantorModel.props[self.implantorModel.prop]
            if self.rbInflate.isChecked():
                actor.mesh = mesh_inflate(mesh=actor.mesh,
                                          center=self.sphere_widget.center,
                                          radius=self.sphere_widget.radius)
            else:
                actor.mesh = mesh_deflate(mesh=actor.mesh,
                                          center=self.sphere_widget.center,
                                          radius=self.sphere_widget.radius)

        self.updateRender()

    def on_pbDeformation_toggled(self, toggle):
        self.rbTool.setEnabled(toggle)
        self.wDeformation.setVisible(toggle)
        if toggle:
            self.on_pbManipulator_toggled(False)
            self.on_pbFlate_toggled(False)
            if not self.pbDeformation.isChecked():
                self.pbDeformation.setChecked(Qt.Checked)
            self.on_rbTool_toggled(True)
        else:
            if self.pbDeformation.isChecked():
                self.pbDeformation.setChecked(Qt.Unchecked)
            if self.selection_actor:
                self.viewport.remove_prop(self.selection_actor)
                self.selection_actor = None
            if self.arrow:
                self.arrow.hide()
                self.arrow = None
            self.on_rbCamera_toggled(True)
        self.updateRender()

    def on_pbReverseSense_pressed(self):
        self.mesh.reverse_sense(inplace=True)
        self.mesh.compute_normals()
        self.on_rbTool_toggled(True)

    def on_pbDeformationApply_pressed(self):
        if self.arrow:
            square_warp(self.mesh,
                        self.selection_indexes,
                        center=self.arrow.point1,
                        direction=self.arrow.direction,
                        length=self.arrow.length)

            self.on_pbDeformation_toggled(False)
            self.on_pbDeformation_toggled(True)

    def on_selected(self, center, indexes):
        if self.implantorModel.prop in self.implantorModel.props:
            self.arrow = ArrowProbe(interactor=self.viewport.interactor,
                                    origin=center,
                                    on_changed=None)
            self.arrow.point2 = list(np.array(
                center) + 10 * self.mesh.normals[self.mesh.find_closest_point(center)])
            self.arrow.show()

            # Выключаем режим
            self.selection_actor = self.viewport.istyle.selection_actor
            self.selection_indexes = self.viewport.istyle.selection_indexes
            self.on_rbCamera_toggled(True)

            self.updateRender()

    def callback(self, caller, event):
        if self.viewport.interactor.GetKeySym() == 'Escape':
            if self.rbTool.isChecked():
                self.on_rbCamera_toggled(True)
            elif self.rbTool.isEnabled():
                self.on_rbTool_toggled(True)

    @pyqtSlot()
    def updateRender(self):
        self.viewport.rwindow.Render()

    def updateManip(self):
        if not self.implantorModel.prop:
            self.pbManipulator.setEnabled(False)
            self.pbDeformation.setEnabled(False)
        else:
            self.pbManipulator.setEnabled(True)
            self.pbDeformation.setEnabled(True)

        if self.pbManipulator.isChecked():
            self.on_pbManipulator_toggled(True)

    @pyqtSlot()
    def updateProps(self):
        for prop in self.viewport.actors():
            self.viewport.remove_prop(prop)
        if self._tool_cube:
            self._tool_cube.hide()
            self._tool_cube.show()
        if hasattr(self, 'manipulator_widget'):
            if self.pbManipulator.isChecked():
                self.manipulator_widget.hide()
                self.manipulator_widget.show()

        self._prop = self.implantorModel.prop

        if self.implantorModel.cutterCircle.toggle:
            if self.implantorModel.prop in self.implantorModel.props:
                mesh = self.implantorModel.props[self.implantorModel.prop].mesh
                self.viewport.istyle.set_mesh(mesh)

        self.viewport.add_props(self.implantorModel.props.values())

    @pyqtSlot(QObject)
    def updateTool(self, tool):
        self.on_pbManipulator_toggled(False)
        self.on_pbFlate_toggled(False)
        self.on_pbDeformation_toggled(False)

        if tool.toggle:
            self.viewport.renderer.RemoveActor(self._tool_precut)
            if hasattr(tool, 'precut'):
                self._tool_precut = tool.precut
            if hasattr(tool, 'parts'):
                for part in self._tool_parts:
                    self.viewport.remove_prop(part)
                self._tool_parts = tool.parts
            if self.pbDeformation.isChecked():
                self.on_pbDeformation_toggled(False)
        else:
            self.on_rbCamera_toggled(True)
            self.rbTool.setEnabled(False)

            if self._tool_cube:
                self._tool_cube.hide()
                self._tool_cube = None
                if self.implantorModel.prop in self.implantorModel.props:
                    prop = self.implantorModel.props[self.implantorModel.prop]
                    prop.opacity = 1.0
            if self._tool_plane:
                self._tool_plane.hide()
                self._tool_plane = None
                self.updateProps()
            if self._tool_sphere:
                self._tool_sphere.hide()
                self._tool_sphere = None
                self.updateProps()
            if tool.name == 'splitter':
                for part in tool.parts:
                    self.viewport.remove_prop(part)
                if self.implantorModel.prop in self.implantorModel.props:
                    self.viewport.add_prop(self.implantorModel.props[
                        self.implantorModel.prop])

            self.updateRender()
            return

        if tool.name == 'polyline':
            self.rbTool.setEnabled(True)
            self.on_rbTool_toggled(True)
            self.viewport.renderer.AddActor(self._tool_precut)
        elif tool.name == 'rect':
            self.rbTool.setEnabled(True)
            self.on_rbTool_toggled(True)
            self.viewport.renderer.AddActor(self._tool_precut)
        elif tool.name == 'circle':
            self.rbTool.setEnabled(True)
            self.on_rbTool_toggled(True)
            self.viewport.renderer.AddActor(self._tool_precut)
        elif tool.name == 'cube':
            self.viewport.renderer.AddActor(self._tool_precut)
            if not self._tool_cube:
                prop = self.implantorModel.props[self.implantorModel.prop]
                self._tool_cube = CubeW(interactor=self.viewport.interactor,
                                        prop=prop,
                                        on_select=tool.update,
                                        cuttools=self.cuttools)
                self._tool_cube.show()
        elif tool.name == 'sphere':
            if not self._tool_sphere:
                self.sphere_mesh = Mesh.sphere(center=(105.202, 99.188, 50.0),
                                               radius=30.0)
                self.sphere_actor = PolyActor(mesh=self.sphere_mesh,
                                              color='green',
                                              opacity=0.5)
                self.viewport.renderer.AddActor(self.sphere_actor)
                self._tool_sphere = CubeManipulator(interactor=self.viewport.interactor,
                                                    actor=self.sphere_actor)
                self._tool_sphere.show()

            # self.viewport.renderer.AddActor(self._tool_precut)
            # if not self._tool_cube:
            #     prop = self.editorModel.props[self.editorModel.prop]
            #     self._tool_cube = CubeW(interactor=self.viewport.interactor,
            #                             prop=prop,
            #                             on_select=tool.update,
            #                             cuttools=self.cuttools)
            #     self._tool_cube.show()
        elif tool.name == 'plane':
            # self.viewport.remove_prop(self.implantorModel.props[
            #                           self.implantorModel.prop])
            # self.viewport.add_props(tool.parts)
            if not self._tool_plane:
                # prop = self.implantorModel.props[self.implantorModel.prop]
                # self._tool_plane = PlaneW(interactor=self.viewport.interactor,
                #                           prop=prop,
                #                           on_select=tool.update)
                # self.viewport.remove_prop(self.implantorModel.props[
                #                           self.implantorModel.prop])
                self._tool_plane = PlaneW(interactor=self.viewport.interactor)
                self._tool_plane.show()

        elif tool.name == 'splitter':
            if self.implantorModel.prop in self.implantorModel.props:
                prop = self.implantorModel.props[self.implantorModel.prop]
                self.viewport.remove_prop(prop)
                self.viewport.add_props(tool.parts)

        self.updateRender()

    def cutPlane(self, tool):
        if self._tool_plane:

            left, right = self._tool_plane.orig.mesh.disect_by_plane(
                self._tool_plane._plane)

            if self.implantorModel.cutterPlane.close_mesh:
                left.close_mesh(inplace=True)
                right.close_mesh(inplace=True)

            self.implantorModel.addProp(self.implantorModel.prop + '.l',
                                        PolyActor(left))
            self.implantorModel.addProp(self.implantorModel.prop + '.r',
                                        PolyActor(right))
            self.implantorModel.delProp()
            self.updateProps()
            self.updateTool(self.implantorModel.cutterPlane)
            # self.implantorModel.cutterPlane.toggle = False

    def cutSphere(self, tool):
        if self._tool_sphere:
            if self.implantorModel.prop in self.implantorModel.props:
                prop = self.implantorModel.props[self.implantorModel.prop]
                self.implantorModel.props[self.implantorModel.prop] = PolyActor(prop.mesh.clip_by_mesh(self._tool_sphere.mesh,
                                                                                                       inverse=tool.inverse),
                                                                                color=prop.color)
                self.updateProps()

                self.viewport.renderer.AddActor(self.sphere_actor)
                self._tool_sphere = CubeManipulator(interactor=self.viewport.interactor,
                                                    actor=self.sphere_actor)
                self._tool_sphere.show()

    def cutCircle(self, tool):
        if self.implantorModel.prop in self.implantorModel.props:
            prop = self.implantorModel.props[self.implantorModel.prop]

            point_idxs = self.viewport.istyle.selection_indexes
            cell_idxs = []

            # Бежим по всем точкам
            for index in point_idxs:
                # Для каждой точки находит включающие ее ячейки
                cell_idxs.extend(face_for_point(prop.mesh, index))
            # Избавляемся от дубликатов
            cell_idxs = list(set(cell_idxs))
            # Удаляем ячейки из меша
            delete_cells(prop.mesh, cell_idxs)

            self.viewport.remove_prop(self.viewport.istyle.selection_actor)
            self.viewport.istyle.selection_actor = None
            self.viewport.istyle.set_mesh(prop.mesh)
            self.viewport.rwindow.Render()

    @pyqtSlot(tuple)
    def updateLook(self, look):
        self.viewport.look_from(look)

    def on_rbCamera_toggled(self, toggle):
        if toggle:
            self.rbCamera.setChecked(Qt.Checked)
            self.viewport.istyle = vtk.vtkInteractorStyleTrackballCamera()

    def on_rbTool_toggled(self, toggle):

        if toggle:
            self.rbTool.setChecked(True)
            cutterPolyline = self.implantorModel.cutterPolyline
            cutterRect = self.implantorModel.cutterRect
            cutterCircle = self.implantorModel.cutterCircle
            if cutterPolyline.toggle:
                self.viewport.istyle = StyleDrawPolygon3(interactor=self.viewport.interactor,
                                                         on_select=cutterPolyline.update)
            if cutterRect.toggle:
                self.viewport.istyle = StyleRubberBand2D(
                    on_selection=cutterRect.update)
            if cutterCircle.toggle:
                self.viewport.istyle = CircleSelection(interactor=self.viewport.interactor,
                                                       on_selected=None)
                if self.implantorModel.prop in self.implantorModel.props:
                    mesh = self.implantorModel.props[
                        self.implantorModel.prop].mesh
                    self.viewport.istyle.set_mesh(mesh)
            if self.pbDeformation.isChecked():
                if self.arrow:
                    self.arrow.hide()
                    self.arrow = None
                if self.selection_actor:
                    self.viewport.remove_prop(self.selection_actor)
                    self.selection_actor = None
                if self.implantorModel.prop in self.implantorModel.props:
                    props = self.implantorModel.props
                    self.mesh = props[self.implantorModel.prop].mesh
                    if hasattr(self.mesh, 'normals'):
                        if self.mesh.normals is None:
                            # self.mesh.reverse_sense(inplace=True)
                            self.mesh.compute_normals()
                    else:
                        # self.mesh.reverse_sense(inplace=True)
                        self.mesh.compute_normals()

                    self.viewport.istyle = CircleSelection(interactor=self.viewport.interactor,
                                                           on_selected=self.on_selected)
                    self.viewport.istyle.set_mesh(self.mesh)
                    self.updateRender()

    def on_pbNext_pressed(self):
        if 'mesh' in self.implantorModel.props:
            self.mounterModel.mesh = self.implantorModel.props['mesh'].mesh
        if 'implant' in self.implantorModel.props:
            self.mounterModel.implant = self.implantorModel.props[
                'implant'].mesh

        self.stageModel.stage = 6

    def on_pbManipulator_toggled(self, toggle):
        if hasattr(self, 'manipulator_widget'):
            if self._prop in self.implantorModel.props:
                self.implantorModel.reProp(self._prop,
                                           self.manipulator_widget.mesh)
            self.manipulator_widget.hide()
            del self.manipulator_widget

        if self.implantorModel.prop in self.implantorModel.props:
            actor = self.implantorModel.props[self.implantorModel.prop]
            self._prop = self.implantorModel.prop

        if toggle:
            self.on_pbDeformation_toggled(False)
            if hasattr(self, 'sphere_widget'):
                self.on_pbFlate_toggled(False)
            if self.implantorModel.prop in self.implantorModel.props:
                actor = self.implantorModel.props[self.implantorModel.prop]
                self._prop = self.implantorModel.prop
                self.manipulator_widget = CubeManipulator(self.viewport.interactor,
                                                          actor)
                self.manipulator_widget.show()
            if not self.pbManipulator.isChecked():
                self.pbManipulator.setChecked(Qt.Checked)
        else:
            if self.pbManipulator.isChecked():
                self.pbManipulator.setChecked(Qt.Unchecked)

    # def on_pbSphere_pressed(self):
    #     mesh = Mesh.sphere(center=(30, 0, 0),
    #                        radius=20.0,
    #                        resolution_theta=51,
    #                        resolution_phi=51)
    #     actor = PolyActor(mesh)
    #     prop = self.implantorModel.addProp('sphere', actor)

    #     self.implantorModel.prop = prop
    #     self.on_pbManipulator_toggled(True)

    def on_pbCube2_pressed(self):
        mesh = Mesh.cube(width=30.0,
                         height=30.0,
                         depth=30.0)
        actor = PolyActor(mesh)
        prop = self.implantorModel.addProp('cube', actor)

        self.implantorModel.prop = prop
        self.on_pbManipulator_toggled(True)

    def on_pbTorus_pressed(self):
        mesh = Mesh.torus(crossection_radius=10,
                          ring_radius=20,
                          resolution_u=51,
                          resolution_v=51,
                          resolution_w=51)
        actor = PolyActor(mesh)
        prop = self.implantorModel.addProp('torus', actor)

        self.implantorModel.prop = prop
        self.on_pbManipulator_toggled(True)

    def on_pbCone_pressed(self):
        mesh = Mesh.cone(radius=10.0,
                         resolution=50,
                         height=30.0,
                         tesselation_level=2)
        actor = PolyActor(mesh)
        prop = self.implantorModel.addProp('cone', actor)

        self.implantorModel.prop = prop
        self.on_pbManipulator_toggled(True)

    def on_pbCylinder_pressed(self):
        mesh = Mesh.cylinder(center=(40.0, 0.0, 0.0),
                             radius=10.0,
                             height=50.0,
                             resolution=50,
                             capping=True,
                             tesselation_level=2)
        actor = PolyActor(mesh)
        prop = self.implantorModel.addProp('cylinder', actor)

        self.implantorModel.prop = prop
        self.on_pbManipulator_toggled(True)

    # def on_pbTetrahedra_pressed(self):
    #     mesh = Mesh.tetrahedra(tesselation_level=2)
    #     actor = PolyActor(mesh)
    #     prop = self.implantorModel.addProp('tetrahedra', actor)

    #     self.implantorModel.prop = prop
    #     self.on_pbManipulator_toggled(True)

    # def on_pbOctahedron_pressed(self):
    #     mesh = Mesh.tetrahedra(tesselation_level=2)
    #     actor = PolyActor(mesh)
    #     prop = self.implantorModel.addProp('octahedron', actor)

    #     self.implantorModel.prop = prop
    #     self.on_pbManipulator_toggled(True)

    @pyqtSlot()
    def on_pbOpenSTL_pressed(self):
        file_name, _ = QFileDialog.getOpenFileName(self,
                                                   "Открыть STL",
                                                   "",
                                                   "Файлы STL (*.stl)")
        if file_name:
            mesh = Mesh(file_name)
            self.implantorModel.addProp('implant', PolyActor(mesh))

    def on_pbPreview_pressed(self):
        self.previewdialog.emit()


class CubeW(object):

    def __init__(self, interactor, prop, on_select, cuttools):
        self.interactor = interactor
        self.prop = prop
        self.on_select = on_select
        self.cuttools = cuttools

        self.widget = vtk.vtkBoxWidget()
        self.widget.SetInteractor(interactor)
        # self.widget.SetProp3D(self.prop)
        self.widget.PlaceWidget(self.prop.mesh.bounds)

        self.widget.GetFaceProperty().SetEdgeColor(get_color('blue'))
        self.widget.GetSelectedFaceProperty().SetEdgeColor(get_color('yellow'))

        self.widget.AddObserver(vtk.vtkCommand.InteractionEvent, self.event)

    @property
    def bounds(self):
        return self.prop.mesh.bounds

    @property
    def transform(self):
        trans = vtk.vtkTransform()
        self.widget.GetTransform(trans)
        return trans

    @property
    def scale(self):
        return self.transform.GetScale()

    @property
    def position(self):
        return self.transform.GetPosition()

    @property
    def orientation(self):
        return self.transform.GetOrientation()

    @property
    def width(self):
        return (self.bounds[1] - self.bounds[0]) * self.scale[0]

    @property
    def height(self):
        return (self.bounds[3] - self.bounds[2]) * self.scale[1]

    @property
    def depth(self):
        return (self.bounds[5] - self.bounds[4]) * self.scale[2]

    def event(self, caller=None, ev=None):
        self.on_select(self.as_planes())

        self.cuttools.lPosition_1.setText(str(self.position[0]))
        self.cuttools.lPosition_2.setText(str(self.position[1]))
        self.cuttools.lPosition_3.setText(str(self.position[2]))
        print('Cube position: {}'.format(self.position))

        self.cuttools.lOrientation_1.setText(str(self.orientation[0]))
        self.cuttools.lOrientation_2.setText(str(self.orientation[1]))
        self.cuttools.lOrientation_3.setText(str(self.orientation[2]))
        print('Cube orientation: {}'.format(self.orientation))

        self.cuttools.lScale_1.setText(str(self.scale[0]))
        self.cuttools.lScale_2.setText(str(self.scale[1]))
        self.cuttools.lScale_3.setText(str(self.scale[2]))
        print('Cube scale: {}'.format(self.scale))

    @property
    def renderer(self):
        return self.interactor.GetRenderWindow().GetRenderers().GetFirstRenderer()

    def show(self):
        self.widget.On()
        self.event()

    def hide(self):
        self.widget.Off()

    def as_polydata(self):
        poly_data = vtk.vtkPolyData()
        self.widget.GetPolyData(poly_data)
        return poly_data

    def as_planes(self):
        planes = vtk.vtkPlanes()
        self.widget.GetPlanes(planes)
        return planes


class PlaneW(object):

    class ImplicitPlaneInteractionCallback(object):
        """     """

        def __init__(self, hi=None, plane=None, interactor=None):
            """     """
            self.hi = hi
            self._plane = plane
            self._iren = interactor

        def __call__(self, caller=None, ev=None):
            if not self.hi.orig:
                return
            """     """
            if hasattr(caller, 'GetRepresentation'):
                rep = caller.GetRepresentation()
                if hasattr(rep, 'GetPlane') and self._plane:
                    rep.GetPlane(self._plane)

            # mesh = self.hi.orig.mesh
            # left, right = mesh.disect_by_plane(self._plane)
            # self.hi.renderer.RemoveActor(self.hi.precut_left)
            # self.hi.renderer.RemoveActor(self.hi.precut_right)
            # self.hi.precut_left = PolyActor(left,
            #                                 color='red',
            #                                 opacity=1.0)
            # self.hi.precut_right = PolyActor(right,
            #                                  color='green',
            #                                  opacity=1.0)
            # self.hi.renderer.AddActor(self.hi.precut_left)
            # self.hi.renderer.AddActor(self.hi.precut_right)

    def __init__(self, interactor):
        """     """

        self.implantorModel = implantorModel
        self.implantorModel.propSelected.connect(self.event2)
        # self.implantorModel.inverseUpdated.connect(self.event2)
        if self.implantorModel.prop:
            self._iren = interactor
            self._bounds = self.orig.mesh.bounds
            center = self.orig.mesh.center
            if math.isnan(center[0]):
                center = ((self._bounds[0] + self._bounds[1]) / 2,
                          (self._bounds[2] + self._bounds[3]) / 2,
                          (self._bounds[4] + self._bounds[5]) / 2)
            self._plane = Plane(origin=center, normal=(1, 0, 0))
            self._callback = PlaneW.ImplicitPlaneInteractionCallback(self,
                                                                     self._plane,
                                                                     self._iren)

            # left, right = self.orig.mesh.disect_by_plane(self._plane)
            # self.precut_left = PolyActor(left,
            #                              color='red',
            #                              opacity=1.0)
            # self.precut_right = PolyActor(right,
            #                               color='green',
            #                               opacity=1.0)
            # self.renderer.AddActor(self.precut_left)
            # self.renderer.AddActor(self.precut_right)

            self.rep = vtk.vtkImplicitPlaneRepresentation()
            self.rep.SetPlaceFactor(1.25)
            print(self.orig.mesh.center)
            print(self._bounds)
            self.rep.PlaceWidget(self._bounds)
            self.rep.SetNormal(self._plane.GetNormal())
            self.rep.SetOrigin(self._plane.GetOrigin())
            self.rep.DrawOutlineOff()
            self.rep.DrawPlaneOn()

            self.widget = vtk.vtkImplicitPlaneWidget2()
            self.widget.SetInteractor(self._iren)
            self.widget.SetRepresentation(self.rep)
            self.widget.AddObserver(vtk.vtkCommand.InteractionEvent,
                                    self._callback)

    def _pos(self, value):
        origin = self._plane.GetOrigin()
        self._plane.SetOrigin(value, origin[1], origin[2])
        self.rep.SetOrigin(self._plane.GetOrigin())

    def event2(self):
        self._callback()
        self._iren.GetRenderWindow().Render()

    def show(self):
        self.widget.On()

    def hide(self):
        self.widget.Off()
        # self.renderer.RemoveActor(self.precut_left)
        # self.renderer.RemoveActor(self.precut_right)

    @property
    def renderer(self):
        return self._iren.GetRenderWindow().GetRenderers().GetFirstRenderer()

    @property
    def orig(self):
        orig = None
        if self.implantorModel.prop in self.implantorModel.props:
            orig = self.implantorModel.props[self.implantorModel.prop]
        return orig

    @property
    def plane(self):
        return self._plane


class Widget(object):
    pass


class TransformSelector(Widget):

    def __init__(self, interactor, actor):
        self._transform = vtk.vtkTransform()
        self._interactor = interactor
        self._actor = actor

        self.widget = vtk.vtkAffineWidget()
        self.widget.SetInteractor(self._interactor)
        self.widget.CreateDefaultRepresentation()
        # self.widget.GetAffineRepresentation()
        rep = self.widget.GetAffineRepresentation()
        # prop = rep.GetProperty()
        # prop.SetLineWidth(3)
        # prop.SetColor(get_color('white'))
        rep.DragableOff()
        # rep.SetBoxWidth(2)
        rep.GetProperty().SetColor(0.0, 0.0, 0.0)
        rep.GetProperty().SetLineWidth(1.5)
        # rep.SetAxesWidth(3)

        self.widget.GetRepresentation().PlaceWidget(actor.GetBounds())
        self.widget.AddObserver(
            vtk.vtkCommand.InteractionEvent, self._callback)
        self.widget.AddObserver(
            vtk.vtkCommand.EndInteractionEvent, self._callback)

    def _callback(self, caller, event):
        self.widget.GetAffineRepresentation().GetTransform(self._transform)
        self._actor.SetUserTransform(self._transform)

    def show(self):
        self.widget.On()

    def hide(self):
        self.widget.Off()




class LayoutsWidget(QWidget, Ui_LayoutsWidget):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.layoutModel = layoutModel
        self.layoutModel.stateUpdated.connect(self.update)

    def update(self, size=None):
        if not size:
            size = self.size()
        width, height = size.width(), size.height()
        if self.layoutModel.state == LayoutModel.CLASSIC_BOTTOM:
            self.view3d.move(0, 0)
            self.view3d.setFixedSize(width, 2 * height // 3 - 1.5)
            self.view3d.setHidden(False)

            self.axial.move(0, 2 * height // 3 + 1.5)
            self.axial.setFixedSize(width // 3 - 1.5, height // 3)
            self.axial.setHidden(False)

            self.coronal.move(width // 3 + 1.5, 2 * height // 3 + 1.5)
            self.coronal.setFixedSize(width // 3 - 1.5, height // 3)
            self.coronal.setHidden(False)

            self.sagittal.move(2 * width // 3 + 3, 2 * height // 3 + 1.5)
            self.sagittal.setFixedSize(width // 3 - 1.5, height // 3)
            self.sagittal.setHidden(False)

        elif self.layoutModel.state == LayoutModel.CLASSIC_RIGHT:
            self.view3d.move(0, 0)
            self.view3d.setFixedSize(2 * width // 3 - 1.5, height)
            self.view3d.setHidden(False)

            self.axial.move(2 * width // 3 + 1.5, 0)
            self.axial.setFixedSize(width // 3, height // 3 - 1.5)
            self.axial.setHidden(False)

            self.coronal.move(2 * width // 3 + 1.5, height // 3 + 1.5)
            self.coronal.setFixedSize(width // 3, height // 3 - 1.5)
            self.coronal.setHidden(False)

            self.sagittal.move(2 * width // 3 + 1.5, 2 * height // 3 + 1.5)
            self.sagittal.setFixedSize(width // 3, height // 3 - 1.5)
            self.sagittal.setHidden(False)

        elif self.layoutModel.state == LayoutModel.TWO_BY_TWO:
            self.view3d.move(0, 0)
            self.view3d.setFixedSize(width // 2 - 1.5, height // 2 - 1.5)
            self.view3d.setHidden(False)

            self.axial.move(width // 2 + 1.5, 0)
            self.axial.setFixedSize(width // 2 - 1.5, height // 2 - 1.5)
            self.axial.setHidden(False)

            self.coronal.move(0, height // 2 + 1.5)
            self.coronal.setFixedSize(width // 2 - 1.5, height // 2 - 1.5)
            self.coronal.setHidden(False)

            self.sagittal.move(width // 2 + 1.5, height // 2 + 1.5)
            self.sagittal.setFixedSize(width // 2 - 1.5, height // 2 - 1.5)
            self.sagittal.setHidden(False)

        elif self.layoutModel.state == LayoutModel.ONLY_3D:
            self.view3d.move(0, 0)
            self.view3d.setFixedSize(size)
            self.view3d.setHidden(False)

            self.sagittal.setHidden(True)

            self.axial.setHidden(True)

            self.coronal.setHidden(True)

        elif self.layoutModel.state == LayoutModel.ONLY_AXIAL:
            self.axial.move(0, 0)
            self.axial.setFixedSize(size)
            self.axial.setHidden(False)

            self.sagittal.setHidden(True)

            self.view3d.setHidden(True)

            self.coronal.setHidden(True)

        elif self.layoutModel.state == LayoutModel.ONLY_CORONAL:
            self.coronal.move(0, 0)
            self.coronal.setFixedSize(size)
            self.coronal.setHidden(False)

            self.sagittal.setHidden(True)

            self.view3d.setHidden(True)

            self.axial.setHidden(True)

        elif self.layoutModel.state == LayoutModel.ONLY_SAGITTAL:
            self.sagittal.move(0, 0)
            self.sagittal.setFixedSize(size)
            self.sagittal.setHidden(False)

            self.axial.setHidden(True)

            self.view3d.setHidden(True)

            self.coronal.setHidden(True)

        elif self.layoutModel.state == LayoutModel.MIRRORING:
            self.view3d.move(0, 0)
            self.view3d.setFixedSize(size)
            self.view3d.setHidden(False)

            self.sagittal.setHidden(True)

            self.axial.setHidden(True)

            self.coronal.setHidden(True)

    def resizeEvent(self, event):
        self.update(event.size())
        return super().resizeEvent(event)




class Look(QWidget, Ui_Look):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.lookModel = lookModel

    @pyqtSlot()
    def on_toolButtonAP_pressed(self):
        self.lookModel.setLook(LookModel.AP)

    @pyqtSlot()
    def on_toolButtonPA_pressed(self):
        self.lookModel.setLook(LookModel.PA)

    @pyqtSlot()
    def on_toolButtonLAO_pressed(self):
        self.lookModel.setLook(LookModel.LAO)

    @pyqtSlot()
    def on_toolButtonRAO_pressed(self):
        self.lookModel.setLook(LookModel.RAO)

    @pyqtSlot()
    def on_toolButtonSUP_pressed(self):
        self.lookModel.setLook(LookModel.SUP)

    @pyqtSlot()
    def on_toolButtonINF_pressed(self):
        self.lookModel.setLook(LookModel.INF)

    @pyqtSlot()
    def on_toolButtonLL_pressed(self):
        self.lookModel.setLook(LookModel.LL)

    @pyqtSlot()
    def on_toolButtonRL_pressed(self):
        self.lookModel.setLook(LookModel.RL)








class MainWindow(QMainWindow, Ui_MainWindow):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.toggle = True

        self.stageModel = stageModel
        self.stageModel.stageUpdated.connect(self.updateStage)

        # self.stages.setTabEnabled(1, False)
        # self.stages.setTabEnabled(1, True)
        self.on_stages_currentChanged(0)

        self.editorModel = editorModel
        self.editorModel.propsUpdated.connect(self.updateProps)

        self.imageModel = imageModel
        # self.imageModel.setImage(Image('libcore\\data\\rooster.vti'))

        self.stages.preprocessor.previewdialog.connect(self.showPreviewDialog)
        self.stages.editor.previewdialog.connect(self.showPreviewDialog)
        self.stages.implantor.previewdialog.connect(self.showPreviewDialog)

        self.statusBar().hide()

    def updateStage(self):
        stage = self.stages.tabText(self.stageModel.stage)
        title = stage + " < CAD-система «Smart Implant»"
        if self.windowTitle() != title:
            self.setWindowTitle(title)

    def updateProps(self):
        if len(self.editorModel.props) == 0:
            self.toggle = True
        elif len(self.editorModel.props) > 0 and self.toggle:
            self.toggle = False
            self.stages.editor.viewport.reset_view()

    @pyqtSlot(int)
    def on_stages_currentChanged(self, idx):
        self.stageModel.stage = idx

    @pyqtSlot()
    def on_actOpenProject_triggered(self):
        file_name, _ = QFileDialog.getOpenFileName(self,
                                                   "Открыть проект",
                                                   "",
                                                   "Файлы CADSI (*.cadsi)")
        if file_name:
            fd = h5py.File(file_name, 'r')
            self.imageModel.setImage(Image(Image.from_hdf(fd, 'image')))
            self.editorModel.load_from_hdf(fd)
            fd.close()

    @pyqtSlot()
    def on_actSaveProject_triggered(self):
        file_name, _ = QFileDialog.getSaveFileName(self,
                                                   "Сохранить проект",
                                                   "",
                                                   "Файлы CADSI (*.cadsi)")
        if file_name:
            fd = h5py.File(file_name, 'w')
            if self.imageModel.image:
                self.imageModel.image.save_to_hdf(fd, 'image')
            if len(self.editorModel.props) > 0:
                self.editorModel.save_to_hdf(fd)
            fd.close()
            print(file_name)

    @pyqtSlot()
    def on_actExit_triggered(self):
        self.close()

    def showPreviewDialog(self):
        if not hasattr(self, 'pd'):
            self.pd = PreviewDialog(self)
        self.pd.showMaximized()




class MeshTools(QWidget, Ui_MeshTools):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.wSplit.setHidden(True)
        self.wSmooth.setHidden(True)

        self.editorModel = editorModel
        self.editorModel.propSelected.connect(self.selectProp)
        self.editorModel.splitter.toolUpdated.connect(self.updateTool)

        self.selectProp()

    def setModel(self, model):
        self.editorModel = model
        self.editorModel.propSelected.connect(self.selectProp)
        self.editorModel.splitter.toolUpdated.connect(self.updateTool)

        self.selectProp()

    def selectProp(self):
        toggle = bool(self.editorModel.prop)

        self.pbClose.setEnabled(toggle)
        self.pbFill.setEnabled(toggle)
        self.pbSplit.setEnabled(toggle)
        self.pbSmooth.setEnabled(toggle)

    def updateTool(self, tool):
        if tool.name == 'splitter':
            self.pbSplit.setChecked(tool.toggle)

            self.wSplit.setVisible(tool.toggle)

            number = self.editorModel.splitter.number
            if number != self.sbSplitNumber.value():
                self.sbSplitNumber.setValue(number)

            size = self.editorModel.splitter.size
            if size != self.cbSplitSize.currentIndex():
                self.hsSplitSize.setCurrentIndex(size)

    def on_pbClose_pressed(self):
        print("close")
        if self.editorModel.prop:
            prop = self.editorModel.props[self.editorModel.prop]
            prop.mesh.close_mesh(inplace=True)

    def on_pbFill_pressed(self):
        print("fill")
        if self.editorModel.prop:
            prop = self.editorModel.props[self.editorModel.prop]
            prop.mesh.fill_holes(inplace=True)

    def on_pbSmooth_toggled(self, toggle):
        self.wSmooth.setVisible(toggle)

    def on_pbSmoothApply_pressed(self):
        iterations = self.sbIterations.value()
        if self.editorModel.prop in self.editorModel.props:
            prop = self.editorModel.props[self.editorModel.prop]
            print('I am about to smooth shit of the mesh')
            prop.mesh.smooth(iterations=iterations, inplace=True)

        # if self.editorModel.prop in self.editorModel.props:
        #    prop = self.editorModel.props[self.editorModel.prop]
        #    prop.mesh.subdivide(algorithm='butterfly', inplace=True)

    @pyqtSlot(bool)
    def on_pbSplit_toggled(self, toggle):
        self.editorModel.splitter.toggle = toggle

    @pyqtSlot(int)
    def on_sbSplitNumber_valueChanged(self, value):
        self.editorModel.splitter.number = value

    @pyqtSlot(int)
    def on_cbSplitSize_activated(self, value):
        self.editorModel.splitter.size = value

    def on_pbSplitApply_pressed(self):
        self.editorModel.splitter.cut()






class Mirrorer(QWidget, Ui_Mirrorer):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)
        self.viewport = Viewport()
        self.viewport.istyle = vtk.vtkInteractorStyleTrackballCamera()
        self.viewport.interactor.Initialize()
        self.layout.addWidget(self.viewport)

        self.wImport.setVisible(False)

        self.lookModel = lookModel
        self.lookModel.lookUpdated.connect(self.updateLook)

        self.mirrorerModel = mirrorerModel
        self.mirrorerModel.meshLoaded.connect(self.loadMesh)

        self.implantorModel = implantorModel

        self.stageModel = stageModel

    @pyqtSlot(tuple)
    def updateLook(self, look):
        self.viewport.look_from(look)

    @pyqtSlot()
    def updateRender(self):
        self.viewport.rwindow.Render()

    def loadMesh(self):
        if self.mirrorerModel.mesh:
            mesh = self.mirrorerModel.mesh
            self.actor = PolyActor(mesh,
                                   color='white',
                                   opacity=1.0)
            self.viewport.add_prop(self.actor)

            if self.pbMirrorer.isChecked():
                self.plane = PlaneSelector(self.viewport.interactor,
                                           Plane.XZ(origin=mesh.center),
                                           mesh.bounds)
                self.plane.widget.AddObserver(vtk.vtkCommand.EndInteractionEvent,
                                              self._callback)
                self.plane.show()
                self.viewport.reset_view()
                self.plane._callback(None, None)
                self._callback(None, None)

    def on_pbImport_pressed(self):
        if self.pbManipulator.isChecked():
            self.pbManipulator.setChecked(Qt.Unchecked)
        self.on_pbMirrorer_toggled(False)
        if hasattr(self, 'plane'):
            self.plane.hide()
            del self.plane
        if hasattr(self, 'precut'):
            self.viewport.remove_prop(self.precut)
            del self.precut
        if hasattr(self, 'precut2'):
            del self.precut2
        if self.pbMirrorer.isChecked():
            self.pbMirrorer.setChecked(Qt.Unchecked)

        file_name, _ = QFileDialog.getOpenFileName(self,
                                                   "Открыть STL",
                                                   "",
                                                   "Файлы STL (*.stl)")
        if file_name:
            mesh = Mesh(file_name)
            self.precut = PolyActor(mesh, color='green')
            self.manipulator = CubeManipulator(self.viewport.interactor,
                                               self.precut)
            self.manipulator.show()
            self.viewport.add_prop(self.precut)
            self.viewport.reset_view()

    def on_pushButtonFlipX_pressed(self):
        self.precut.mesh.reflect(plane='x', inplace=True)
        self.manipulator.show()
        self.updateRender()

    def on_pushButtonFlipY_pressed(self):
        self.precut.mesh.reflect(plane='y', inplace=True)
        self.manipulator.show()
        self.updateRender()

    def on_pushButtonFlipZ_pressed(self):
        self.precut.mesh.reflect(plane='z', inplace=True)
        self.manipulator.show()
        self.updateRender()

    def on_tbMinus_pressed(self):
        self.precut.mesh.scale(sx=0.95, sy=0.95, sz=0.95, inplace=True)
        self.manipulator.show()
        self.updateRender()

    def on_tbPlus_pressed(self):
        self.precut.mesh.scale(sx=1.05, sy=1.05, sz=1.05, inplace=True)
        self.manipulator.show()
        self.updateRender()

    def on_pbMirrorer_toggled(self, toggle):
        self.wImport.setHidden(toggle)
        self.wMirrorer.setVisible(toggle)
        if toggle:
            if hasattr(self, 'manipulator'):
                self.manipulator.hide()
                del self.manipulator
            self.loadMesh()

    def on_pbManipulator_toggled(self, toggle):
        if hasattr(self, 'manipulator'):
            self.precut.mesh = self.manipulator.mesh
            self.manipulator.hide()
            self._callback(None, None)
            del self.manipulator

        self.plane.show()

        if toggle:
            self.plane.hide()
            self.manipulator = CubeManipulator(self.viewport.interactor,
                                               self.precut)
            self.manipulator.show()

        self.updateRender()

    def _callback(self, caller, ev):
        if hasattr(self, 'precut'):
            self.viewport.remove_prop(self.precut)

        left, right = self.actor.mesh.disect_by_plane(self.plane.plane)

        if self.rbLeft.isChecked():
            precut = right
            self.precut2 = left
        else:
            precut = left
            self.precut2 = right

        precut.reflect(plane='x', inplace=True)

        if self.rbLeft.isChecked():
            delta = self.actor.mesh.max_x - precut.max_x
        else:
            delta = self.actor.mesh.min_x - precut.min_x

        precut.move(dx=delta, dy=0, dz=0, inplace=True)

        # precut.close_mesh(inplace=True)
        self.precut = PolyActor(precut, color='green')
        self.viewport.add_prop(self.precut)

    def on_pbFind_pressed(self):
        if hasattr(self, 'result'):
            self.viewport.remove_prop(self.result)

        if hasattr(self, 'precut'):
            if hasattr(self, 'manipulator'):
                self.viewport.remove_prop(self.precut)
                self.precut = PolyActor(self.manipulator.mesh, color='green')
                self.viewport.add_prop(self.precut)
            if hasattr(self, 'precut2'):
                mesh = self.precut2
            else:
                mesh = self.actor.mesh
            good_points_indexes = []
            for idx, pt in enumerate(self.precut.mesh.points):
                closest_idx = mesh.find_closest_point(point=pt)
                closest_pt = mesh.points[closest_idx]
                distance = point_distance(pt, closest_pt)
                if distance > self.dsbDistance.value():
                    good_points_indexes.append(idx)

            result = extract_cells_using_points(self.precut.mesh,
                                                good_points_indexes)
            result.extract_largest(inplace=True)
            self.result = PolyActor(mesh=result,
                                    color='red')
            self.viewport.add_prop(self.result)

    def on_pbNext_pressed(self):
        mesh = self.actor.mesh
        implant = self.precut.mesh
        if hasattr(self, 'result'):
            implant = self.result.mesh
        self.implantorModel.addProp('implant', PolyActor(implant))
        self.implantorModel.addProp('mesh', PolyActor(mesh))
        self.stageModel.stage = 5

    def on_buttonGroup_buttonClicked(self, btn):
        self._callback(None, None)

    def on_pbSave_pressed(self):
        file_name, _ = QFileDialog.getSaveFileName(self,
                                                   "Сохранить STL",
                                                   "",
                                                   "Файлы STL (*.stl)")
        if file_name:
            if hasattr(self, 'result'):
                self.result.mesh.save(file_name)
            else:
                self.precut.mesh.save(file_name)
            print(file_name)






class Mounter(QWidget, Ui_Mounter):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)
        self.viewport = Viewport()
        self.viewport.istyle = vtk.vtkInteractorStyleTrackballCamera()
        self.viewport.interactor.Initialize()
        self.layout.addWidget(self.viewport)

        self.wCreate.setVisible(False)

        self._mounts = []
        self._cylinders = []

        self.implant = None
        self.mesh2 = None

        self.lookModel = lookModel
        self.lookModel.lookUpdated.connect(self.updateLook)

        self.mounterModel = mounterModel
        self.mounterModel.loaded.connect(self.loadMesh)

        self.printerModel = printerModel

        self.stageModel = stageModel

        self.imageModel = imageModel
        self.imageModel.imageLoaded.connect(self.groupBox_2.show)

        self.groupBox_2.hide()

    @pyqtSlot(tuple)
    def updateLook(self, look):
        self.viewport.look_from(look)

    def loadMesh(self):
        if self.mounterModel.mesh and self.mounterModel.implant:
            self.actor = PolyActor(self.mounterModel.full_mesh,
                                   color="white",
                                   opacity=0.7)
            self.viewport.add_prop(self.actor)

            self.actor_implant = PolyActor(self.mounterModel.implant,
                                           color="green")
            self.viewport.add_prop(self.actor_implant)

            self.viewport.reset_view()

    def on_char(self, caller, event):
        if hasattr(self, '_widget'):
            polyline = self._widget.points
        else:
            return
        if len(polyline.points) > 1:
            print('Number of points before: {}'.format(len(polyline.points)))
            polyline2 = interpolate_polyline(polyline,
                                             subdivisions=256)
            print('Number of points after: {}'.format(len(polyline.points)))
            polyline2 = choose_closest(polyline2,
                                       self.mounterModel.mesh,
                                       maximum_distance=self.dsbMaximumDistance.value())
            print('Number of points after choose closest: {}'.format(
                len(polyline2.points)))

            polyline2 = thin_out(polyline2,
                                 minimum_step=self.dsbMinimumStep.value())
            print('Number of points after thin out: {}'.format(
                len(polyline2.points)))

            tube = make_ribbon(polyline, width=self.dsbWidth.value())
            tube = normal_extrude(tube, length=self.dsbLength.value())

            if hasattr(self, '_tube_actor'):
                self.viewport.remove_prop(self._tube_actor)
            self._tube_actor = PolyActor(mesh=tube, color='blue', opacity=0.6)
            self.viewport.add_prop(self._tube_actor)

            for cyl in self._cylinders:
                self.viewport.remove_prop(cyl)
            self._cylinders = []

            for pt in polyline2.points:
                cyl_pt_1 = pt
                cyl_pt_2 = vec_add(pt,
                                   [self.dsbLength.value() * x for x in get_normal(self.mounterModel.full_mesh, pt)])
                cyl = mega_tube(pt,
                                cyl_pt_2,
                                radius=self.dsbRadius.value())

                self._cylinders.append(PolyActor(mesh=cyl,
                                                 color='white',
                                                 edge_visibility=False))

            for cyl in self._cylinders:
                self.viewport.add_prop(cyl)

    @pyqtSlot(float)
    def on_dsbWidth_valueChanged(self, value):
        self.on_char(None, None)

    @pyqtSlot(float)
    def on_dsbLength_valueChanged(self, value):
        self.on_char(None, None)

    @pyqtSlot(float)
    def on_dsbRadius_valueChanged(self, value):
        self.on_char(None, None)

    @pyqtSlot(float)
    def on_dsbMinimumStep_valueChanged(self, value):
        self.on_char(None, None)

    @pyqtSlot(float)
    def on_dsbMaximumDistance_valueChanged(self, value):
        self.on_char(None, None)

    @pyqtSlot(QListWidgetItem)
    def on_listWidget_itemClicked(self, item):
        index = self.listWidget.row(item)

        for i in self._mounts:
            i['tube'].color = 'blue'
        self._mounts[index]['tube'].color = 'green'

        self.pbDelete.setEnabled(True)

        self.viewport.rwindow.Render()

    def on_pbDelete_pressed(self):
        item = self.listWidget.currentItem()
        index = self.listWidget.row(item)
        self.viewport.remove_prop(self._mounts[index]['tube'])
        del self._mounts[index]
        self.listWidget.takeItem(index)

        self.pbDelete.setEnabled(False)

        for i in self._mounts:
            i['tube'].color = 'blue'

        self.viewport.rwindow.Render()

    def on_pbCreate_toggled(self, toggle):
        self.listWidget.clearSelection()
        for i in self._mounts:
            i['tube'].color = 'blue'
        self.viewport.rwindow.Render()

        self.pbCreate.setChecked(toggle)
        self.wCreate.setVisible(toggle)

        self._widget = SurfaceProbe(interactor=self.viewport.interactor,
                                    mesh=self.mounterModel.full_mesh,
                                    actor=self.actor)
        self._widget.show()
        self.viewport.register_callback(vtk.vtkCommand.RenderEvent,
                                        self.on_char)

    def on_pbSave_pressed(self):
        self.on_pbCreate_toggled(False)

        if hasattr(self, '_widget') and hasattr(self, '_tube_actor'):
            self._mounts.append({'widget': self._widget,
                                 'tube': self._tube_actor})
            self._widget.hide()
            del self._widget
            del self._tube_actor

            self.listWidget.addItem('крепление')

    def on_pbNext_pressed(self):
        if self.mounterModel.implant:
            # pd = QProgressDialog(self)
            # pd.setMinimum(0)
            # pd.setMaximum(100)
            # pd.setValue(0)
            # pd.resize(500, 100)
            # pd.setLabel(QLabel("Объединение креплений и импланта...", pd))
            # pd.show()

            mounts = []
            for tube in self._mounts:
                mounts.append(tube['tube'].mesh)
            mounts.append(self.mounterModel.implant)

            implant = Mesh.from_meshes(mounts)
            # callback = lambda caller, id: pd.setValue(
            #     round(caller.GetProgress() * 100))
            callback = None
            if self.cbImplicitize.checkState():
                implant = implicitize(implant, callback=callback)
            self.printerModel.implant = implant

        self.stageModel.stage = 7

    def on_pbApply_pressed(self):
        self.viewport.remove_prop(self.mesh2)
        mesh2 = self.imageModel.image.extract_surface(
            threshold=self.spinBox.value())
        self.mesh2 = PolyActor(mesh2, color='red', opacity=0.4)
        self.viewport.add_prop(self.mesh2)

    def on_pbDelete2_pressed(self):
        self.viewport.remove_prop(self.mesh2)


def get_normal(mesh, point):
    pt_idx = mesh.find_closest_point(point)
    normal = mesh.normals[pt_idx]
    return [-x for x in normal]


def mega_tube(pt1, pt2, radius=0.8):
    source = vtk.vtkLineSource()
    source.SetPoint1(pt1)
    source.SetPoint2(pt2)
    source.Update()

    tube_filter = vtk.vtkTubeFilter()
    tube_filter.SetInputData(source.GetOutput())
    tube_filter.SetCapping(True)
    tube_filter.SetRadius(radius)
    tube_filter.SetNumberOfSides(24)
    tube_filter.Update()
    return Mesh(tube_filter.GetOutput())


def make_ribbon(polyline, width=2.0):
    """Делает из линии ленту нулевой толщины и заданной ширины"""
    ribbon_filter = vtk.vtkRibbonFilter()
    ribbon_filter.SetInputData(polyline)
    ribbon_filter.SetWidth(width)
    ribbon_filter.Update()
    result = Mesh(ribbon_filter.GetOutput())
    return result


def normal_extrude(mesh, length=1.0):
    mesh.compute_normals()
    extruder = vtk.vtkLinearExtrusionFilter()
    extruder.SetInputData(mesh)
    extruder.SetExtrusionTypeToNormalExtrusion()
    extruder.SetCapping(True)
    extruder.SetScaleFactor(length)
    extruder.Update()
    return Mesh(extruder.GetOutput())


def implicitize(mesh, value=0.01):
    """Запускать при окончательной подготовке импланта"""
    implicit = vtk.vtkImplicitPolyDataDistance()
    implicit.SetInput(mesh)

    sample = vtk.vtkSampleFunction()
    sample.SetImplicitFunction(implicit)
    sample.SetModelBounds(*mesh.bounds)
    sample.SetSampleDimensions(120, 120, 120)
    sample.CappingOff()

    surface = vtk.vtkContourFilter()
    surface.SetInputConnection(sample.GetOutputPort())
    surface.SetValue(0, value)
    surface.ComputeNormalsOn()
    surface.ComputeGradientsOn()
    surface.Update()

    return Mesh(surface.GetOutput())


def to_implicit(mesh):
    imp = vtk.vtkImplicitPolyDataDistance()
    imp.SetInput(mesh)
    return imp


def implicitly_combine(main, to_add_list, to_subtract_list):
    all_meshes = [main]
    all_meshes.extend(to_add_list)
    all_meshes.extend(to_subtract_list)
    all_mesh = Mesh.from_meshes(all_meshes)
    bounding_box = all_mesh.bounds
    del all_mesh

    main_imp = to_implicit(main)
    to_add_imp = [to_implicit(mesh) for mesh in to_add_list]
    to_subtract_imp = [to_implicit(mesh) for mesh in to_subtract_list]

    boolean_sum = vtk.vtkImplicitBoolean()
    boolean_sum.SetOperationTypeToUnion()
    boolean_sum.AddFunction(main_imp)
    for mesh in to_add_imp:
        boolean_sum.AddFunction(mesh)

    boolean_diff = vtk.vtkImplicitBoolean()
    boolean_diff.SetOperationTypeToDifference()
    boolean_diff.AddFunction(boolean_sum)
    for mesh in to_subtract_imp:
        boolean_diff.AddFunction(mesh)

    sampler = vtk.vtkSampleFunction()
    sampler.SetImplicitFunction(boolean_diff)
    sampler.SetModelBounds(bounding_box)
    sampler.SetSampleDimensions(120, 120, 120)

    surface = vtk.vtkContourFilter()
    surface.SetInputConnection(sampler.GetOutputPort())
    surface.SetValue(0, 0.001)
    surface.Update()

    return Mesh(surface.GetOutput())


def interpolate_polyline(polyline, subdivisions=256):
    spline = vtk.vtkSplineFilter()
    spline.SetInputData(polyline)
    spline.SetSubdivideToSpecified()
    spline.SetNumberOfSubdivisions(256)
    spline.Update()
    return Mesh(spline.GetOutput())


class SurfaceProbe(object):

    def __init__(self, interactor, mesh, actor):
        self.interactor = interactor
        self.mesh = mesh

        self.point_placer = vtk.vtkPolygonalSurfacePointPlacer()
        self.point_placer.GetPolys().AddItem(mesh)
        self.point_placer.AddProp(actor)
        self.point_placer.SnapToClosestPointOn()

        self.widget = vtk.vtkContourWidget()
        self.widget.SetInteractor(interactor)
        self.widget.SetPriority(1.0)

        self.representation = self.widget.GetRepresentation()
        self.representation.AlwaysOnTopOn()
        self.representation.SetLineInterpolator(
            vtk.vtkLinearContourLineInterpolator())
        self.representation.GetLinesProperty().RenderPointsAsSpheresOn()
        self.representation.SetPointPlacer(self.point_placer)

    @property
    def points(self):
        return Mesh(self.representation.GetContourRepresentationAsPolyData())

    def show(self):
        self.widget.On()

    def hide(self):
        self.widget.Off()


def choose_closest(polyline, mesh, maximum_distance=1.0):
    good_points = []
    for pt in polyline.points:
        closest_idx = mesh.find_closest_point(pt)
        closest_point = mesh.points[closest_idx]
        distance = point_distance(pt, closest_point)
        if distance < maximum_distance:
            good_points.append(pt)
    return Mesh.from_points(good_points)


def thin_out(polyline, minimum_step=10.0):
    good_points = []
    first_point, last_point = polyline.points[1], polyline.points[-1]
    good_points.append(first_point)
    current_point = first_point
    for pt in polyline.points:
        distance = point_distance(current_point, pt)
        if distance >= minimum_step:
            good_points.append(pt)
            current_point = pt
    good_points.append(last_point)
    return Mesh.from_points(good_points)








class PatientCard(QWidget, Ui_PatientCard):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self._photo = None
        self._card = {"name": "",
                      "sex": "М",
                      "birthdate": "1900.01.30",
                      "weight": 0.0}
        self._vti = None

        self.pbNext.setEnabled(False)

        self.widgetSlices.setSlices([])
        self.on_dateTimeEditBirthdate_dateChanged(QDate.fromString(self._card['birthdate'],
                                                                   'yyyy.MM.dd'))

        self.labelPhoto.setPixmap(QPixmap(':/icons/photo.jpg').scaled(200,
                                                                      200,
                                                                      Qt.KeepAspectRatio))
        self.labelPreview.setPixmap(QPixmap(':/icons/photo.jpg').scaled(300,
                                                                        300,
                                                                        Qt.KeepAspectRatio))

        self.imageModel = imageModel
        self.stageModel = stageModel
        self.editorModel = editorModel

    @pyqtSlot(QDate)
    def on_dateTimeEditBirthdate_dateChanged(self, born):
        today = QDate().currentDate()
        age = today.year() - born.year() - ((today.month(), today.day())
                                            < (born.month(), born.day()))
        self.lineEditAge.setText(str(age))

    @pyqtSlot()
    def on_pushButtonPhoto_pressed(self):
        fileName, _ = QFileDialog.getOpenFileName(self,
                                                  "Выбор фотографии пациента",
                                                  "",
                                                  "JPEG (*.JPEG *.jpeg *.JPG *.jpg *.JPE *.jpe *JFIF *.jfif);; PNG (*.PNG *.png)")
        if fileName:
            self._photo = fileName
            self.labelPhoto.setPixmap(
                QPixmap(self._photo).scaled(200, 200, Qt.KeepAspectRatio))

    def on_pushButtonDICOM_pressed(self):
        self.ddd = DICOMDatabaseDialog(self)
        self.ddd.slices.connect(self.setSlices)
        self.ddd.preview.connect(self.setPreview)
        self.ddd.show()

    def on_pushButtonSTL_pressed(self):
        file_name, _ = QFileDialog.getOpenFileName(self,
                                                   "Открыть STL",
                                                   "",
                                                   "Файлы STL (*.stl)")
        if file_name:
            self.editorModel.addProp('mesh', PolyActor(Mesh(file_name)))
            self.stageModel.stage = 3

    @pyqtSlot(list)
    def setSlices(self, slices):
        metadata = dicom.read_metadata(slices[0])
        if self.lineEditName.text() == "":
            self.lineEditName.setText(str(metadata['patient_name']))
        if metadata['patient_sex'] == "F":
            self.comboBoxSex.setCurrentIndex(1)
        else:
            self.comboBoxSex.setCurrentIndex(0)
        pbd = str(metadata['patient_birth_date'])
        if pbd:
            qbd = QDate(int(pbd[:4]), int(pbd[4:6]), int(pbd[6:8]))
        else:
            qbd = QDate(1900, 1, 30)
        if self.dateTimeEditBirthdate.date() == QDate.fromString('1900.01.30', 'yyyy.MM.dd'):
            self.dateTimeEditBirthdate.setDate(qbd)

        self.widgetSlices.setSlices(slices)
        self._vti = dicom.read_volume(slices)
        self.imageModel.setImage(self._vti)

        self.pbNext.setEnabled(True)

    @pyqtSlot(numpy.ndarray)
    def setPreview(self, preview):
        if preview is not None:
            height, width, channel = preview.shape
            bytesPerLine = 3 * width
            qPix = QPixmap(QImage(preview.data,
                                  width,
                                  height,
                                  bytesPerLine,
                                  QImage.Format_RGB888)).scaled(300,
                                                                300,
                                                                Qt.KeepAspectRatio)
        else:
            qPix = QPixmap(QImage(':/icons/photo.jpg')).scaled(300,
                                                               300,
                                                               Qt.KeepAspectRatio)
        self.labelPreview.setPixmap(qPix)

    def on_pbNext_pressed(self):
        self.stageModel.stage = 1





class Preprocessor(QWidget, Ui_Preprocessor):
    previewdialog = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.colormap.setCmapHidden(True)
        self.view2d.tbTools.setHidden(True)

        self.imageModel = imageModel

        self.planeModel = axialModel
        self.planeModel.cmapUpdated.connect(self.updateCmap)

        self.stageModel = stageModel

        for color_name in cmap.cmaps():
            self.cbCmap.addItem(color_name)
        self.updateCmap()

    @pyqtSlot(str)
    def on_comboBoxOrientation_activated(self, orientation):
        self.view2d.setOrientation(orientation.lower())

    @pyqtSlot(str)
    def on_cbCmap_activated(self, cmap_name):
        self.planeModel.cmap = cmap_name

    @pyqtSlot()
    def on_pbOrigin_pressed(self):
        self.imageModel.setOrigin()

    @pyqtSlot(float)
    def on_smoothSigma_valueChanged(self, sigma):
        self.smoothApply.setDisabled(False)

    @pyqtSlot(float)
    def on_smoothWindow_valueChanged(self, window):
        self.smoothApply.setDisabled(False)

    @pyqtSlot()
    def on_smoothApply_pressed(self):
        self.smoothApply.setDisabled(True)
        self.imageModel.setSmooth(self.smoothSigma.value(),
                                  self.smoothWindow.value())

    @pyqtSlot(int)
    def setDenoiseFactor(self, factor):
        self.denoiseApply.setDisabled(False)
        if self.denoiseFactor_2.value() != factor:
            self.denoiseFactor_2.setValue(factor)
        if self.denoiseFactor.value() != factor:
            self.denoiseFactor.setValue(factor)

    @pyqtSlot(int)
    def setDenoiseThreshold(self, threshold):
        self.denoiseApply.setDisabled(False)
        if self.denoiseThreshold_2.value() != threshold:
            self.denoiseThreshold_2.setValue(threshold)
        if self.denoiseThreshold.value() != threshold:
            self.denoiseThreshold.setValue(threshold)

    @pyqtSlot()
    def on_denoiseApply_pressed(self):
        self.denoiseApply.setDisabled(True)
        self.imageModel.setDenoise(self.denoiseFactor.value(),
                                   self.denoiseThreshold.value())

    @pyqtSlot()
    def on_pushButtonEnhance_pressed(self):
        self.imageModel.setEnhance()

    @pyqtSlot()
    def on_pushButtonFlipX_pressed(self):
        self.imageModel.setFlip(axis='x')

    @pyqtSlot()
    def on_pushButtonFlipY_pressed(self):
        self.imageModel.setFlip(axis='y')

    @pyqtSlot()
    def on_pushButtonFlipZ_pressed(self):
        self.imageModel.setFlip(axis='z')

    @pyqtSlot(bool)
    def on_toolButtonLineProbe_toggled(self, toggle):
        self.view2d.on_toolButtonLineProbe_toggled(toggle)

    @pyqtSlot()
    def on_toolButtonZoomIn_pressed(self):
        self.view2d.viewport.camera.Zoom(1.1)
        self.view2d.viewport.rwindow.Render()

    @pyqtSlot()
    def on_toolButtonZoomOut_pressed(self):
        self.view2d.viewport.camera.Zoom(0.9)
        self.view2d.viewport.rwindow.Render()

    @pyqtSlot()
    def updateCmap(self):
        cmap_name = self.planeModel.cmap

        if self.cbCmap.currentText() != cmap_name:
            self.cbCmap.setCurrentText(cmap_name)
            print("{} set: {}".format(self.objectName(), cmap_name))

    def on_pushButtonPreview_pressed(self):
        self.previewdialog.emit()

    def on_pbNext_pressed(self):
        self.stageModel.stage = 2




class PreviewDialog(QDialog, Ui_PreviewDialog):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.setWindowFlags(self.windowFlags() |
                            Qt.WindowMaximizeButtonHint |
                            Qt.WindowMinimizeButtonHint)
        # ~Qt.WindowCloseButtonHint)

        self.dwHistogram_.hide()

        self.imageModel = imageModel

        self.view3dModel = view3dModel
        self.view3dModel.tissueUpdated.connect(self.updateTissue)

        self.layoutModel = layoutModel

        self.editorModel = editorModel

        self.implantorModel = implantorModel

        self.histogramModel = histogramModel
        self.histogramModel.histogramEnabled.connect(
            self.dwHistogram_.setVisible)

        axialModel.sliceUpdated.connect(self.updateAxial)
        sagittalModel.sliceUpdated.connect(self.updateSagittal)
        coronalModel.sliceUpdated.connect(self.updateCoronal)

        self.colormap.loadImage()
        self.updateAxial()
        self.updateSagittal()
        self.updateCoronal()

    def updateAxial(self):
        for prop in self.editorModel.props:
            actor = self.editorModel.props[prop]

            # axial
            plane_axial = Plane.XY(
                origin=self.layouts.axial._viewer.GetOrigin())
            clipped = actor.mesh.slice_by_plane(plane=plane_axial)

            if hasattr(self, 'contour_axial'):
                self.contour_axial.mesh = clipped
            else:
                self.contour_axial = PolyActor(mesh=clipped,
                                               color=actor.color,
                                               render_lines_as_tubes=True,
                                               line_width=2)
                self.layouts.axial.viewport.add_prop(self.contour_axial)

        for prop in self.implantorModel.props:
            actor = self.implantorModel.props[prop]

            # axial
            plane_axial = Plane.XY(
                origin=self.layouts.axial._viewer.GetOrigin())
            clipped = actor.mesh.slice_by_plane(plane=plane_axial)

            if hasattr(self, 'contour_axial'):
                self.contour_axial.mesh = clipped
            else:
                self.contour_axial = PolyActor(mesh=clipped,
                                               color=actor.color,
                                               render_lines_as_tubes=True,
                                               line_width=2)
                self.layouts.axial.viewport.add_prop(self.contour_axial)

        self.layouts.axial.viewport.rwindow.Render()

    def updateSagittal(self):
        for prop in self.editorModel.props:
            actor = self.editorModel.props[prop]

            # sagittal
            plane_sagittal = Plane.XZ(
                origin=self.layouts.sagittal._viewer.GetOrigin())
            clipped = actor.mesh.slice_by_plane(plane=plane_sagittal)

            if hasattr(self, 'contour_sagittal'):
                self.contour_sagittal.mesh = clipped
            else:
                self.contour_sagittal = PolyActor(mesh=clipped,
                                                  color=actor.color,
                                                  render_lines_as_tubes=True,
                                                  line_width=2)
                self.layouts.sagittal.viewport.add_prop(self.contour_sagittal)

        for prop in self.implantorModel.props:
            actor = self.implantorModel.props[prop]

            # sagittal
            plane_sagittal = Plane.XZ(
                origin=self.layouts.sagittal._viewer.GetOrigin())
            clipped = actor.mesh.slice_by_plane(plane=plane_sagittal)

            if hasattr(self, 'contour_sagittal'):
                self.contour_sagittal.mesh = clipped
            else:
                self.contour_sagittal = PolyActor(mesh=clipped,
                                                  color=actor.color,
                                                  render_lines_as_tubes=True,
                                                  line_width=2)
                self.layouts.sagittal.viewport.add_prop(self.contour_sagittal)

        self.layouts.sagittal.viewport.rwindow.Render()

    def updateCoronal(self):
        for prop in self.editorModel.props:
            actor = self.editorModel.props[prop]

            # coronal
            plane_coronal = Plane.YZ(
                origin=self.layouts.coronal._viewer.GetOrigin())
            clipped = actor.mesh.slice_by_plane(plane=plane_coronal)

            if hasattr(self, 'contour_coronal'):
                self.contour_coronal.mesh = clipped
            else:
                self.contour_coronal = PolyActor(mesh=clipped,
                                                 color=actor.color,
                                                 render_lines_as_tubes=True,
                                                 line_width=2)
                self.layouts.coronal.viewport.add_prop(self.contour_coronal)

        for prop in self.implantorModel.props:
            actor = self.implantorModel.props[prop]

            # coronal
            plane_coronal = Plane.YZ(
                origin=self.layouts.coronal._viewer.GetOrigin())
            clipped = actor.mesh.slice_by_plane(plane=plane_coronal)

            if hasattr(self, 'contour_coronal'):
                self.contour_coronal.mesh = clipped
            else:
                self.contour_coronal = PolyActor(mesh=clipped,
                                                 color=actor.color,
                                                 render_lines_as_tubes=True,
                                                 line_width=2)
                self.layouts.coronal.viewport.add_prop(self.contour_coronal)

        self.layouts.coronal.viewport.rwindow.Render()

    @pyqtSlot(QAbstractButton, bool)
    def on_buttonGroupLayouts_buttonToggled(self, btn, toggle):
        if toggle == True:
            if btn == self.tbLayoutClassicRight:
                self.layoutModel.state = LayoutModel.CLASSIC_RIGHT
            elif btn == self.tbLayoutClassicBottom:
                self.layoutModel.state = LayoutModel.CLASSIC_BOTTOM
            elif btn == self.tbLayoutTwoByTwo:
                self.layoutModel.state = LayoutModel.TWO_BY_TWO
            elif btn == self.tbLayoutOnly3D:
                self.layoutModel.state = LayoutModel.ONLY_3D
            elif btn == self.tbLayoutOnlyAxial:
                self.layoutModel.state = LayoutModel.ONLY_AXIAL
            elif btn == self.tbLayoutOnlySagittal:
                self.layoutModel.state = LayoutModel.ONLY_SAGITTAL
            elif btn == self.tbLayoutOnlyCoronal:
                self.layoutModel.state = LayoutModel.ONLY_CORONAL

    @pyqtSlot(QAbstractButton, bool)
    def on_buttonGroupTissue_buttonToggled(self, btn, toggle):
        if toggle == True:
            if btn == self.radioButtonBone:
                self.layouts.view3d.actor.tissue = "bone"
                self.layouts.view3d.updateRender()
                self.view3dModel.tissue = view3dModel.TISSUE_BONE
            elif btn == self.radioButtonMuscle:
                self.layouts.view3d.actor.tissue = "muscle"
                self.layouts.view3d.updateRender()
                self.view3dModel.tissue = view3dModel.TISSUE_MUSCLE
            elif btn == self.radioButtonSkin:
                self.layouts.view3d.actor.tissue = "skin"
                self.layouts.view3d.updateRender()
                self.view3dModel.tissue = view3dModel.TISSUE_SKIN

    @pyqtSlot()
    def updateTissue(self):
        if self.view3dModel.mode != view3dModel.MODE_VOLUME:
            return
        print("{} tissue set {}".format(self.objectName(),
                                        self.view3dModel.tissue))

    @pyqtSlot()
    def on_pbClose_pressed(self):
        self.hide()

    def on_pbHistogram_toggled(self, toggle):
        self.histogramModel.showHistogram(toggle)
        if toggle:
            self.lineprobe = LineProbe(self.layouts.view3d.viewport.interactor,
                                       self.layouts.view3d.actor,
                                       on_changed=self.histogramModel.setHistogram)
            self.lineprobe.image = self.imageModel.image
            self.lineprobe.place(self.imageModel.image.bounds)
            self.lineprobe.callback(1, 1)
            self.lineprobe.show()
        else:
            self.lineprobe.hide()






class Printer(QWidget, Ui_Printer):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)
        self.viewport = Viewport()
        self.viewport.istyle = vtk.vtkInteractorStyleTrackballCamera()
        self.viewport.interactor.Initialize()
        self.layout.addWidget(self.viewport)

        self.lookModel = lookModel
        self.lookModel.lookUpdated.connect(self.updateLook)

        self.printerModel = printerModel
        self.printerModel.loaded.connect(self.loadMesh)

    @pyqtSlot(tuple)
    def updateLook(self, look):
        self.viewport.look_from(look)

    def loadMesh(self):
        if self.printerModel.implant:
            self.implant = Mesh(self.printerModel.implant)
            self.viewport.add_prop(PolyActor(self.implant,
                                             color="white"))
            self.viewport.reset_view()

    def on_pbFix_pressed(self):
        self.implant.clean()
        self.viewport.rwindow.Render()

    def on_pbSave_pressed(self):
        file_name, _ = QFileDialog.getSaveFileName(self,
                                                   "Сохранить STL",
                                                   "",
                                                   "Файлы STL (*.stl)")
        if file_name:
            self.implant.save(file_name)
            print(file_name)

    def on_rbHigh_toggled(self, toggle):
        if toggle:
            self.implant = Mesh(self.printerModel.implant)
            self.viewport.rwindow.Render()

    def on_rbMiddle_toggled(self, toggle):
        if toggle:
            self.implant.decimate(algorithm='pro', inplace=True, reduction=0.6)
            self.viewport.rwindow.Render()

    def on_rbLow_toggled(self, toggle):
        if toggle:
            self.implant.decimate(algorithm='pro', inplace=True, reduction=0.3)
            self.viewport.rwindow.Render()





class ProjectDialog(QDialog, Ui_ProjectDialog):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.projectModel = projectModel

    def on_pushButtonCreateProject_pressed(self):
        self.showCADSI()

    def on_pushButtonOpenProject_pressed(self):
        fileName, _ = QFileDialog.getOpenFileName(self,
                                                  "Открыть проект",
                                                  "",
                                                  "Файлы проектов (*.cadsi)")
        if fileName:
            print(fileName)
            self.projectModel.load(fileName)
            self.showCADSI()

    def showCADSI(self):
        self.mw = MainWindow()
        self.mw.showMaximized()
        self.close()




class PropsTree(QWidget, Ui_PropsTree):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.editorModel = editorModel
        self.editorModel.propSelected.connect(self.selectProp)
        self.editorModel.propsUpdated.connect(self.updateProps)

        self.selectProp()

    def setModel(self, model):
        self.editorModel = model
        self.editorModel.propSelected.connect(self.selectProp)
        self.editorModel.propsUpdated.connect(self.updateProps)

        self.selectProp()

    def selectProp(self):
        toggle = bool(self.editorModel.prop)
        self.pbSave.setEnabled(toggle)
        self.pbCopy.setEnabled(toggle)
        self.pbDelete.setEnabled(toggle)

        key = self.editorModel.prop
        if key:
            items = self.tree.findItems(key, Qt.MatchContains)
            if len(items) > 0:
                self.tree.setCurrentItem(items[0])
        else:
            self.tree.selectionModel().clearSelection()

    def updateProps(self):
        self.tree.clear()
        for key in self.editorModel.props:
            item = QTreeWidgetItem([key])
            item.setFlags(item.flags() |
                          Qt.ItemIsUserCheckable |
                          Qt.ItemIsEnabled)
            if self.editorModel.props[key].GetVisibility():
                item.setCheckState(0, Qt.Checked)
            else:
                item.setCheckState(0, Qt.Unchecked)
            self.tree.addTopLevelItem(item)
            if key == self.editorModel.prop:
                self.tree.setCurrentItem(item)

    def on_tree_itemChanged(self, item, column):
        key = item.text(column)
        toggle = item.checkState(column)
        self.editorModel.setVisibility(key, toggle)

    def on_tree_itemPressed(self, item, column):
        key = item.text(column)
        self.editorModel.prop = key

    def on_pbSave_pressed(self):
        file_name, _ = QFileDialog.getSaveFileName(self,
                                                   "Сохранить STL",
                                                   "",
                                                   "Файлы STL (*.stl)")
        if file_name:
            self.editorModel.saveProp(file_name)
            print(file_name)

    def on_pbCopy_pressed(self):
        self.editorModel.copyProp(self.editorModel.prop + '.cp')

    def on_pbDelete_pressed(self):
        self.editorModel.delProp()





class SliceMetadata(QWidget, Ui_SliceMetadata):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self._slices = []

    def setSlices(self, slices):
        self._slices = slices
        if self._slices == []:
            self.spinBox.setMaximum(0)
            self.horizontalSlider.setMaximum(0)
            self.setEnabled(False)
        else:
            self.spinBox.setMaximum(len(self._slices) - 1)
            self.horizontalSlider.setMaximum(len(self._slices) - 1)
            self.setEnabled(True)

        self.updateTable(0)

    @pyqtSlot(int)
    def updateTable(self, idx):
        self.tableWidget.setRowCount(0)
        self.label.setText("Путь к файлу")

        if self.spinBox.value() != idx:
            self.spinBox.setValue(idx)
        if self.horizontalSlider.value() != idx:
            self.horizontalSlider.setValue(idx)

        try:
            slice = self._slices[idx]
        except IndexError:
            return

        self.label.setText(slice)

        ds = read_file(slice, stop_before_pixels=True)
        for row, data in enumerate(ds):
            self.tableWidget.insertRow(self.tableWidget.rowCount())
            item = QTableWidgetItem(str(data.tag))
            self.tableWidget.setItem(row, 0, item)
            item = QTableWidgetItem(str(data.name))
            self.tableWidget.setItem(row, 1, item)
            if isinstance(data.value, bytes):
                data_value = str(data.value.decode("utf-8", "ignore")).strip()
            else:
                data_value = str(data.value)
            item = QTableWidgetItem(data_value)
            self.tableWidget.setItem(row, 2, item)
            item = QTableWidgetItem(str(data.VR))
            self.tableWidget.setItem(row, 3, item)

        self.tableWidget.resizeRowsToContents()
        self.tableWidget.resizeColumnsToContents()
        self.tableWidget.horizontalHeader().setSectionResizeMode(2,
                                                                 QHeaderView.Stretch)

    @pyqtSlot(int)
    def on_spinBox_valueChanged(self, val):
        self.updateTable(val)

    @pyqtSlot(int)
    def on_horizontalSlider_valueChanged(self, val):
        self.updateTable(val)




class Stages(QTabWidget, Ui_Stages):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        for tab in range(1, 9):
            self.setTabEnabled(tab, False)

        self.stageModel = stageModel
        self.stageModel.stageUpdated.connect(self.updateStage)

        self.imageModel = imageModel
        self.imageModel.imageLoaded.connect(self.loadImage)

        self.editorModel = editorModel
        self.editorModel.propsUpdated.connect(self.updateProps)

        self.mirrorerModel = mirrorerModel
        self.mirrorerModel.meshLoaded.connect(self.loadMirrorer)

        self.implantorModel = implantorModel
        self.implantorModel.propsUpdated.connect(self.updateProps)

        self.mounterModel = mounterModel
        self.mounterModel.loaded.connect(self.loadMounter)

        self.printerModel = printerModel
        self.printerModel.loaded.connect(self.loadPrinter)

    def updateStage(self):
        if self.stageModel.stage != self.currentIndex():
            self.setCurrentIndex(self.stageModel.stage)

    def loadImage(self):
        self.setTabEnabled(1, True)
        self.setTabEnabled(2, True)

    def updateProps(self):
        if len(self.editorModel.props) > 0:
            if not self.isTabEnabled(3):
                self.setTabEnabled(3, True)
        if len(self.implantorModel.props) > 0:
            if not self.isTabEnabled(5):
                self.implantor.viewport.reset_view()
                self.setTabEnabled(5, True)

    def loadMirrorer(self):
        self.setTabEnabled(4, True)

    def loadMounter(self):
        self.setTabEnabled(6, True)

    def loadPrinter(self):
        self.setTabEnabled(7, True)



class StatusBar(QStatusBar):

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.process = psutil.Process(os.getpid())

        self.tmr = QTimer()
        self.tmr.setInterval(1000)
        self.tmr.timeout.connect(self.updateUsage)
        self.tmr.start()

    def updateUsage(self):
        cpu = round(self.process.cpu_percent(), 2)
        memory = round(self.process.memory_percent(), 2)
        self.showMessage('ЦП: {}% Память: {}%'.format(cpu, memory))


class Threshold(QWidget):
    levelMinUpdated = pyqtSignal(int)
    levelMaxUpdated = pyqtSignal(int)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        from ..views.threshold_ui import Ui_Threshold
        self.ui = Ui_Threshold()
        self.ui.setupUi(self)

        self.ui.sbLevelMax.setSingleStep(-1)
        self.ui.sbLevelMax.setRange(self.ui.slider.density_min,
                                    self.ui.slider.density_max)
        self.ui.sbLevelMin.setSingleStep(-1)
        self.ui.sbLevelMin.setRange(self.ui.slider.density_min,
                                    self.ui.slider.density_max)

        self.ui.slider.levelMinUpdated.connect(self.updateLevelMin)
        self.ui.slider.levelMaxUpdated.connect(self.updateLevelMax)

        self.updateLevelMin()
        self.updateLevelMax()

        self.setMinimumWidth(35)
        self.setMaximumWidth(35)

    def updateLevelMin(self):
        level = self.ui.slider.level_min
        if self.ui.sbLevelMin.value() != level:
            self.ui.sbLevelMin.setValue(level)

            self.levelMinUpdated.emit(level)

    def updateLevelMax(self):
        level = self.ui.slider.level_max
        if self.ui.sbLevelMax.value() != level:
            self.ui.sbLevelMax.setValue(level)

            self.levelMaxUpdated.emit(level)

    @pyqtSlot(int)
    def on_sbLevelMax_valueChanged(self, value):
        self.ui.slider.level_max = value

    @pyqtSlot(int)
    def on_sbLevelMin_valueChanged(self, value):
        self.ui.slider.level_min = value


class ThresholdSlider(QWidget):
    levelMinUpdated = pyqtSignal()
    levelMaxUpdated = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self._level_min = None
        self._level_max = None
        self._densities = [-2048, 2048]

        self._click_type = None
        self._click_pos = None

        self._coordinates = {}

        self.level_min = 400
        self.level_max = 1500
        self.densities = [-2048, 2048]

        # maximum width
        self._font = QFont('Decorative', 7)
        fmw = QFontMetrics(self._font).width(str(self.density_min))
        self.setMinimumWidth(35)
        self.setMaximumWidth(35)
        # self.setMinimumWidth(fmw + 20)
        # self.setMaximumWidth(fmw + 20)

    @property
    def level_min(self):
        return self._level_min

    @level_min.setter
    def level_min(self, value):
        if self.level_min != value:
            self._level_min = value
            self.update()
            self.levelMinUpdated.emit()

    @property
    def level_max(self):
        return self._level_max

    @level_max.setter
    def level_max(self, value):
        if self.level_max != value:
            self._level_max = value
            self.update()
            self.levelMaxUpdated.emit()

    @property
    def densities(self):
        return self._densities

    @property
    def density_min(self):
        return self.densities[0]

    @property
    def density_max(self):
        return self.densities[1]

    @densities.setter
    def densities(self, value):
        self._densities = value
        self.update()

    def mousePressEvent(self, event):
        if (event.buttons() == Qt.LeftButton):
            self._click_type = self.getTypeByPixel(event.y())
            self._click_pos = event.y()

    def mouseMoveEvent(self, event):
        if self._click_type == 1:
            self.moveLevelMax(self._click_pos - event.y())
        elif self._click_type == 2:
            self.moveLevel(self._click_pos - event.y())
        elif self._click_type == 3:
            self.moveLevelMin(self._click_pos - event.y())
        self._click_pos = event.y()

    def mouseReleaseEvent(self, event):
        self._click_type = None
        self._click_pos = None

    def paintEvent(self, event):
        w = self.width()
        h = self.height()

        qp = QPainter(self)

        qp.setFont(self._font)
        self._fh = QFontMetrics(self._font).height()

        self.updateCoordinates()

        for p in self._coordinates:
            if ((self._coordinates[p] % 500) == 0):
                qp.drawLine(0, p, 15, p)
                # qp.drawText(QRectF(20, p - (self._fh / 2), w, h),
                #             Qt.AlignLeft,
                #             str(self._coordinates[p]))
            elif ((self._coordinates[p] % 100) == 0):
                qp.drawLine(0, p, 5, p)

        self.updateLevelVars()

        qp.setPen(QColor(20, 20, 140))
        qp.setBrush(QColor(20, 140, 20, 70))
        qp.drawRect(0, self.window_x, 15, self.window_h)

        qp.setPen(QColor(20, 140, 140))
        qp.setBrush(QColor(20, 140, 20, 100))
        qp.drawRect(0, self.window_x, 15, 5)
        qp.drawRect(0, self.window_x + self.window_h - 5, 15, 5)

    def moveLevel(self, y):
        self.moveLevelMin(y)
        self.moveLevelMax(y)

    def moveLevelMin(self, y):
        pix = self.getPixelByDensity(self.level_min) - y
        if pix < 0:
            pix = 0
        elif pix > self.height() - 1:
            pix = self.height() - 1
        elif pix < self.getPixelByDensity(self.level_max - 50):
            pix = self.getPixelByDensity(self.level_max - 50)

        wc = self._coordinates[pix]
        self.level_min = wc

    def moveLevelMax(self, y):
        pix = self.getPixelByDensity(self.level_max) - y
        if pix < 0:
            pix = 0
        elif pix > self.height() - 1:
            pix = self.height() - 1
        elif pix > self.getPixelByDensity(self.level_min + 50):
            pix = self.getPixelByDensity(self.level_min + 50)

        wc = self._coordinates[pix]
        self.level_max = wc

    def getPixelByDensity(self, density):
        h = min(self._coordinates.values(), key=lambda x: abs(x - density))
        return list(self._coordinates.keys())[list(self._coordinates.values()).index(h)]

    def getTypeByPixel(self, y):
        if (y > self.window_x and (y < self.window_x + 5)):
            return 1
        elif (y > self.window_x + 5 and (y < self.window_x + self.window_h - 5)):
            return 2
        elif ((y > (self.window_x + self.window_h - 5)) and (y < self.window_x + self.window_h)):
            return 3
        else:
            return 0

    def updateCoordinates(self):
        self._coordinates = {}

        w = self.width()
        h = self.height()

        pix_size = h / sum(map(abs, self.densities))

        text1 = self.density_max - (self.density_max % 500)
        # координаты значений
        for p1 in range(int((self.density_max % 500) * pix_size), h, int(500 * pix_size)):
            self._coordinates[p1] = text1

            text2 = text1
            for g in range(100, 500, 100):
                text2 -= 100
                p2 = int(p1 + (g * pix_size))
                if p2 > h:
                    break
                self._coordinates[p2] = text2

            text1 -= 500

        for p3 in range(0, h):
            if p3 not in self._coordinates:
                density = self.density_max - int(p3 / pix_size)
                if (density % 100) == 0:
                    density = round(self.density_max - (p3 / pix_size)) - 1
                self._coordinates[p3] = density

    def updateLevelVars(self):
        self.window_x = self.getPixelByDensity(self.level_max)
        self.window_h = self.getPixelByDensity(self.level_min) - self.window_x








class View2D(QWidget, Ui_View2D):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.setDisabled(True)
        self.on_tbTools_toggled(False)

        self.viewport = Viewport()
        self.viewport.istyle = vtk.vtkInteractorStyleImage()
        self.viewport.interactor.Initialize()
        self.layout.addWidget(self.viewport)

        self._viewer = vtk.vtkImagePlaneWidget()
        self._viewer.SetInteractor(self.viewport.interactor)
        self._viewer.GetTextProperty().SetColor(get_color('red'))
        self._viewer.DisplayTextOn()

        self.cmap_name = None

        self.imageModel = imageModel
        self.imageModel.imageLoaded.connect(self.loadImage)
        self.imageModel.imageUpdated.connect(self.updateImage)

        self.editorModel = editorModel

        self.histogramModel = histogramModel

        self.loadImage()

    def loadImage(self):
        if hasattr(self, 'imageModel'):
            if self.imageModel.image:
                self.setEnabled(True)

                self._viewer.SetInputData(self.imageModel.image)
                self._viewer.SetPlaneOrientation(self.orientation)
                self._viewer.SetRestrictPlaneToVolume(True)
                self._viewer.SetResliceInterpolateToNearestNeighbour()
                self._viewer.On()

                self.updateSlice()
                self.updateCmap()

                camera = self.viewport.camera
                image_size = self.imageModel.image.GetDimensions()
                center = self.imageModel.image.GetCenter()
                camera.SetFocalPoint(center[0], center[1], center[2] + 0.001)

                if self.orientation == PlaneModel.SAGITTAL:
                    camera.SetPosition(center[0] + 400,
                                       center[1],
                                       center[2])
                    camera.SetRoll(270)
                elif self.orientation == PlaneModel.CORONAL:
                    camera.SetPosition(center[0],
                                       center[1] - 400,
                                       center[2])
                    camera.SetRoll(0)
                elif self.orientation == PlaneModel.AXIAL:
                    camera.SetPosition(center[0],
                                       center[1],
                                       center[2] - 400)
                    camera.SetRoll(180)

                camera.ComputeViewPlaneNormal()
                camera.ParallelProjectionOn()
                camera.SetParallelScale(image_size[0] / 5)

                self.viewport.rwindow.Render()
                print("{} image loaded".format(self.objectName()))

    def updateImage(self):
        self.viewport.rwindow.Render()

    @pyqtSlot(int)
    def setOrientation(self, orientation):
        self.orientation = PlaneModel.AXIAL
        self.planeModel = axialModel

        if orientation == "sagittal":
            self.orientation = PlaneModel.SAGITTAL
            self.planeModel = sagittalModel
        elif orientation == "coronal":
            self.orientation = PlaneModel.CORONAL
            self.planeModel = coronalModel

        self.planeModel.sliceUpdated.connect(self.updateSlice)
        self.planeModel.cmapUpdated.connect(self.updateCmap)
        self.loadImage()

    @pyqtSlot(str)
    def setObjectName(self, name):
        super().setObjectName(name)
        self.setOrientation(name)

    @pyqtSlot()
    def updateSlice(self):
        slice_index = self.planeModel.slice

        if self.sSlice.maximum() != self.planeModel.slice_max:
            self.sSlice.setMaximum(self.planeModel.slice_max)
        if self.sSlice.value() != slice_index:
            self.sSlice.setValue(slice_index)
        if self.sbSlice.maximum() != self.planeModel.slice_max:
            self.sbSlice.setMaximum(self.planeModel.slice_max)
        if self.sbSlice.value() != slice_index:
            self.sbSlice.setValue(slice_index)

        if self._viewer.GetSliceIndex() == slice_index:
            return

        # for prop in self.editorModel.props:
        #     actor = self.editorModel.props[prop]
        #     plane = Plane.XY(origin=self._viewer.GetOrigin())
        #     clipped = actor.mesh.slice_by_plane(plane=plane)

        #     if hasattr(self, 'contour'):
        #         self.contour.mesh = clipped
        #     else:
        #         self.contour = PolyActor(mesh=clipped,
        #                                  color='red',
        #                                  render_lines_as_tubes=True,
        #                                  line_width=3)
        #         self.viewport.add_prop(self.contour)

        self._viewer.SetSliceIndex(slice_index)
        self.viewport.rwindow.Render()
        print("{} set slice: {}".format(self.objectName(),
                                        slice_index))

        if hasattr(self, 'line_widget'):
            self.line_widget.updateSlice(self._viewer.GetPlaneOrientation(),
                                         self._viewer.GetSlicePosition())

    @pyqtSlot()
    def updateCmap(self):
        if self.cmap_name != self.planeModel.cmap:
            self.cmap_name = self.planeModel.cmap
            self._viewer.SetLookupTable(cmap(mapping=self.cmap_name))
            print("{} set colormap: {}".format(
                self.objectName(), self.cmap_name))

        level = self.planeModel.level
        window = self.planeModel.window
        if self._viewer.GetLevel() != level or self._viewer.GetWindow() != window:
            self._viewer.SetWindowLevel(window, level)
            print("{} set window: {}".format(self.objectName(), window))
            print("{} set level: {}".format(self.objectName(), level))

    @pyqtSlot(bool)
    def on_tbTools_toggled(self, toggle):
        if toggle is True:
            self.tbTools.setArrowType(Qt.UpArrow)
        else:
            self.tbTools.setArrowType(Qt.DownArrow)

        self.tools.setVisible(toggle)

    @pyqtSlot(int)
    def on_sSlice_valueChanged(self, value):
        self.planeModel.slice = value

    @pyqtSlot(int)
    def on_sbSlice_valueChanged(self, value):
        self.planeModel.slice = value

    @pyqtSlot(bool)
    def on_toolButtonPan_toggled(self, toggle):
        if toggle == True:
            self.viewport.setModePan(True)
            self._viewer.InteractionOff()
        else:
            self.viewport.setModePan(False)
            self._viewer.InteractionOn()

    @pyqtSlot(bool)
    def on_toolButtonZoom_toggled(self, toggle):
        if toggle == True:
            self.viewport.setModeZoom(True)
            self._viewer.InteractionOff()
        else:
            self.viewport.setModeZoom(False)
            self._viewer.InteractionOn()

    @pyqtSlot(bool)
    def on_toolButtonRotate_toggled(self, toggle):
        if toggle == True:
            self.viewport.setModeRotate(True)
            self._viewer.InteractionOff()
        else:
            self.viewport.setModeRotate(False)
            self._viewer.InteractionOn()

    @pyqtSlot(bool)
    def on_tbDistanceMeasurer_toggled(self, toggle):
        if toggle == True:
            self.distance_widget = widget.DistanceMeasurer(self.viewport)
            self.distance_widget.show()
            # Выключаем обычное взаимодействие для виджета
            self._viewer.InteractionOff()
        else:
            if self.distance_widget:
                self.distance_widget.hide()
                self._viewer.InteractionOn()

    @pyqtSlot(bool)
    def on_tbAngleMeasurer_toggled(self, toggle):
        if toggle == True:
            self.angle_widget = widget.AngleMeasurer(self.viewport)
            self.angle_widget.show()
            # Выключаем обычное взаимодействие для виджета
            self._viewer.InteractionOff()
        else:
            if self.angle_widget:
                self.angle_widget.hide()
                # Включаем обычное взаимодействие для виджета
                self._viewer.InteractionOn()

    @pyqtSlot(bool)
    def on_toolButtonLineProbe_toggled(self, toggle):
        self.histogramModel.showHistogram(toggle)
        if toggle == True:
            self.line_widget = LineProbe(self.viewport.interactor,
                                         self._viewer.GetProp3D(),
                                         on_changed=self.on_lineprobe)

            self.line_widget.place(self.imageModel.image.bounds,
                                   self._viewer.GetPlaneOrientation(),
                                   self._viewer.GetSlicePosition())

            self.line_widget.show()
            self.line_widget.callback(1, 1)
            # Выключаем обычное взаимодействие для виджета
            self._viewer.InteractionOff()
        else:
            if self.line_widget:
                self.line_widget.hide()
                # Включаем обычное взаимодействие для виджета
                self._viewer.InteractionOn()

    def on_lineprobe(self, probe):
        spline = vtk.vtkSplineFilter()
        spline.SetInputData(probe)
        spline.SetSubdivideToSpecified()
        spline.SetNumberOfSubdivisions(256)
        spline.Update()

        sample_volume = vtk.vtkProbeFilter()
        sample_volume.SetInputData(1, self.imageModel.image)
        sample_volume.SetInputData(0, spline.GetOutput())
        sample_volume.Update()

        samples = sample_volume.GetOutput().GetPointData().GetArray(0)
        samples = np.array([samples.GetValue(i)
                            for i in range(samples.GetNumberOfValues())])

        self.histogramModel.setHistogram(samples)
        # plt.plot(samples)
        # plt.show()


class LineProbe(object):

    def __init__(self, interactor, prop, on_changed=None):
        self.interactor = interactor
        self.on_changed = on_changed

        self.widget = vtk.vtkLineWidget()
        self.widget.SetInteractor(self.interactor)
        self.widget.SetProp3D(prop)
        self.widget.AddObserver(vtk.vtkCommand.EndInteractionEvent,
                                self.callback)

    def place(self, bounds, orientation, position):
        self.widget.PlaceWidget(bounds)

        if orientation == 0:
            self.widget.SetPoint1(position, bounds[2], bounds[5] / 2)
            self.widget.SetPoint2(position, bounds[3], bounds[5] / 2)

        elif orientation == 1:
            self.widget.SetPoint1(bounds[0], position, bounds[5] / 2)
            self.widget.SetPoint2(bounds[1], position, bounds[5] / 2)

        elif orientation == 2:
            self.widget.SetPoint1(bounds[0], bounds[3] / 2, position)
            self.widget.SetPoint2(bounds[1], bounds[3] / 2, position)

    def updateSlice(self, orientation, position):
        p1 = self.widget.GetPoint1()
        p2 = self.widget.GetPoint2()

        if orientation == 0:
            self.widget.SetPoint1(position, p1[1], p1[2])
            self.widget.SetPoint2(position, p2[1], p2[2])

        elif orientation == 1:
            self.widget.SetPoint1(p1[0], position, p1[2])
            self.widget.SetPoint2(p2[0], position, p2[2])

        elif orientation == 2:
            self.widget.SetPoint1(p1[0], p1[1], position)
            self.widget.SetPoint2(p2[0], p2[1], position)

        self.callback(1, 1)

    def as_polydata(self):
        tmp = Mesh()
        self.widget.GetPolyData(tmp)
        return tmp

    def set_on_angle_changed(self, callback):
        self.on_changed = callback

    def callback(self, caller, event):
        if self.on_changed:
            self.on_changed(self.as_polydata())

    def show(self):
        self.widget.On()

    def hide(self):
        self.widget.Off()






class View3D(QWidget, Ui_View3D):

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)

        self.viewport = Viewport()
        self.viewport.istyle = vtk.vtkInteractorStyleTrackballCamera()
        self.viewport.interactor.Initialize()
        self.layout.addWidget(self.viewport)

        self.imageModel = imageModel
        self.imageModel.imageLoaded.connect(self.loadImage)
        self.imageModel.imageUpdated.connect(self.updateImage)

        self.lookModel = lookModel
        self.lookModel.lookUpdated.connect(self.updateLook)

        self.loadImage()

    @pyqtSlot()
    def loadImage(self):
        if self.imageModel.image:
            if hasattr(self, 'actor'):
                self.viewport.remove_prop(self.actor)
            self.actor = VolActor(self.imageModel.image)
            self.viewport.add_prop(self.actor)
            self.viewport.reset_view()

    @pyqtSlot()
    def updateImage(self):
        if self.imageModel.image:
            self.viewport.remove_prop(self.actor)
            self.actor = VolActor(self.imageModel.image)
            self.viewport.add_prop(self.actor)
            self.updateRender()

    @pyqtSlot(tuple)
    def updateLook(self, look):
        self.viewport.look_from(look)

    def updateRender(self):
        self.viewport.rwindow.Render()
